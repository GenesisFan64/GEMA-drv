/===========================================================================
| GEMA Instrument format
\===========================================================================

Todos los intrumentos están organizados en el mismo orden que el modulo .it original

MACROS de los instrumentos:

	gInsNull
	gInsPsg  0,$00,$00,$00,$00,$01,$00		; PSG normal
	gInsPsgN 0,$00,$00,$00,$00,$01,$00,%011		; PSG noise
	gInsFm   0,FmIns_TEST,0				; FM normal
	gInsFm3  0,FmIns_Sp_TEST,0			; FM3 special
	gInsDac  0,DacIns_TEST,0			; DAC sample (FM6)
	gInsPcm  0,PcmIns_TEST,0			; PCM sample (SCD)
	gInsPwm  0,PwmIns_TEST,%00			; PWM sample (32X)

/=========================================\
 Null instrument
\=========================================/

	gInsNull

Este es un instrumento nulo, sin parametros.

/=========================================\
 PSG  - PSG Tone
 PSGN - PSG Noise and Bass
\=========================================/

	gInsPsg  PITCH,ALV,ART,SLV,DKY,RRT,VIB
	gInsPsgN PITCH,ALV,ART,SLV,DKY,RRT,VIB,MODE

3 tonos Square Wave y un tono Noise.

El canal Noise solo puede reproducir sonido a base de CLOCK del CPU, las notas son ignoradas.
Para poder controlar las frequencias/notas utiliza el modo "Tone3", usando este modo el canal se "roba" la frequencia del canal 3, debido a esto ese canal se apagará y no se podrá usar en ninguna sequencia hasta que otro instrumento gInsPsgN active CLOCK de nuevo.

Si en ese mismo momento el canal 3 ya estaba en uso se apagará automaticamente, pero dentro del driver se seguirá modificando.

Los parametros van dentro del instrumento.

=========================================
Parametros:

pitch | Pitch/Octave up or down
alv   | Attack level *1
art   | Attack rate *1
slv   | Sustain *1
dky   | Decay rate (up) *1
rrt   | Release rate (down) *1
vib   | $00, reservado para vibrato (después...)
mode  | Noise mode: %00000tmm
      | t - Bass(0)|Noise(1)
      | m - CLOCK(00)|CLOCK/2(01)|CLOCK/4(10)|Tone3(11)

-------------------------------------
NOTAS:

*1
En formato 4-bit float: %0000.0000, $0x es ALTO y $Fx es BAJO (silencio)

/=========================================\
 FM synthesizer

 FM  - YM2612 normal
 FM3 - YM2612 special
\=========================================/

6 canales FM, pero 2 tienen proposito especial:
- Canal 3 es FM Special para instrumentos más complicados con operadoes en separado, no se pueden usar Notas musicales en este modo.
- Canal 6 es DAC, *ver gInsDac para más detalles*

Al usar gInsFm3 y gInsDac, cualquier instrumento normal que esté en los canal 3 y 6 se perderá.

	gInsFm  PITCH,LOCATION
	gInsFm3 PITCH,LOCATION

=========================================
Parametros:

pitch    | Pitch/Octave up or down
location | Puntero hacia ROM or RAM* a los datos de registros YM

* Para usar datos del RAM, se tiene que llamar gemaReadRam manualmente todo el tiempo, por ejemplo dentro del loop de espera de VBlank *

-------------------------------------
FORMATO de gInsFm y gInsFm3

FmIns_DATA:
	;    OP1,OP2,OP3,OP4
	dc.b $30,$34,$38,$3C	; Los registros en este orden (checar el documento YM2612
	dc.b $40,$44,$48,$4C	; para ver detalles de cada uno)
	dc.b $50,$54,$58,$5C	; **
	dc.b $60,$64,$68,$6C	; **
	dc.b $70,$74,$78,$7C	; **
	dc.b $80,$84,$88,$8C	; **
	dc.b $90,$94,$98,$9C	; **
	dc.b $B0,$B4,$22,$28	; **
	dc.w FQ1,FQ2,FQ3,FQ4	; gInsFm3 only: frequencias manuales para estos Operadores

Notas:
SSG-EG no funciona bien en consolas piratas/no-genuinas, SI no necesitas usar SSG-EG puedes escribir 0 a todos.

$B4 AMS/PMS: %00aa0ppp
a | AMS
p | PMS
Keep panning bits 0 and set the panning manually in your sequence with effect X

$22 LFO: %0000evvv
e | Enable
v | Value
Esta opcion afecta a TODOS los canales FM.

$28 KEYS: %oooo0000
o | Operators 4-1

/=========================================\
 Sample data (WAVE)

 DAC - YM2612 sample
 PCM - Sega CD PCM
 PWM - Sega 32X PWM
\=========================================/

1 canal para Genesis (YM2612)
8 canales PCM (con Sega CD)
8 canales PWM (con Sega 32X)

	gInsDac PITCH,LOCATION,FLAGS
	gInsPcm PITCH,LOCATION,FLAGS
	gInsPwm PITCH,LOCATION,FLAGS

NOTAS/Limitaciones:

gInsDac
Los samples solo pueden estár dentro del area de Genesis ROM (0-400000, en 32X: 880000, 900000) y RAM (FF0000)
En RAM solo es posible usando gemaReadRam pero no es recomandable porque los samples usan demasiada memoria.

gInsPcm
Los samples solo pueden estar dentro de la memoria de Sub-CPU, hay que cargar los samples desde el disco primero.
LOCATION siempre apunta a la memoria de Sub-CPU directamente

gInsPwm
Se puede usar entre ROM (CS1) y SDRAM (CS3):
- SDRAM es el lugar más seguro y compatible con CD32X pero el espacio es limitado.
- En ROM hay mucho más espacio pero solo se puede utilizar en cartucho, NO SE PUEDEN USAR EN CD32X. Otra limitación es con el bit RV en donde si el Genesis hace DMA desde ROM, El SH2 pierde acceso hasta que el bit vuelva en 0, ya se ha implementado un backup rapido durante este proceso (falta probarlo mas)
LOCATION apunta a las direcciones directas del SH2: CS1 y CS3

=========================================
Parametros:

pitch    | Pitch/Octave up or down
location | Puntero hacia los datos de sonido
flags    | DAC y PCM: %0000000L
         | PWM:       %000000SL
         |
         | L - Enable looping No/Yes
         | S - Sample data is in STEREO (PWM only)

-------------------------------------
FORMATO:

Los samples deben estar en formato 8-bit unsigned a 16000hz MONORUAL, para los PWM's se puede usar STEREO.

NOTAS:
- Si utilizas un programa moderno de edición asegurate que no tenga datos extras al final del archivo.
- Sega CD PCM: El formato es convertido durante el streaming.

Sample_DATA:
	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF) ; Sample size
	dc.b ((st_loop)&$FF),(((st_loop)>>8)&$FF),(((st_loop)>>16)&$FF)	; Starting loop point
labl_s:
	binclude "file.wav",$2C	; Skip $2C bytes from WAV
labl_e:

Para más facildad utiliza este macro, solo para archivos wav:

	gSmplData label,"filename.wav",loop_start
