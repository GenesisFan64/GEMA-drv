 AS V1.42 Beta [Bld 212] - Source File driver_only.asm - Page 1 - 10/24/2024 04:39:58 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     
       3/       0 :                     		padding		off		; Don't pad dc.b
       4/       0 :                     		listing 	purecode
       5/       0 :                     		supmode 	on 		; Supervisor mode (68000)
       6/       0 :                     		page 		0
       7/       0 :                     
       8/       0 :                     		include	"macros.asm"			; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MCD|MARSCD
(1)  231/       0 :                     	if MOMPASS>2
(1)  232/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  233/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  234/       0 :                     		endif
(1)  235/       0 :                     	endif
(1)  236/       0 :                     	endif
(1)  237/       0 :                     
(1)  238/       0 :                     	if MARS
(1)  239/       0 :                     		if * >= $900000+$100000
(1)  240/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  241/       0 :                     		endif
(1)  242/       0 :                     
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     	elseif MCD|MARSCD
(1)  245/       0 :                     		dephase
(1)  246/       0 :                     
(1)  247/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  248/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  249/       0 :                     		rompad mpadlbl
(1)  250/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  251/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  252/       0 :                     	endif
(1)  253/       0 :                     	endm
(1)  254/       0 :                     
(1)  255/       0 :                     ; --------------------------------------------
(1)  256/       0 :                     
(1)  257/       0 :                     binclude_dma	macro lblstart,file
(1)  258/       0 :                     	if MARS
(1)  259/       0 :                     GLBL_LASTPHDMA	set *
(1)  260/       0 :                     	dephase
(1)  261/       0 :                     GLBL_PHASEDMA	set *
(1)  262/       0 :                     		endif
(1)  263/       0 :                     
(1)  264/       0 :                     		align 2
(1)  265/       0 :                     lblstart	label *
(1)  266/       0 :                     		binclude file
(1)  267/       0 :                     		align 2
(1)  268/       0 :                     
(1)  269/       0 :                     	if MARS
(1)  270/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  271/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  272/       0 :                     	endif
(1)  273/       0 :                     		endm
(1)  274/       0 :                     
(1)  275/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  276/       0 :                     	if MARS
(1)  277/       0 :                     GLBL_LASTPHDMA	set *
(1)  278/       0 :                     	dephase
(1)  279/       0 :                     GLBL_PHASEDMA	set *
(1)  280/       0 :                     		endif
(1)  281/       0 :                     
(1)  282/       0 :                     		align 2
(1)  283/       0 :                     lblstart	label *
(1)  284/       0 :                     		binclude file
(1)  285/       0 :                     lblend		label *
(1)  286/       0 :                     		align 2
(1)  287/       0 :                     
(1)  288/       0 :                     	if MARS
(1)  289/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  290/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  291/       0 :                     	endif
(1)  292/       0 :                     		endm
(1)  293/       0 :                     
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     ; 32X graphics pack Enter/Exit
(1)  296/       0 :                     ; --------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     mars_VramStart	macro thelabel
(1)  299/       0 :                     thelabel label *
(1)  300/       0 :                     		phase 0
(1)  301/       0 :                     		endm
(1)  302/       0 :                     
(1)  303/       0 :                     mars_VramEnd	macro thelabel
(1)  304/       0 :                     		align 8
(1)  305/       0 :                     .end:
(1)  306/       0 :                     ; 		if MOMPASS == 1
(1)  307/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  308/       0 :                     ; 		endif
(1)  309/       0 :                     		dephase
(1)  310/       0 :                     thelabel label *
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     ; Fill CD sectors
(1)  315/       0 :                     ; --------------------------------------------
(1)  316/       0 :                     
(1)  317/       0 :                     fillSectors macro num
(1)  318/       0 :                     	rept num
(1)  319/       0 :                     		align $800-1
(1)  320/       0 :                     		dc.b 0
(1)  321/       0 :                     	endm
(1)  322/       0 :                     	endm
(1)  323/       0 :                     
(1)  324/       0 :                     ; ====================================================================
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     ; Nikona CODE macros
(1)  327/       0 :                     ; ------------------------------------------------------------
(1)  328/       0 :                     
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     ; VDP color debug
(1)  331/       0 :                     ; --------------------------------------------
(1)  332/       0 :                     
(1)  333/       0 :                     vdp_showme	macro color
(1)  334/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  335/       0 :                     		move.w	#color,(vdp_data).l
(1)  336/       0 :                     		endm
(1)  337/       0 :                     
       9/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      10/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      11/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      12/       0 :                     
      13/       0 :                     ; ====================================================================
      14/       0 :                     ; ----------------------------------------------------------------
      15/       0 :                     ; EXTERNAL
      16/       0 :                     ; ----------------------------------------------------------------
      17/       0 :                     
      18/       0 :                     ; 68K RAM location at the area $FF8000-$FFFFFF
      19/       0 :                     ; to write a flag for the readRom RAM-area patch
      20/       0 :                     
      21/       0 : =$FFFFFF00           RAM_ZCdFlagD	equ $FFFFFF00
      22/       0 :                     
      23/       0 :                     ; ====================================================================
      24/       0 :                     ; ----------------------------------------------------------------
      25/       0 :                     ; AS Assembler starting settings
      26/       0 :                     ; ----------------------------------------------------------------
      27/       0 :                     
      28/       0 :                     		cpu Z80
      29/       0 :                     		org 0
      30/       0 :                     		include "../sound/drv/gema_zdrv.asm"
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; GEMA Z80 code
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =0AH                 MAX_TRFRPZ	equ 10		; !! Max readRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of buffers
(1)   19/       0 : =20H                 MAX_ZCMND	equ 20h		; !! Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   20/       0 :                     
(1)   21/       0 : =12H                 MAX_TBLSIZE	equ 12h		; Maximum size for chip tables
(1)   22/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   23/       0 :                     
(1)   24/       0 :                     ; --------------------------------------------------------
(1)   25/       0 :                     ; Structs
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; trkBuff struct
(1)   29/       0 :                     ;
(1)   30/       0 :                     ; trk_Status: %ERP- V--0
(1)   31/       0 :                     ; E - enabled
(1)   32/       0 :                     ; R - Init|Restart track
(1)   33/       0 :                     ; P - refill-on-playback
(1)   34/       0 :                     ; V - volume change flag
(1)   35/       0 :                     ; 0 - Use global sub-beats
(1)   36/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   37/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   38/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   39/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   40/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   41/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   42/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   43/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   44/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   45/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   46/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   47/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   48/       0 : =12H                 trk_TickTmr	equ 12h	; Ticks timer
(1)   49/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   50/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   51/       0 : =15H                 trk_BankHeads	equ 15h ; Header bank
(1)   52/       0 : =16H                 trk_BankBlk	equ 16h	; Block bank
(1)   53/       0 : =17H                 trk_MaxChnl	equ 17h ; MAX channels used in this track
(1)   54/       0 : =18H                 trk_VolFdTarget	equ 18h	; Target fade volume
(1)   55/       0 : =19H                 trk_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   56/       0 : =1CH                 trk_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   57/       0 : =1FH                 trk_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   58/       0 : =22H                 trk_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   59/       0 : =25H                 trk_ChnIndx	equ 25h	; CHANNEL INDEXING START HERE
(1)   60/       0 :                     
(1)   61/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   62/       0 :                     ;
(1)   63/       0 :                     ; chnl_Flags: E0LRevin
(1)   64/       0 :                     ; 	 E - Channel is active
(1)   65/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   66/       0 :                     ; 	 e - Effect*
(1)   67/       0 :                     ; 	 v - Volume*
(1)   68/       0 :                     ; 	 i - Intrument*
(1)   69/       0 :                     ; 	 n - Note*
(1)   70/       0 :                     
(1)   71/       0 : =0H                  chnl_Flags	equ 0	; !! Playback flags: %E0LRevin ** MUST BE LOCATED AT 0 **
(1)   72/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   73/       0 : =2H                  chnl_Note	equ 2	; IT Music note or command
(1)   74/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   75/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   76/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   77/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   78/       0 : =7H                  chnl_Type	equ 7	; Impulse type bits
(1)   79/       0 :                     
(1)   80/       0 :                     
(1)   81/       0 :                     ; Table struct
(1)   82/       0 : =0H                  ztbl_Link	equ 00h			; !! current linked channel in trkChnls
(1)   83/       0 : =2H                  ztbl_Priority	equ 02h			; !! 00h-7Fh: Priority level 0-15 + 80h+chipID Silence request
(1)   84/       0 : =3H                  ztbl_Chip	equ 03h			; Chip index (YM2612: direct index) *MUST BE ON THE LIST*
(1)   85/       0 : =4H                  ztbl_MasterVol	equ 04h			; MASTER volume for this channel
(1)   86/       0 : =5H                  ztbl_FreqIndx	equ 05h			; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   87/       0 : =6H                  ztbl_PitchBend	equ 06h			; Pitchbend incr/decr
(1)   88/       0 : =7H                  ztbl_Volume	equ 07h			; Current Volume: 00-max
(1)   89/       0 : =8H                  ztbl_VolSlide	equ 08h			; Volume slide incr/decr
(1)   90/       0 : =0AH                 ztbl_InstCach	equ 0Ah			; <-- 8 bytes
(1)   91/       0 :                     
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     ; Variables
(1)   94/       0 :                     ; --------------------------------------------------------
(1)   95/       0 :                     
(1)   96/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   97/       0 : =0H                  zopcNop		equ 00h
(1)   98/       0 : =8H                  zopcEx		equ 08h
(1)   99/       0 : =0C9H                zopcRet		equ 0C9h
(1)  100/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  101/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  102/       0 :                     
(1)  103/       0 :                     ; PSG
(1)  104/       0 : =0H                  COM		equ 0
(1)  105/       0 : =4H                  LEV		equ 4
(1)  106/       0 : =8H                  ATK		equ 8
(1)  107/       0 : =0CH                 DKY		equ 12
(1)  108/       0 : =10H                 SLV		equ 16
(1)  109/       0 : =14H                 RRT		equ 20
(1)  110/       0 : =18H                 MODE		equ 24
(1)  111/       0 : =1CH                 DTL		equ 28
(1)  112/       0 : =20H                 DTH		equ 32
(1)  113/       0 : =24H                 ALV		equ 36
(1)  114/       0 : =28H                 FLG		equ 40
(1)  115/       0 : =2CH                 ARP		equ 44
(1)  116/       0 : =30H                 MVOL		equ 48
(1)  117/       0 : =34H                 EFFV		equ 52
(1)  118/       0 : =38H                 PTMR		equ 56
(1)  119/       0 :                     
(1)  120/       0 :                     ; ====================================================================
(1)  121/       0 :                     ; --------------------------------------------------------
(1)  122/       0 :                     ; Code starts here
(1)  123/       0 :                     ; --------------------------------------------------------
(1)  124/       0 :                     
(1)  125/       0 : F3                  		di			; Disable interrupts
(1)  126/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  127/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  128/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  129/       8 :                     
(1)  130/       8 :                     ; --------------------------------------------------------
(1)  131/       8 :                     ; RST 8 (dac_me)
(1)  132/       8 :                     ;
(1)  133/       8 :                     ; Writes wave data to DAC using data stored
(1)  134/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  135/       8 :                     ; instructions to keep the samplerate stable.
(1)  136/       8 :                     ;
(1)  137/       8 :                     ; Input (EXX):
(1)  138/       8 :                     ;  c - WAVE buffer MSB
(1)  139/       8 :                     ; de - Pitch (xx.00)
(1)  140/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Uses (EXX):
(1)  143/       8 :                     ; b
(1)  144/       8 :                     ;
(1)  145/       8 :                     ; Notes:
(1)  146/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  147/       8 :                     ; DAC playback
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  150/       8 :                     ; --------------------------------------------------------
(1)  151/       8 :                     
(1)  152/       8 :                     ; EXX set:
(1)  153/       8 :                     ; af - temporal
(1)  154/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  155/       8 :                     ; de - pitch increment
(1)  156/       8 :                     ; hl - wave buffer position 00.00h
(1)  157/       8 :                     		org 8
(1)  158/       8 : D9                  dac_me:		exx			; * flip registers <-- Changes between EXX(play) and RET(stop)
(1)  159/       9 : 08                  		ex	af,af'		; Swap af
(1)  160/       A : 45                  		ld	b,l		; Save old hl buff
(1)  161/       B : 6C                  		ld	l,h		;
(1)  162/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  163/       D : 3E 2A               		ld	a,2Ah		;
(1)  164/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  165/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  166/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  167/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  168/      17 : 68                  		ld	l,b		;
(1)  169/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  170/      19 : 08                  		ex	af,af'		; Return af
(1)  171/      1A : D9                  		exx			; * return registers
(1)  172/      1B : C9                  		ret
(1)  173/      1C :                     
(1)  174/      1C :                     ; --------------------------------------------------------
(1)  175/      1C :                     ; 1Ch - Master tracklist pointer
(1)  176/      1C :                     gemaMstrListPos:
(1)  177/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  178/      1D : 00                  		db 0
(1)  179/      1E : 00                  		db 0
(1)  180/      1F : 00                  		db 0
(1)  181/      20 :                     
(1)  182/      20 :                     ; --------------------------------------------------------
(1)  183/      20 :                     ; RST 20h (dac_me)
(1)  184/      20 :                     ; *** self-modifiable code ***
(1)  185/      20 :                     ;
(1)  186/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  187/      20 :                     ; it playing.
(1)  188/      20 :                     ; --------------------------------------------------------
(1)  189/      20 :                     
(1)  190/      20 :                     		org 20h
(1)  191/      20 : F5                  dac_fill:	push	af		; Save af <-- Changes between PUSH AF(play) and RET(stop)
(1)  192/      21 : 3A 37 00            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  193/      24 : D9                  		exx			; * swap regs
(1)  194/      25 : AC                  		xor	h		; Grab LSB.00
(1)  195/      26 : D9                  		exx			; * swap regs
(1)  196/      27 : E6 80               		and	80h		; Check if half-bit changed
(1)  197/      29 : C4 29 12            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  198/      2C : F1                  		pop	af		; Restore af
(1)  199/      2D : C9                  		ret
(1)  200/      2E :                     
(1)  201/      2E :                     ; --------------------------------------------------------
(1)  202/      2E :                     ; 02Eh - User read/write values
(1)  203/      2E :                     
(1)  204/      2E : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1)  205/      2F : 00                  psgHatMode	db 0			; Current PSGN mode
(1)  206/      30 : 00                  fmSpecial	db 0			; copy of FM3 enable bit
(1)  207/      31 : 00 00               sbeatAcc	dw 0			; Accumulates on each tick to trigger the sub beats
(1)  208/      33 : D6 00               sbeatPtck	dw 214			; Default global subbeats (this-32 for PAL) 214=125
(1)  209/      35 : 00                  x68ksrclsb	db 0			; readRom temporal LSB
(1)  210/      36 : 00                  x68ksrcmid	db 0			; readRom temporal MID
(1)  211/      37 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1)  212/      38 :                     
(1)  213/      38 :                     ; --------------------------------------------------------
(1)  214/      38 :                     ; Z80 Interrupt at 0038h
(1)  215/      38 :                     ; --------------------------------------------------------
(1)  216/      38 :                     
(1)  217/      38 :                     		org 38h				; Align 38h
(1)  218/      38 : ED 73 F6 1C         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  219/      3C : F3                  		di				; Disable interrupt
(1)  220/      3D : C9                  		ret
(1)  221/      3E :                     
(1)  222/      3E :                     ; --------------------------------------------------------
(1)  223/      3E :                     ; Initialize
(1)  224/      3E :                     ; --------------------------------------------------------
(1)  225/      3E :                     
(1)  226/      3E :                     z80_init:
(1)  227/      3E : CD 02 0F            		call	gema_init		; Init values
(1)  228/      41 : FB                  		ei
(1)  229/      42 :                     
(1)  230/      42 :                     ; --------------------------------------------------------
(1)  231/      42 :                     ; MAIN LOOP
(1)  232/      42 :                     ; --------------------------------------------------------
(1)  233/      42 :                     
(1)  234/      42 :                     drv_loop:
(1)  235/      42 : CF                  		rst	8
(1)  236/      43 : CD 74 0F            		call	get_tick		; Check tick on VBlank
(1)  237/      46 : E7                  		rst	20h			; Refill wave here
(1)  238/      47 : CF                  		rst	8
(1)  239/      48 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  240/      4A : 3A F8 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  241/      4D : D6 01               		sub	1
(1)  242/      4F : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  243/      51 : 32 F8 1C            		ld	(tickCnt),a
(1)  244/      54 : CD 4E 10            		call	chip_env		; Process PSG and YM
(1)  245/      57 : CD 74 0F            		call	get_tick		; Check for another tick
(1)  246/      5A : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  247/      5C :                     .noticks:
(1)  248/      5C : 3A 32 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  249/      5F : D6 01               		sub	1
(1)  250/      61 : 38 06               		jr	c,.nobeats
(1)  251/      63 : CF                  		rst	8
(1)  252/      64 : 32 32 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  253/      67 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  254/      69 :                     .nobeats:
(1)  255/      69 : CF                  		rst	8
(1)  256/      6A : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  257/      6B : B7                  		or	a
(1)  258/      6C : 28 14               		jr	z,.neither
(1)  259/      6E : 32 F9 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  260/      71 : CF                  		rst	8
(1)  261/      72 : CD 74 0F            		call	get_tick
(1)  262/      75 : CD F1 05            		call	set_chips		; Send changes to sound chips
(1)  263/      78 : CD 74 0F            		call	get_tick
(1)  264/      7B : CF                  		rst	8
(1)  265/      7C : CD 21 02            		call	upd_track		; Update track data
(1)  266/      7F : CD 74 0F            		call	get_tick
(1)  267/      82 :                     .neither:
(1)  268/      82 : CF                  		rst	8
(1)  272/      83 : CD 74 0F            		call	get_tick
(1)  273/      86 :                     .next_cmd:
(1)  274/      86 : 3A 80 1F            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  275/      89 : 47                  		ld	b,a			; are in the same spot a == b
(1)  276/      8A : 3A 2E 00            		ld	a,(commZRead)
(1)  277/      8D : B8                  		cp	b			; If equal, loop back.
(1)  278/      8E : 28 B2               		jr	z,drv_loop
(1)  279/      90 : CF                  		rst	8
(1)  280/      91 : CD A9 00            		call	.grab_arg		; Read staring flag -1
(1)  281/      94 : FE FF               		cp	-1			; Got START -1?
(1)  282/      96 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  283/      98 : CD A9 00            		call	.grab_arg		; Read command number
(1)  284/      9B : 87                  		add	a,a			; ID * 2
(1)  285/      9C : 21 C8 00            		ld	hl,.list		; Index-jump...
(1)  286/      9F : 16 00               		ld	d,0
(1)  287/      A1 : 5F                  		ld	e,a
(1)  288/      A2 : 19                  		add	hl,de
(1)  289/      A3 : 7E                  		ld	a,(hl)
(1)  290/      A4 : 23                  		inc	hl
(1)  291/      A5 : 66                  		ld	h,(hl)
(1)  292/      A6 : CF                  		rst	8
(1)  293/      A7 : 6F                  		ld	l,a
(1)  294/      A8 : E9                  		jp	(hl)
(1)  295/      A9 :                     
(1)  296/      A9 :                     ; --------------------------------------------------------
(1)  297/      A9 :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  298/      A9 :                     ; --------------------------------------------------------
(1)  299/      A9 :                     
(1)  300/      A9 :                     .grab_arg:
(1)  301/      A9 : D5                  		push	de
(1)  302/      AA : E5                  		push	hl
(1)  303/      AB :                     .getcbytel:
(1)  304/      AB : 3A 80 1F            		ld	a,(commZWrite)
(1)  305/      AE : 57                  		ld	d,a
(1)  306/      AF : CF                  		rst	8
(1)  307/      B0 : 3A 2E 00            		ld	a,(commZRead)
(1)  308/      B3 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  309/      B4 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  310/      B6 : 16 00               		ld	d,0
(1)  311/      B8 : 5F                  		ld	e,a
(1)  312/      B9 : 21 60 1F            		ld	hl,commZfifo	; Read commZ list + index
(1)  313/      BC : 19                  		add	hl,de
(1)  314/      BD : CF                  		rst	8
(1)  315/      BE : 3C                  		inc	a
(1)  316/      BF : E6 1F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  317/      C1 : 32 2E 00            		ld	(commZRead),a
(1)  318/      C4 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  319/      C5 : E1                  		pop	hl
(1)  320/      C6 : D1                  		pop	de
(1)  321/      C7 : C9                  		ret
(1)  322/      C8 :                     
(1)  323/      C8 :                     ; --------------------------------------------------------
(1)  324/      C8 :                     
(1)  325/      C8 :                     .list:
(1)  326/      C8 : D8 00               		dw .cmnd_0		; 00h - TESTING
(1)  327/      CA : DB 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  328/      CC : F4 00               		dw .cmnd_2		; 02h - Play by track number
(1)  329/      CE : 2E 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  330/      D0 : D8 00               		dw .cmnd_0		; 04h - **
(1)  331/      D2 : 6C 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  332/      D4 : A5 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  333/      D6 : DE 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  334/      D8 :                     
(1)  335/      D8 :                     ; --------------------------------------------------------
(1)  336/      D8 :                     ; Command 00h
(1)  337/      D8 :                     ;
(1)  338/      D8 :                     ; Reserved for TESTING purposes.
(1)  339/      D8 :                     ; --------------------------------------------------------
(1)  340/      D8 :                     
(1)  341/      D8 :                     .cmnd_0:
(1)  342/      D8 : C3 86 00            		jp	.next_cmd
(1)  343/      DB :                     
(1)  344/      DB :                     ; --------------------------------------------------------
(1)  345/      DB :                     ; Command 01h:
(1)  346/      DB :                     ;
(1)  347/      DB :                     ; Set the Track MASTER-list.
(1)  348/      DB :                     ; --------------------------------------------------------
(1)  349/      DB :                     
(1)  350/      DB :                     .cmnd_1:
(1)  351/      DB : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  352/      DE : CD A9 00            		call	.grab_arg		; $000000xx
(1)  353/      E1 : 77                  		ld	(hl),a
(1)  354/      E2 : 2B                  		dec	hl
(1)  355/      E3 : CD A9 00            		call	.grab_arg		; $0000xx00
(1)  356/      E6 : 77                  		ld	(hl),a
(1)  357/      E7 : 2B                  		dec	hl
(1)  358/      E8 : CD A9 00            		call	.grab_arg		; $00xx0000
(1)  359/      EB : 77                  		ld	(hl),a
(1)  360/      EC : 2B                  		dec	hl
(1)  361/      ED : CD A9 00            		call	.grab_arg		; $xx000000 (filler)
(1)  362/      F0 : 77                  		ld	(hl),a
(1)  363/      F1 : C3 86 00            		jp	.next_cmd
(1)  364/      F4 :                     
(1)  365/      F4 :                     ; --------------------------------------------------------
(1)  366/      F4 :                     ; Command 02h:
(1)  367/      F4 :                     ;
(1)  368/      F4 :                     ; Make new track by sequence number
(1)  369/      F4 :                     ;
(1)  370/      F4 :                     ; Arguments:
(1)  371/      F4 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  372/      F4 :                     ; --------------------------------------------------------
(1)  373/      F4 :                     
(1)  374/      F4 :                     .cmnd_2:
(1)  375/      F4 : CD A9 00            		call	.grab_arg		; d1: Sequence ID
(1)  376/      F7 : 4F                  		ld	c,a			; copy as c
(1)  377/      F8 : CD A9 00            		call	.grab_arg		; d2: Block from
(1)  378/      FB : 47                  		ld	b,a			; copy as b
(1)  379/      FC : CF                  		rst	8
(1)  380/      FD : CD A9 00            		call	.grab_arg		; d0: Slot index
(1)  381/     100 : FD 21 BA 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  382/     104 : B7                  		or	a
(1)  383/     105 : FA 14 01            		jp	m,.srch_mode
(1)  384/     108 :                     ; 		cp	-1			; if d2 == -1, search
(1)  385/     108 :                     ; 		jr	z,.srch_mode
(1)  386/     108 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  387/     10A : D2 86 00            		jp	nc,.next_cmd
(1)  388/     10D : CF                  		rst	8
(1)  389/     10E : CD FC 01            		call	.cmnd_rdslot
(1)  390/     111 : C3 23 01            		jp	.wrtto_slot
(1)  391/     114 :                     ; -1
(1)  392/     114 :                     .srch_mode:
(1)  393/     114 : CD 0E 02            		call	.srch_slot
(1)  394/     117 : FE FF               		cp	-1
(1)  395/     119 : CA 86 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  396/     11C : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  397/     11E : CA 23 01            		jp	z,.wrtto_slot
(1)  398/     121 : 18 F1               		jr	.srch_mode
(1)  399/     123 :                     .wrtto_slot:
(1)  400/     123 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  401/     125 : 23                  		inc	hl
(1)  402/     126 : CF                  		rst	8
(1)  403/     127 : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  404/     128 : 23                  		inc	hl
(1)  405/     129 : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  406/     12A : 79                  		ld	a,c
(1)  407/     12B : C3 86 00            		jp	.next_cmd
(1)  408/     12E :                     
(1)  409/     12E :                     ; --------------------------------------------------------
(1)  410/     12E :                     ; Command 03h:
(1)  411/     12E :                     ;
(1)  412/     12E :                     ; Stop track with the same sequence number
(1)  413/     12E :                     ;
(1)  414/     12E :                     ; SeqID,SlotIndex(-1 allslots)
(1)  415/     12E :                     ; --------------------------------------------------------
(1)  416/     12E :                     
(1)  417/     12E :                     .cmnd_3:
(1)  418/     12E : CD A9 00            		call	.grab_arg			; d1: Sequence ID
(1)  419/     131 : 4F                  		ld	c,a				; copy to c
(1)  420/     132 : CD A9 00            		call	.grab_arg			; d0: Slot index
(1)  421/     135 : FD 21 BA 17         		ld	iy,nikona_BuffList		; iy - Slot buffer list
(1)  422/     139 : B7                  		or	a
(1)  423/     13A : FA 4C 01            		jp	m,.srch_del			; if -1, search for all with same ID
(1)  424/     13D : FE 03               		cp	MAX_SLOTS			; If maxed out slots
(1)  425/     13F : D2 86 00            		jp	nc,.next_cmd
(1)  426/     142 : CF                  		rst	8
(1)  427/     143 : CD FC 01            		call	.cmnd_rdslot
(1)  428/     146 : CD 59 01            		call	.wrtto_del
(1)  429/     149 : C3 86 00            		jp	.next_cmd
(1)  430/     14C :                     ; -1
(1)  431/     14C :                     .srch_del:
(1)  432/     14C : CD 0E 02            		call	.srch_slot
(1)  433/     14F : FE FF               		cp	-1
(1)  434/     151 : CA 86 00            		jp	z,.next_cmd
(1)  435/     154 : CD 59 01            		call	.wrtto_del
(1)  436/     157 : 18 F3               		jr	.srch_del
(1)  437/     159 :                     .wrtto_del:
(1)  438/     159 : CB 7E               		bit	7,(hl)
(1)  439/     15B : C8                  		ret	z
(1)  440/     15C : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  441/     15E : 20 05               		jr	nz,.del_all
(1)  442/     160 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  443/     163 : B9                  		cp	c
(1)  444/     164 : C0                  		ret	nz
(1)  445/     165 :                     .del_all:
(1)  446/     165 : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  447/     167 : 23                  		inc	hl
(1)  448/     168 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  449/     16A : CF                  		rst	8
(1)  450/     16B : C9                  		ret
(1)  451/     16C :                     
(1)  452/     16C :                     ; --------------------------------------------------------
(1)  453/     16C :                     ; Command 05h:
(1)  454/     16C :                     ;
(1)  455/     16C :                     ; Fade volume (FadeIn/FadeOut)
(1)  456/     16C :                     ;
(1)  457/     16C :                     ; Arguments:
(1)  458/     16C :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  459/     16C :                     ; --------------------------------------------------------
(1)  460/     16C :                     
(1)  461/     16C :                     .cmnd_5:
(1)  462/     16C : CD A9 00            		call	.grab_arg		; d1: Master volume
(1)  463/     16F : 4F                  		ld	c,a			; copy to c
(1)  464/     170 : CD A9 00            		call	.grab_arg		; d0: Slot index
(1)  465/     173 : FD 21 BA 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  466/     177 : B7                  		or	a
(1)  467/     178 : FA 8A 01            		jp	m,.srch_fvol		; if -1, search for all with same ID
(1)  468/     17B : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  469/     17D : D2 86 00            		jp	nc,.next_cmd
(1)  470/     180 : CF                  		rst	8
(1)  471/     181 : CD FC 01            		call	.cmnd_rdslot
(1)  472/     184 : CD 97 01            		call	.wrtto_fvol
(1)  473/     187 : C3 86 00            		jp	.next_cmd
(1)  474/     18A :                     ; -1
(1)  475/     18A :                     .srch_fvol:
(1)  476/     18A : CD 0E 02            		call	.srch_slot
(1)  477/     18D : FE FF               		cp	-1
(1)  478/     18F : CA 86 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  479/     192 : CD 97 01            		call	.wrtto_fvol
(1)  480/     195 : 18 F3               		jr	.srch_fvol
(1)  481/     197 :                     .wrtto_fvol:
(1)  482/     197 : CB 7E               		bit	7,(hl)			; Active?
(1)  483/     199 : C8                  		ret	z
(1)  484/     19A : CB DE               		set	3,(hl)			; Volume update flag
(1)  485/     19C : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  486/     19F : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  487/     1A3 : CF                  		rst	8
(1)  488/     1A4 : C9                  		ret
(1)  489/     1A5 :                     
(1)  490/     1A5 :                     ; --------------------------------------------------------
(1)  491/     1A5 :                     ; Command 06h:
(1)  492/     1A5 :                     ;
(1)  493/     1A5 :                     ; Set track's master volume
(1)  494/     1A5 :                     ;
(1)  495/     1A5 :                     ; Arguments:
(1)  496/     1A5 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  497/     1A5 :                     ; --------------------------------------------------------
(1)  498/     1A5 :                     
(1)  499/     1A5 :                     .cmnd_6:
(1)  500/     1A5 : CD A9 00            		call	.grab_arg		; d1: Master volume
(1)  501/     1A8 : 4F                  		ld	c,a			; copy to c
(1)  502/     1A9 : CD A9 00            		call	.grab_arg		; d0: Slot index
(1)  503/     1AC : FD 21 BA 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  504/     1B0 : B7                  		or	a
(1)  505/     1B1 : FA C3 01            		jp	m,.srch_vol		; if -1, search for all with same ID
(1)  506/     1B4 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  507/     1B6 : D2 86 00            		jp	nc,.next_cmd
(1)  508/     1B9 : CF                  		rst	8
(1)  509/     1BA : CD FC 01            		call	.cmnd_rdslot
(1)  510/     1BD : CD D0 01            		call	.wrtto_vol
(1)  511/     1C0 : C3 86 00            		jp	.next_cmd
(1)  512/     1C3 :                     ; -1
(1)  513/     1C3 :                     .srch_vol:
(1)  514/     1C3 : CD 0E 02            		call	.srch_slot
(1)  515/     1C6 : FE FF               		cp	-1
(1)  516/     1C8 : CA 86 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  517/     1CB : CD D0 01            		call	.wrtto_vol
(1)  518/     1CE : 18 F3               		jr	.srch_vol
(1)  519/     1D0 :                     .wrtto_vol:
(1)  520/     1D0 : CB DE               		set	3,(hl)			; Volume update flag
(1)  521/     1D2 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  522/     1D5 : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  523/     1D8 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  524/     1DC : CF                  		rst	8
(1)  525/     1DD : C9                  		ret
(1)  526/     1DE :                     
(1)  527/     1DE :                     ; --------------------------------------------------------
(1)  528/     1DE :                     ; Command 07h:
(1)  529/     1DE :                     ;
(1)  530/     1DE :                     ; Set global sub-beats
(1)  531/     1DE :                     ; --------------------------------------------------------
(1)  532/     1DE :                     
(1)  533/     1DE :                     .cmnd_7:
(1)  534/     1DE : CD A9 00            		call	.grab_arg	; d0.w: $00xx
(1)  535/     1E1 : 4F                  		ld	c,a
(1)  536/     1E2 : CD A9 00            		call	.grab_arg	; d0.w: $xx00
(1)  537/     1E5 : 67                  		ld	h,a
(1)  538/     1E6 : 69                  		ld	l,c
(1)  539/     1E7 : 3A 88 1F            		ld	a,(palMode)
(1)  540/     1EA : B7                  		or	a
(1)  541/     1EB : 28 04               		jr	z,.not_pal
(1)  542/     1ED : 11 28 00            		ld	de,40
(1)  543/     1F0 : 19                  		add	hl,de
(1)  544/     1F1 :                     .not_pal:
(1)  545/     1F1 : 7C                  		ld	a,h
(1)  546/     1F2 : 32 34 00            		ld	(sbeatPtck+1),a
(1)  547/     1F5 : 7D                  		ld	a,l
(1)  548/     1F6 : 32 33 00            		ld	(sbeatPtck),a
(1)  549/     1F9 : C3 86 00            		jp	.next_cmd
(1)  550/     1FC :                     
(1)  551/     1FC :                     ; --------------------------------------------------------
(1)  552/     1FC :                     ; Shared subs
(1)  553/     1FC :                     ; --------------------------------------------------------
(1)  554/     1FC :                     
(1)  555/     1FC :                     .cmnd_rdslot:
(1)  556/     1FC : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  557/     1FD : 87                  		add	a,a			; id*8
(1)  558/     1FE : 87                  		add	a,a
(1)  559/     1FF : 16 00               		ld	d,0
(1)  560/     201 : 5F                  		ld	e,a
(1)  561/     202 : FD 19               		add	iy,de
(1)  562/     204 : FD 6E 00            		ld	l,(iy)
(1)  563/     207 : FD 66 01            		ld	h,(iy+1)
(1)  564/     20A : E5                  		push	hl
(1)  565/     20B : DD E1               		pop	ix
(1)  566/     20D : C9                  		ret
(1)  567/     20E :                     
(1)  568/     20E :                     ; ------------------------------------------------
(1)  569/     20E :                     ; iy - nikona_BuffList
(1)  570/     20E :                     
(1)  571/     20E :                     .srch_slot:
(1)  572/     20E : FD 7E 00            		ld	a,(iy)
(1)  573/     211 : FE FF               		cp	-1			; End of list?
(1)  574/     213 : C8                  		ret	z
(1)  575/     214 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  576/     217 : 6F                  		ld	l,a
(1)  577/     218 : E5                  		push	hl
(1)  578/     219 : DD E1               		pop	ix
(1)  579/     21B : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  580/     21E : FD 19               		add	iy,de			; Next entry for later
(1)  581/     220 : C9                  		ret
(1)  582/     221 :                     
(1)  583/     221 :                     ; ====================================================================
(1)  584/     221 :                     ; ----------------------------------------------------------------
(1)  585/     221 :                     ; MAIN Playback section
(1)  586/     221 :                     ; ----------------------------------------------------------------
(1)  587/     221 :                     
(1)  588/     221 :                     ; --------------------------------------------------------
(1)  589/     221 :                     ; Read mini-impulse-tracker data
(1)  590/     221 :                     ; --------------------------------------------------------
(1)  591/     221 :                     
(1)  592/     221 :                     upd_track:
(1)  593/     221 : E7                  		rst	20h
(1)  594/     222 : CD 74 0F            		call	get_tick		; Check for tick flag
(1)  595/     225 :                     	; ** MANUAL BUFF READ **
(1)  596/     225 : FD 21 CB 16         		ld	iy,trkBuff_0
(1)  597/     229 : CD 38 02            		call	.read_track
(1)  598/     22C : FD 21 0A 17         		ld	iy,trkBuff_1
(1)  599/     230 : CD 38 02            		call	.read_track
(1)  600/     233 : CF                  		rst	8
(1)  601/     234 : FD 21 49 17         		ld	iy,trkBuff_2
(1)  602/     238 :                     
(1)  603/     238 :                     ; ----------------------------------------
(1)  604/     238 :                     ; Read track
(1)  605/     238 :                     ;
(1)  606/     238 :                     ; iy - Track buffer
(1)  607/     238 :                     ; ----------------------------------------
(1)  608/     238 :                     
(1)  609/     238 :                     .read_track:
(1)  610/     238 : CF                  		rst	8
(1)  611/     239 : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  612/     23C : CB 78               		bit	7,b			; bit7: Track active?
(1)  613/     23E : C8                  		ret	z			; Return if not.
(1)  614/     23F : 78                  		ld	a,b
(1)  615/     240 : FE FF               		cp	-1			; Flag is -1?
(1)  616/     242 : C8                  		ret	z			; Return if mid-flag
(1)  617/     243 : CF                  		rst	8
(1)  618/     244 :                     	; ----------------------------------------
(1)  619/     244 :                     	; Track volume changes
(1)  620/     244 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  621/     247 : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  622/     24A : FD 4E 18            		ld	c,(iy+trk_VolFdTarget)
(1)  623/     24D : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  624/     250 : 79                  		ld	a,c
(1)  625/     251 : BC                  		cp	h
(1)  626/     252 : 28 1E               		jr	z,.keep_vol
(1)  627/     254 : 30 06               		jr	nc,.fade_out
(1)  628/     256 : 11 80 FF            		ld	de,-80h
(1)  629/     259 : 19                  		add	hl,de
(1)  630/     25A : 18 0C               		jr	.too_much
(1)  631/     25C :                     .fade_out:
(1)  632/     25C : 19                  		add	hl,de
(1)  633/     25D : CF                  		rst	8
(1)  634/     25E : 7C                  		ld	a,h
(1)  635/     25F : B9                  		cp	c
(1)  636/     260 : 38 06               		jr	c,.too_much
(1)  637/     262 : 61                  		ld	h,c
(1)  638/     263 : 2E 00               		ld	l,0
(1)  639/     265 : FD 71 18            		ld	(iy+trk_VolFdTarget),c
(1)  640/     268 :                     .too_much:
(1)  641/     268 : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  642/     26C : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  643/     26F : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  644/     272 :                     .keep_vol:
(1)  645/     272 :                     	; ----------------------------------------
(1)  646/     272 : 3A F9 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  647/     275 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  648/     277 : 28 03               		jr	z,.sfxmd
(1)  649/     279 : CB 4F               		bit	1,a			; BEAT passed?
(1)  650/     27B : C8                  		ret	z			; No BEAT.
(1)  651/     27C :                     .sfxmd:
(1)  652/     27C : CB 47               		bit	0,a			; TICK passed?
(1)  653/     27E : C8                  		ret	z			; No TICK.
(1)  654/     27F : CF                  		rst	8
(1)  655/     280 :                     	; ----------------------------------------
(1)  656/     280 :                     	; Start reading notes
(1)  657/     280 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  658/     282 : C4 0A 05            		call	nz,.first_fill
(1)  659/     285 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  660/     287 : C4 03 05            		call	nz,.effect_fill
(1)  661/     28A : FD 7E 12            		ld	a,(iy+trk_TickTmr)	; TICK ex-timer for this track
(1)  662/     28D : 3D                  		dec	a
(1)  663/     28E : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  664/     291 : B7                  		or	a			; Check a
(1)  665/     292 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  666/     293 : CF                  		rst	8
(1)  667/     294 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  668/     297 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  669/     29A :                     	; ----------------------------------------
(1)  670/     29A : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  671/     29D : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  672/     2A0 : 79                  		ld	a,c			; Check rowcount
(1)  673/     2A1 : B0                  		or	b
(1)  674/     2A2 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  675/     2A4 :                     	; ----------------------------------------
(1)  676/     2A4 :                     	; Read next block
(1)  677/     2A4 : CF                  		rst	8
(1)  678/     2A5 : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  679/     2A8 : 3C                  		inc	a
(1)  680/     2A9 : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  681/     2AC : CD 1B 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  682/     2AF : FE FF               		cp	-1			; Track finished?
(1)  683/     2B1 : C8                  		ret	z
(1)  684/     2B2 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  685/     2B5 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  686/     2B8 :                     	; ----------------------------------------
(1)  687/     2B8 :                     	; bc - Row count
(1)  688/     2B8 :                     .row_active:
(1)  689/     2B8 : CF                  		rst	8
(1)  690/     2B9 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  691/     2BC : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  692/     2BF :                     
(1)  693/     2BF :                     ; --------------------------------
(1)  694/     2BF :                     ; Main read-loop
(1)  695/     2BF :                     ; --------------------------------
(1)  696/     2BF :                     
(1)  697/     2BF :                     .next_note:
(1)  698/     2BF : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check row timer
(1)  699/     2C2 : B7                  		or	a
(1)  700/     2C3 : 20 16               		jr	nz,.decrow
(1)  701/     2C5 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  702/     2C6 : B7                  		or	a
(1)  703/     2C7 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  704/     2C9 : FA E6 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  705/     2CC : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  706/     2CF :                     
(1)  707/     2CF :                     ; --------------------------------
(1)  708/     2CF :                     ; Exit
(1)  709/     2CF :                     ; --------------------------------
(1)  710/     2CF :                     
(1)  711/     2CF :                     .exit:
(1)  712/     2CF : CF                  		rst	8
(1)  713/     2D0 : CD E3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  714/     2D3 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  715/     2D6 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  716/     2D9 : 18 03               		jr	.decrow_e
(1)  717/     2DB :                     .decrow:
(1)  718/     2DB : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  719/     2DE :                     .decrow_e:
(1)  720/     2DE : 0B                  		dec	bc			; Decrement rowcount
(1)  721/     2DF : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  722/     2E2 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  723/     2E5 : C9                  		ret	; Exit.
(1)  724/     2E6 :                     
(1)  725/     2E6 :                     ; --------------------------------
(1)  726/     2E6 :                     ; New note request
(1)  727/     2E6 :                     ;
(1)  728/     2E6 :                     ; a - %1tcccccc
(1)  729/     2E6 :                     ;   | t - next byte has new type
(1)  730/     2E6 :                     ;   | c - channel
(1)  731/     2E6 :                     ; --------------------------------
(1)  732/     2E6 :                     
(1)  733/     2E6 :                     .has_note:
(1)  734/     2E6 : CF                  		rst	8
(1)  735/     2E7 : C5                  		push	bc			; Save rowcount
(1)  736/     2E8 : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  737/     2E9 : CD E3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  738/     2EC : E5                  		push	hl			; Save hl patt pos
(1)  739/     2ED : FD E5               		push	iy
(1)  740/     2EF : E1                  		pop	hl
(1)  741/     2F0 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  742/     2F4 : 11 25 00            		ld	de,trk_ChnIndx		; <-- this clears d
(1)  743/     2F7 : CF                  		rst	8
(1)  744/     2F8 : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  745/     2F9 : 79                  		ld	a,c			; Get patt note position
(1)  746/     2FA : E6 1F               		and	00011111b		; Filter index bits
(1)  747/     2FC : 5F                  		ld	e,a			; Save as e
(1)  748/     2FD : 19                  		add	hl,de			; Increment more by this pos
(1)  749/     2FE : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  750/     2FF : B7                  		or	a
(1)  751/     300 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  752/     302 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  753/     304 : 87                  		add	a,a
(1)  754/     305 : 87                  		add	a,a
(1)  755/     306 : 87                  		add	a,a
(1)  756/     307 : 5F                  		ld	e,a
(1)  757/     308 : DD 19               		add	ix,de
(1)  758/     30A : 18 2B               		jr	.cont_chnl
(1)  759/     30C :                     
(1)  760/     30C :                     ; Make NEW channel
(1)  761/     30C :                     ; ix - channel list start
(1)  762/     30C :                     .srch_new:
(1)  763/     30C : CF                  		rst	8
(1)  764/     30D : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  765/     30F : 16 00               		ld	d,0		; Reset out index
(1)  766/     311 :                     .next_chnl:
(1)  767/     311 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  768/     314 : B7                  		or	a		; If plus, track channel is free
(1)  769/     315 : F2 2C 03            		jp	p,.chnl_free
(1)  770/     318 : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  771/     31A : DD 23               		inc	ix
(1)  772/     31C : DD 23               		inc	ix
(1)  773/     31E : DD 23               		inc	ix
(1)  774/     320 : CF                  		rst	8
(1)  775/     321 : DD 23               		inc	ix
(1)  776/     323 : DD 23               		inc	ix
(1)  777/     325 : DD 23               		inc	ix
(1)  778/     327 : DD 23               		inc	ix
(1)  779/     329 : 14                  		inc	d		; Increment out index
(1)  780/     32A : 10 E5               		djnz	.next_chnl
(1)  781/     32C :                     .chnl_free:
(1)  782/     32C : CF                  		rst	8
(1)  783/     32D : 7A                  		ld	a,d			; Read index we got
(1)  784/     32E : E6 1F               		and	00011111b		; Filter bits
(1)  785/     330 : F6 80               		or	10000000b		; + set as used
(1)  786/     332 : 77                  		ld	(hl),a			; Write index slot
(1)  787/     333 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  788/     337 :                     .cont_chnl:
(1)  789/     337 :                     
(1)  790/     337 : E1                  		pop	hl			; Recover patt pos
(1)  791/     338 :                     	; ix - current channel
(1)  792/     338 : CF                  		rst	8
(1)  793/     339 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  794/     33C : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  795/     33E : 28 08               		jr	z,.old_type
(1)  796/     340 : 7E                  		ld	a,(hl)
(1)  797/     341 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  798/     344 : 47                  		ld	b,a			; Set to b
(1)  799/     345 : CD E3 03            		call	.inc_cpatt		; Next patt pos
(1)  800/     348 :                     .old_type:
(1)  801/     348 :                     	; b - evinEVIN
(1)  802/     348 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  803/     348 :                     	;     evin: byte is already stored on track-channel buffer
(1)  804/     348 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  805/     348 :                     
(1)  806/     348 : CF                  		rst	8
(1)  807/     349 : CB 40               		bit	0,b			; New NOTE?
(1)  808/     34B : 28 07               		jr	z,.no_note
(1)  809/     34D : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  810/     34E : DD 77 02            		ld	(ix+chnl_Note),a
(1)  811/     351 : CD E3 03            		call	.inc_cpatt
(1)  812/     354 :                     .no_note:
(1)  813/     354 : CB 48               		bit	1,b			; New INS?
(1)  814/     356 : 28 07               		jr	z,.no_ins
(1)  815/     358 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  816/     359 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  817/     35C : CD E3 03            		call	.inc_cpatt
(1)  818/     35F :                     .no_ins:
(1)  819/     35F : CB 50               		bit	2,b			; New VOL?
(1)  820/     361 : 28 07               		jr	z,.no_vol
(1)  821/     363 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  822/     364 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  823/     367 : CD E3 03            		call	.inc_cpatt
(1)  824/     36A :                     .no_vol:
(1)  825/     36A : CB 58               		bit	3,b			; New EFFECT?
(1)  826/     36C : 28 0F               		jr	z,.no_eff
(1)  827/     36E : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  828/     36F : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  829/     372 : CD E3 03            		call	.inc_cpatt
(1)  830/     375 : CF                  		rst	8
(1)  831/     376 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  832/     377 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  833/     37A : CD E3 03            		call	.inc_cpatt
(1)  834/     37D :                     .no_eff:
(1)  835/     37D : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  836/     37E : 0F                  		rrca
(1)  837/     37F : 0F                  		rrca
(1)  838/     380 : 0F                  		rrca
(1)  839/     381 : 0F                  		rrca
(1)  840/     382 : E6 0F               		and	00001111b		; Filter bits
(1)  841/     384 : 4F                  		ld	c,a			; Save as c
(1)  842/     385 : 78                  		ld	a,b
(1)  843/     386 : E6 0F               		and	00001111b		; Filter again
(1)  844/     388 : B1                  		or	c			; Merge c with a
(1)  845/     389 : CF                  		rst	8
(1)  846/     38A : 4F                  		ld	c,a			; Save bit flags
(1)  847/     38B : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  848/     38E : B1                  		or	c
(1)  849/     38F : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  850/     392 : C1                  		pop	bc			; Restore rowcount
(1)  851/     393 :                     	; ----------------------------------------
(1)  852/     393 :                     	; Effects that affect internal playback
(1)  853/     393 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  854/     396 : E6 08               		and	1000b			; ONLY check for the EFFECT bit
(1)  855/     398 : CA BF 02            		jp	z,.next_note
(1)  856/     39B : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  857/     39E : B7                  		or	a			; 00h = invalid effect
(1)  858/     39F : CA BF 02            		jp	z,.next_note
(1)  859/     3A2 : FE 01               		cp	1			; Effect A: Tick set
(1)  860/     3A4 : 28 0B               		jr	z,.eff_A
(1)  861/     3A6 : FE 02               		cp	2			; Effect B: Position Jump
(1)  862/     3A8 : 28 18               		jr	z,.eff_B
(1)  863/     3AA : FE 03               		cp	3			; Effect C: Pattern break
(1)  864/     3AC : 28 32               		jr	z,.eff_C
(1)  865/     3AE : C3 BF 02            		jp	.next_note
(1)  866/     3B1 :                     
(1)  867/     3B1 :                     ; ----------------------------------------
(1)  868/     3B1 :                     ; Effect A: Set ticks
(1)  869/     3B1 :                     ; ----------------------------------------
(1)  870/     3B1 :                     
(1)  871/     3B1 :                     .eff_A:
(1)  872/     3B1 : CF                  		rst	8
(1)  873/     3B2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  874/     3B5 : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  875/     3B8 : FD 73 12            		ld	(iy+trk_TickTmr),e
(1)  876/     3BB : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  877/     3BF : C3 BF 02            		jp	.next_note
(1)  878/     3C2 :                     
(1)  879/     3C2 :                     ; ----------------------------------------
(1)  880/     3C2 :                     ; Effect B: jump to a new block
(1)  881/     3C2 :                     ; ----------------------------------------
(1)  882/     3C2 :                     
(1)  883/     3C2 :                     .eff_B:
(1)  884/     3C2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  885/     3C5 : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  886/     3C8 : CF                  		rst	8
(1)  887/     3C9 : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  888/     3CD : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  889/     3D1 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  890/     3D5 : 3E 80               		ld	a,80h
(1)  891/     3D7 : FD 77 15            		ld	(iy+trk_BankHeads),a
(1)  892/     3DA : FD 77 16            		ld	(iy+trk_BankBlk),a
(1)  893/     3DD : C3 BF 02            		jp	.next_note
(1)  894/     3E0 :                     
(1)  895/     3E0 :                     ; ----------------------------------------
(1)  896/     3E0 :                     ; Effect C: Pattern break/exit
(1)  897/     3E0 :                     ;
(1)  898/     3E0 :                     ; Only used on SFX, arguments ignored.
(1)  899/     3E0 :                     ; ----------------------------------------
(1)  900/     3E0 :                     
(1)  901/     3E0 :                     .eff_C:
(1)  902/     3E0 : C3 F3 04            		jp	.track_end
(1)  903/     3E3 :                     
(1)  904/     3E3 :                     ; ----------------------------------------
(1)  905/     3E3 :                     ; Increment the current patt position
(1)  906/     3E3 :                     ; and recieve more data
(1)  907/     3E3 :                     ;
(1)  908/     3E3 :                     ; Breaks:
(1)  909/     3E3 :                     ; a,e
(1)  910/     3E3 :                     ; ----------------------------------------
(1)  911/     3E3 :                     
(1)  912/     3E3 :                     .inc_cpatt:
(1)  913/     3E3 : FD 5E 08            		ld	e,(iy+trk_Cach)		; Read curret cache LSB
(1)  914/     3E6 : 7D                  		ld	a,l
(1)  915/     3E7 : 3C                  		inc	a
(1)  916/     3E8 : E6 1F               		and	MAX_RCACH-1
(1)  917/     3EA : FE 1E               		cp	MAX_RCACH-2		; ALMOST RAN OUT of bytes?
(1)  918/     3EC : 30 03               		jr	nc,.ran_out
(1)  919/     3EE : B3                  		or	e
(1)  920/     3EF : 6F                  		ld	l,a
(1)  921/     3F0 : C9                  		ret
(1)  922/     3F1 :                     .ran_out:
(1)  923/     3F1 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  924/     3F4 : E5                  		push	hl
(1)  925/     3F5 : C5                  		push	bc
(1)  926/     3F6 : 06 00               		ld	b,0
(1)  927/     3F8 : 4F                  		ld	c,a
(1)  928/     3F9 : CF                  		rst	8
(1)  929/     3FA : 5D                  		ld	e,l
(1)  930/     3FB : 54                  		ld	d,h
(1)  931/     3FC : FD 6E 19            		ld	l,(iy+trk_RomPattRead)
(1)  932/     3FF : FD 66 1A            		ld	h,(iy+(trk_RomPattRead+1))
(1)  933/     402 : FD 7E 1B            		ld	a,(iy+(trk_RomPattRead+2))
(1)  934/     405 : 09                  		add	hl,bc
(1)  935/     406 : CE 00               		adc	a,0
(1)  936/     408 : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1)  937/     40B : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1)  938/     40E : CF                  		rst	8
(1)  939/     40F : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1)  940/     412 : 01 20 00            		ld	bc,MAX_RCACH
(1)  941/     415 : CD 95 0F            		call	readRom		; *** ROM ACCESS ***
(1)  942/     418 : C1                  		pop	bc
(1)  943/     419 : E1                  		pop	hl
(1)  944/     41A : C9                  		ret
(1)  945/     41B :                     
(1)  946/     41B :                     ; ----------------------------------------
(1)  947/     41B :                     ; Set track pattern by trk_currBlk
(1)  948/     41B :                     ; ----------------------------------------
(1)  949/     41B :                     
(1)  950/     41B :                     .set_track:
(1)  951/     41B :                     	; ----------------------------------------
(1)  952/     41B :                     	; Make block id list
(1)  953/     41B : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  954/     41E : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  955/     421 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  956/     424 : 4F                  		ld	c,a
(1)  957/     425 : C5                  		push	bc
(1)  958/     426 : D5                  		push	de
(1)  959/     427 : CF                  		rst	8
(1)  960/     428 : 0F                  		rrca
(1)  961/     429 : 0F                  		rrca
(1)  962/     42A : 0F                  		rrca
(1)  963/     42B : E6 1F               		and	00011111b
(1)  964/     42D : FD 4E 16            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  965/     430 : CB 79               		bit	7,c			; First time?
(1)  966/     432 : 20 03               		jr	nz,.first_blk
(1)  967/     434 : B9                  		cp	c			; SAME instrument data?
(1)  968/     435 : 28 1D               		jr	z,.keep_blk
(1)  969/     437 :                     .first_blk:
(1)  970/     437 : CF                  		rst	8
(1)  971/     438 : FD 77 16            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  972/     43B : 07                  		rlca
(1)  973/     43C : 07                  		rlca
(1)  974/     43D : 07                  		rlca
(1)  975/     43E : 06 00               		ld	b,0
(1)  976/     440 : 4F                  		ld	c,a
(1)  977/     441 : FD 6E 22            		ld	l,(iy+trk_RomBlks)
(1)  978/     444 : FD 66 23            		ld	h,(iy+(trk_RomBlks+1))
(1)  979/     447 : FD 7E 24            		ld	a,(iy+(trk_RomBlks+2))
(1)  980/     44A : E7                  		rst	20h
(1)  981/     44B : 09                  		add	hl,bc
(1)  982/     44C : CE 00               		adc	a,0
(1)  983/     44E : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  984/     451 : CD 95 0F            		call	readRom			; ** ROM ACCESS **
(1)  985/     454 :                     .keep_blk:
(1)  986/     454 : E1                  		pop	hl
(1)  987/     455 : C1                  		pop	bc
(1)  988/     456 : 79                  		ld	a,c
(1)  989/     457 : E6 07               		and	00000111b
(1)  990/     459 : CF                  		rst	8
(1)  991/     45A : 16 00               		ld	d,0
(1)  992/     45C : 5F                  		ld	e,a
(1)  993/     45D : 19                  		add	hl,de
(1)  994/     45E :                     	; ----------------------------------------
(1)  995/     45E : 7E                  		ld	a,(hl)			; Read block byte
(1)  996/     45F : FE FF               		cp	-1			; If block == -1, end track
(1)  997/     461 : CA F3 04            		jp	z,.track_end
(1)  998/     464 : CF                  		rst	8
(1)  999/     465 :                     	; ----------------------------------------
(1) 1000/     465 : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1001/     468 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1002/     46B : 4F                  		ld	c,a
(1) 1003/     46C : D5                  		push	de
(1) 1004/     46D : C5                  		push	bc
(1) 1005/     46E : CF                  		rst	8
(1) 1006/     46F : 0F                  		rrca
(1) 1007/     470 : 0F                  		rrca
(1) 1008/     471 : 0F                  		rrca
(1) 1009/     472 : E6 1F               		and	00011111b
(1) 1010/     474 : FD 4E 15            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1011/     477 : CB 79               		bit	7,c			; First time?
(1) 1012/     479 : 20 03               		jr	nz,.first_head
(1) 1013/     47B : B9                  		cp	c			; SAME instrument data?
(1) 1014/     47C : 28 26               		jr	z,.keep_it
(1) 1015/     47E :                     .first_head:
(1) 1016/     47E : CF                  		rst	8
(1) 1017/     47F : FD 77 15            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1018/     482 : 47                  		ld	b,a
(1) 1019/     483 : 0F                  		rrca
(1) 1020/     484 : 0F                  		rrca
(1) 1021/     485 : 0F                  		rrca
(1) 1022/     486 : E6 E0               		and	11100000b
(1) 1023/     488 : 4F                  		ld	c,a
(1) 1024/     489 : 78                  		ld	a,b
(1) 1025/     48A : 0F                  		rrca
(1) 1026/     48B : 0F                  		rrca
(1) 1027/     48C : 0F                  		rrca
(1) 1028/     48D : E6 03               		and	00000011b
(1) 1029/     48F : 47                  		ld	b,a
(1) 1030/     490 :                     	; ----------------------------------------
(1) 1031/     490 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1032/     493 : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1033/     496 : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1034/     499 : E7                  		rst	20h
(1) 1035/     49A : CF                  		rst	8
(1) 1036/     49B : 09                  		add	hl,bc
(1) 1037/     49C : CE 00               		adc	a,0
(1) 1038/     49E : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1039/     4A1 : CD 95 0F            		call	readRom			; ** ROM ACCESS **
(1) 1040/     4A4 :                     .keep_it:
(1) 1041/     4A4 : C1                  		pop	bc
(1) 1042/     4A5 : 79                  		ld	a,c
(1) 1043/     4A6 : E6 07               		and	00000111b
(1) 1044/     4A8 : 87                  		add	a,a
(1) 1045/     4A9 : 87                  		add	a,a
(1) 1046/     4AA : 57                  		ld	d,a
(1) 1047/     4AB : CF                  		rst	8
(1) 1048/     4AC : E6 FC               		and	11111100b
(1) 1049/     4AE : 5F                  		ld	e,a
(1) 1050/     4AF : 7A                  		ld	a,d
(1) 1051/     4B0 : E6 03               		and	00000011b
(1) 1052/     4B2 : 57                  		ld	d,a
(1) 1053/     4B3 : E1                  		pop	hl
(1) 1054/     4B4 : 19                  		add	hl,de
(1) 1055/     4B5 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1056/     4B6 : 23                  		inc	hl
(1) 1057/     4B7 : CF                  		rst	8
(1) 1058/     4B8 : 56                  		ld	d,(hl)
(1) 1059/     4B9 : 23                  		inc	hl
(1) 1060/     4BA : 7E                  		ld	a,(hl)
(1) 1061/     4BB : 23                  		inc	hl
(1) 1062/     4BC : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1063/     4BF : 7E                  		ld	a,(hl)
(1) 1064/     4C0 : 23                  		inc	hl
(1) 1065/     4C1 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1066/     4C4 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1067/     4C7 : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1068/     4CA : CF                  		rst	8
(1) 1069/     4CB : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1070/     4CE : 19                  		add	hl,de
(1) 1071/     4CF : CE 00               		adc	a,0
(1) 1072/     4D1 : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1) 1073/     4D4 : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1074/     4D7 : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1075/     4DA : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1076/     4DD : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1077/     4E0 :                     
(1) 1078/     4E0 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1079/     4E3 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1080/     4E6 : 0E 20               		ld	c,MAX_RCACH
(1) 1081/     4E8 : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1082/     4EC : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1083/     4F0 : C3 95 0F            		jp	readRom		; ** ROM access **
(1) 1084/     4F3 :                     
(1) 1085/     4F3 :                     ; ----------------------------------------
(1) 1086/     4F3 :                     ; **JUMP ONLY**
(1) 1087/     4F3 :                     .track_end:
(1) 1088/     4F3 : CD AC 05            		call	track_out
(1) 1089/     4F6 : CF                  		rst	8
(1) 1090/     4F7 : AF                  		xor	a
(1) 1091/     4F8 : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1092/     4FB : FD 77 12            		ld	(iy+trk_TickTmr),a
(1) 1093/     4FE : FD 36 00 FF         		ld	(iy+trk_Status),-1	; Disable track slot
(1) 1094/     502 : C9                  		ret
(1) 1095/     503 :                     
(1) 1096/     503 :                     ; ----------------------------------------
(1) 1097/     503 :                     ; Track refill
(1) 1098/     503 :                     ; ----------------------------------------
(1) 1099/     503 :                     
(1) 1100/     503 :                     .effect_fill:
(1) 1101/     503 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1102/     507 : C3 1B 04            		jp	.set_track
(1) 1103/     50A :                     
(1) 1104/     50A :                     ; ----------------------------------------
(1) 1105/     50A :                     ; Track Start/Reset
(1) 1106/     50A :                     ;
(1) 1107/     50A :                     ; iy - Track buffer
(1) 1108/     50A :                     ; ----------------------------------------
(1) 1109/     50A :                     
(1) 1110/     50A :                     .first_fill:
(1) 1111/     50A : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1112/     50E : CD AC 05            		call	track_out
(1) 1113/     511 : FD 36 12 01         		ld	(iy+trk_TickTmr),1	; Reset tick timer
(1) 1114/     515 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1115/     518 : CF                  		rst	8
(1) 1116/     519 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1117/     51C : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1118/     51F : FE FF               		cp	-1			; Sequence -1?
(1) 1119/     521 : C8                  		ret	z
(1) 1120/     522 : 87                  		add	a,a
(1) 1121/     523 : 87                  		add	a,a
(1) 1122/     524 : 16 00               		ld	d,0
(1) 1123/     526 : 5F                  		ld	e,a
(1) 1124/     527 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1125/     52A : 23                  		inc	hl
(1) 1126/     52B : 7E                  		ld	a,(hl)			; $00xx0000
(1) 1127/     52C : 23                  		inc	hl
(1) 1128/     52D : 4E                  		ld	c,(hl)			; $0000xx00
(1) 1129/     52E : 23                  		inc	hl
(1) 1130/     52F : 6E                  		ld	l,(hl)			; $000000xx
(1) 1131/     530 : CF                  		rst	8
(1) 1132/     531 : 61                  		ld	h,c
(1) 1133/     532 : 19                  		add	hl,de
(1) 1134/     533 : CE 00               		adc	a,0
(1) 1135/     535 : 11 43 16            		ld	de,trkInfoCach
(1) 1136/     538 : D5                  		push	de
(1) 1137/     539 : 01 04 00            		ld	bc,4
(1) 1138/     53C : CD 95 0F            		call	readRom		; *** ROM ACCESS ***
(1) 1139/     53F : E1                  		pop	hl
(1) 1140/     540 : 7E                  		ld	a,(hl)
(1) 1141/     541 : 23                  		inc	hl
(1) 1142/     542 : CB 7F               		bit	7,a
(1) 1143/     544 : 28 04               		jr	z,.no_glbl
(1) 1144/     546 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1145/     54A :                     .no_glbl:
(1) 1146/     54A : CF                  		rst	8
(1) 1147/     54B : E6 7F               		and	01111111b
(1) 1148/     54D : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1149/     550 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1150/     551 : 23                  		inc	hl			; grab it's pointers
(1) 1151/     552 : 4E                  		ld	c,(hl)
(1) 1152/     553 : 23                  		inc	hl
(1) 1153/     554 : 6E                  		ld	l,(hl)
(1) 1154/     555 : 61                  		ld	h,c
(1) 1155/     556 : 11 9C 17            		ld	de,headerOut
(1) 1156/     559 : 0E 0E               		ld	c,0Eh
(1) 1157/     55B : CD 95 0F            		call	readRom		; ** ROM access **
(1) 1158/     55E :                     
(1) 1159/     55E :                     	; headerOut:
(1) 1160/     55E :                     	; dc.w numof_chnls
(1) 1161/     55E :                     	; dc.l .blk,.pat,.ins
(1) 1162/     55E :                     	; *** READING BACKWARDS
(1) 1163/     55E : DD 21 A9 17         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1164/     562 : E7                  		rst	20h
(1) 1165/     563 : CD 99 05            		call	.grab_rhead		; Instrument data
(1) 1166/     566 : FD 75 1F            		ld	(iy+trk_RomInst),l
(1) 1167/     569 : FD 74 20            		ld	(iy+(trk_RomInst+1)),h
(1) 1168/     56C : FD 70 21            		ld	(iy+(trk_RomInst+2)),b
(1) 1169/     56F : CD 99 05            		call	.grab_rhead		; Pattern heads
(1) 1170/     572 : FD 75 1C            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1171/     575 : FD 74 1D            		ld	(iy+(trk_RomPatt+1)),h
(1) 1172/     578 : FD 70 1E            		ld	(iy+(trk_RomPatt+2)),b
(1) 1173/     57B : FD 36 15 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1174/     57F : CD 99 05            		call	.grab_rhead		; Block data
(1) 1175/     582 : FD 75 22            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1176/     585 : FD 74 23            		ld	(iy+(trk_RomBlks+1)),h
(1) 1177/     588 : FD 70 24            		ld	(iy+(trk_RomBlks+2)),b
(1) 1178/     58B : FD 36 16 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1179/     58F : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1180/     592 : FD 77 17            		ld	(iy+trk_MaxChnl),a
(1) 1181/     595 : CF                  		rst	8
(1) 1182/     596 : C3 1B 04            		jp	.set_track
(1) 1183/     599 :                     
(1) 1184/     599 :                     ; Read 68K pointer:
(1) 1185/     599 :                     ; hl - 00xxxx
(1) 1186/     599 :                     ;  b - xx0000
(1) 1187/     599 :                     .grab_rhead:
(1) 1188/     599 : DD 6E 00            		ld	l,(ix)
(1) 1189/     59C : DD 2B               		dec	ix
(1) 1190/     59E : DD 66 00            		ld	h,(ix)
(1) 1191/     5A1 : CF                  		rst	8
(1) 1192/     5A2 : DD 2B               		dec	ix
(1) 1193/     5A4 : DD 46 00            		ld	b,(ix)
(1) 1194/     5A7 : DD 2B               		dec	ix
(1) 1195/     5A9 :                     ; 		ld	c,(ix)
(1) 1196/     5A9 : DD 2B               		dec	ix
(1) 1197/     5AB : C9                  		ret
(1) 1198/     5AC :                     
(1) 1199/     5AC :                     ; ----------------------------------------
(1) 1200/     5AC :                     ; Reset tracker channels
(1) 1201/     5AC :                     ;
(1) 1202/     5AC :                     ; iy - Track buffer
(1) 1203/     5AC :                     ;
(1) 1204/     5AC :                     ; Breaks:
(1) 1205/     5AC :                     ; b ,de,hl,ix
(1) 1206/     5AC :                     ; ----------------------------------------
(1) 1207/     5AC :                     
(1) 1208/     5AC :                     track_out:
(1) 1209/     5AC : FD E5               		push	iy
(1) 1210/     5AE : E1                  		pop	hl
(1) 1211/     5AF : DD 21 00 1E         		ld	ix,trkChnls
(1) 1212/     5B3 : CF                  		rst	8
(1) 1213/     5B4 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1214/     5B7 : 19                  		add	hl,de
(1) 1215/     5B8 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1216/     5BA :                     .indx_del:
(1) 1217/     5BA : 7E                  		ld	a,(hl)
(1) 1218/     5BB : B7                  		or	a
(1) 1219/     5BC : 28 2A               		jr	z,.nothin
(1) 1220/     5BE : CF                  		rst	8
(1) 1221/     5BF : DD E5               		push	ix
(1) 1222/     5C1 : E6 1F               		and	00011111b
(1) 1223/     5C3 : 87                  		add	a,a
(1) 1224/     5C4 : 87                  		add	a,a
(1) 1225/     5C5 : 87                  		add	a,a
(1) 1226/     5C6 : 5F                  		ld	e,a
(1) 1227/     5C7 : CF                  		rst	8
(1) 1228/     5C8 : DD 19               		add	ix,de
(1) 1229/     5CA : AF                  		xor	a
(1) 1230/     5CB : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1231/     5CF : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1232/     5D3 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1233/     5D7 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1234/     5DA : CF                  		rst	8
(1) 1235/     5DB : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1236/     5DE : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1237/     5E1 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1238/     5E4 : DD E1               		pop	ix
(1) 1239/     5E6 : 77                  		ld	(hl),a
(1) 1240/     5E7 : 00                  		nop
(1) 1241/     5E8 :                     .nothin:
(1) 1242/     5E8 : 23                  		inc	hl
(1) 1243/     5E9 : 10 CF               		djnz	.indx_del
(1) 1244/     5EB : 3E 01               		ld	a,1
(1) 1245/     5ED : 32 8E 17            		ld	(marsUpd),a
(1) 1246/     5F0 : C9                  		ret
(1) 1247/     5F1 :                     
(1) 1248/     5F1 :                     ; ============================================================
(1) 1249/     5F1 :                     ; --------------------------------------------------------
(1) 1250/     5F1 :                     ; Process track channels to the sound chips
(1) 1251/     5F1 :                     ; --------------------------------------------------------
(1) 1252/     5F1 :                     
(1) 1253/     5F1 :                     set_chips:
(1) 1254/     5F1 : CD 74 0F            		call	get_tick
(1) 1255/     5F4 :                     	; ** MANUAL BUFF READ **
(1) 1256/     5F4 : FD 21 CB 16         		ld	iy,trkBuff_0
(1) 1257/     5F8 : CD 38 06            		call	tblbuff_read
(1) 1258/     5FB : FD 21 0A 17         		ld	iy,trkBuff_1
(1) 1259/     5FF : CD 38 06            		call	tblbuff_read
(1) 1260/     602 : CF                  		rst	8
(1) 1261/     603 : FD 21 49 17         		ld	iy,trkBuff_2
(1) 1262/     607 : CD 38 06            		call	tblbuff_read
(1) 1263/     60A : CD 74 0F            		call	get_tick
(1) 1264/     60D :                     proc_chips:
(1) 1265/     60D : E7                  		rst	20h
(1) 1266/     60E : CF                  		rst	8
(1) 1267/     60F : FD 21 46 1C         		ld	iy,tblPSGN		; PSG Noise
(1) 1268/     613 : CD F9 07            		call	dtbl_singl
(1) 1269/     616 : CF                  		rst	8
(1) 1270/     617 : FD 21 0E 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1271/     61B : CD E7 07            		call	dtbl_multi
(1) 1272/     61E : CD 74 0F            		call	get_tick
(1) 1273/     621 : FD 21 A0 1B         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1274/     625 : CD E7 07            		call	dtbl_multi
(1) 1275/     628 : CF                  		rst	8
(1) 1276/     629 : FD 21 0E 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1277/     62D : CD E7 07            		call	dtbl_multi
(1) 1278/     630 : CF                  		rst	8
(1) 1279/     631 : FD 21 58 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1280/     635 : C3 E7 07            		jp	dtbl_multi
(1) 1281/     638 :                     
(1) 1282/     638 :                     ; ----------------------------------------
(1) 1283/     638 :                     ; Read current track
(1) 1284/     638 :                     ;
(1) 1285/     638 :                     ; iy - Buffer
(1) 1286/     638 :                     tblbuff_read:
(1) 1287/     638 : E7                  		rst	20h			; Refill wave here
(1) 1288/     639 : CD 74 0F            		call	get_tick
(1) 1289/     63C : CF                  		rst	8
(1) 1290/     63D : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1291/     640 : CB 78               		bit	7,b
(1) 1292/     642 : C8                  		ret	z
(1) 1293/     643 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1294/     644 : FE FF               		cp	-1
(1) 1295/     646 : C2 50 06            		jp	nz,.track_cont
(1) 1296/     649 : CD AC 05            		call	track_out
(1) 1297/     64C : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1298/     650 :                     ; 		rst	20h			; Refill wave
(1) 1299/     650 :                     .track_cont:
(1) 1300/     650 : FD E5               		push	iy
(1) 1301/     652 : E1                  		pop	hl
(1) 1302/     653 : CF                  		rst	8
(1) 1303/     654 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1304/     658 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1305/     65B : 19                  		add	hl,de
(1) 1306/     65C : FD 7E 17            		ld	a,(iy+trk_MaxChnl)
(1) 1307/     65F : B7                  		or	a
(1) 1308/     660 : 20 02               		jr	nz,.valid
(1) 1309/     662 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1310/     664 :                     .valid:
(1) 1311/     664 : CF                  		rst	8
(1) 1312/     665 : 47                  		ld	b,a
(1) 1313/     666 :                     .next_indx:
(1) 1314/     666 : 7E                  		ld	a,(hl)			; Read index
(1) 1315/     667 : B7                  		or	a
(1) 1316/     668 : 20 05               		jr	nz,.has_indx		; If non-zero: valid
(1) 1317/     66A : C5                  		push	bc			; ** wave sync
(1) 1318/     66B :                     ; 		ld	b,4
(1) 1319/     66B :                     ; 		djnz	$
(1) 1320/     66B : C1                  		pop	bc			; **
(1) 1321/     66C : CF                  		rst	8
(1) 1322/     66D : 18 1C               		jr	.no_indx
(1) 1323/     66F :                     .has_indx:
(1) 1324/     66F : E6 1F               		and	00011111b
(1) 1325/     671 : 87                  		add	a,a
(1) 1326/     672 : 87                  		add	a,a
(1) 1327/     673 : 87                  		add	a,a
(1) 1328/     674 : CF                  		rst	8
(1) 1329/     675 : 16 00               		ld	d,0
(1) 1330/     677 : 5F                  		ld	e,a
(1) 1331/     678 : C5                  		push	bc
(1) 1332/     679 : E5                  		push	hl
(1) 1333/     67A : DD E5               		push	ix
(1) 1334/     67C : DD 19               		add	ix,de
(1) 1335/     67E : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1336/     681 : E6 0F               		and	00001111b
(1) 1337/     683 : C4 93 06            		call	nz,.do_chip		; Call if non-zero
(1) 1338/     686 : CF                  		rst	8
(1) 1339/     687 : DD E1               		pop	ix
(1) 1340/     689 : E1                  		pop	hl
(1) 1341/     68A : C1                  		pop	bc
(1) 1342/     68B :                     .no_indx:
(1) 1343/     68B : 23                  		inc	hl
(1) 1344/     68C : 10 D8               		djnz	.next_indx
(1) 1345/     68E : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1346/     692 : C9                  		ret
(1) 1347/     693 :                     
(1) 1348/     693 :                     ; ----------------------------------------
(1) 1349/     693 :                     ; iy - Track buffer
(1) 1350/     693 :                     ; ix - Current channel
(1) 1351/     693 :                     
(1) 1352/     693 :                     .do_chip:
(1) 1353/     693 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1354/     696 : B7                  		or	a
(1) 1355/     697 : C8                  		ret	z			; If 0 == stop
(1) 1356/     698 : CF                  		rst	8
(1) 1357/     699 : 3D                  		dec	a			; inst-1
(1) 1358/     69A : E6 7F               		and	01111111b
(1) 1359/     69C : 21 B2 17            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1360/     69F : E5                  		push	hl
(1) 1361/     6A0 : 07                  		rlca
(1) 1362/     6A1 : 07                  		rlca
(1) 1363/     6A2 : 07                  		rlca
(1) 1364/     6A3 : 47                  		ld	b,a
(1) 1365/     6A4 : E6 F8               		and	11111000b
(1) 1366/     6A6 : 4F                  		ld	c,a
(1) 1367/     6A7 : 78                  		ld	a,b
(1) 1368/     6A8 : AF                  		xor	a
(1) 1369/     6A9 : E6 03               		and	00000011b
(1) 1370/     6AB : CF                  		rst	8
(1) 1371/     6AC : 47                  		ld	b,a
(1) 1372/     6AD : EB                  		ex	hl,de
(1) 1373/     6AE : FD 6E 1F            		ld	l,(iy+trk_RomInst)
(1) 1374/     6B1 : FD 66 20            		ld	h,(iy+(trk_RomInst+1))
(1) 1375/     6B4 : FD 7E 21            		ld	a,(iy+(trk_RomInst+2))
(1) 1376/     6B7 : 09                  		add	hl,bc
(1) 1377/     6B8 : CE 00               		adc	a,0
(1) 1378/     6BA : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1379/     6BD : CD 95 0F            		call	readRom		; ** ROM access **
(1) 1380/     6C0 : E1                  		pop	hl
(1) 1381/     6C1 : E5                  		push	hl			; <-- save hl
(1) 1382/     6C2 : CD DC 06            		call	.grab_link
(1) 1383/     6C5 : D1                  		pop	de			; --> recover as de
(1) 1384/     6C6 :                     	; hl - current table
(1) 1385/     6C6 :                     	; de - instrument data
(1) 1386/     6C6 : FE FF               		cp	-1			; Found any link?
(1) 1387/     6C8 : C8                  		ret	z
(1) 1388/     6C9 : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1389/     6CA : 23                  		inc	hl
(1) 1390/     6CB : 23                  		inc	hl
(1) 1391/     6CC : 23                  		inc	hl
(1) 1392/     6CD : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1393/     6D0 : 77                  		ld	(hl),a
(1) 1394/     6D1 : 01 06 00            		ld	bc,ztbl_InstCach-4	; Move to instr data
(1) 1395/     6D4 : 09                  		add	hl,bc
(1) 1396/     6D5 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1397/     6D6 : 01 08 00            		ld	bc,8
(1) 1398/     6D9 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1399/     6DB : C9                  		ret
(1) 1400/     6DC :                     
(1) 1401/     6DC :                     ; ----------------------------------------
(1) 1402/     6DC :                     ; Search for a linked channel on the
(1) 1403/     6DC :                     ; chip table
(1) 1404/     6DC :                     ;
(1) 1405/     6DC :                     ; Input:
(1) 1406/     6DC :                     ; iy - Track buffer
(1) 1407/     6DC :                     ; ix - Current channel
(1) 1408/     6DC :                     ; hl - Intrument data
(1) 1409/     6DC :                     ;
(1) 1410/     6DC :                     ; Returns:
(1) 1411/     6DC :                     ; hl | Channel table to use
(1) 1412/     6DC :                     ;  a | Return value:
(1) 1413/     6DC :                     ;       0 | Found
(1) 1414/     6DC :                     ;      -1 | Not found
(1) 1415/     6DC :                     ; ----------------------------------------
(1) 1416/     6DC :                     
(1) 1417/     6DC :                     .grab_link:
(1) 1418/     6DC : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1419/     6DD : E6 F0               		and	11110000b		; Filter bits
(1) 1420/     6DF : 5F                  		ld	e,a			; e - NEW chip
(1) 1421/     6E0 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1422/     6E3 : E6 F0               		and	11110000b
(1) 1423/     6E5 : 28 76               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1424/     6E7 : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1425/     6E8 : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1426/     6EA : CF                  		rst	8
(1) 1427/     6EB : 57                  		ld	d,a			; d - Chip to silence
(1) 1428/     6EC : D5                  		push	de
(1) 1429/     6ED : CD 07 07            		call	.srch_link		; Search OLD link
(1) 1430/     6F0 : D1                  		pop	de
(1) 1431/     6F1 : FE FF               		cp	-1
(1) 1432/     6F3 : 28 03               		jr	z,.dont_res
(1) 1433/     6F5 : CD F8 0E            		call	tblz_clear
(1) 1434/     6F8 :                     .dont_res:
(1) 1435/     6F8 : CF                  		rst	8
(1) 1436/     6F9 : 18 62               		jr	.new_chip
(1) 1437/     6FB :                     .same_link:
(1) 1438/     6FB : CD 07 07            		call	.srch_link		; Search link
(1) 1439/     6FE : FE FF               		cp	-1
(1) 1440/     700 : C0                  		ret	nz
(1) 1441/     701 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1442/     704 : CF                  		rst	8
(1) 1443/     705 : 18 56               		jr	.new_chip
(1) 1444/     707 :                     
(1) 1445/     707 :                     ; ----------------------------------------
(1) 1446/     707 :                     ; ** RELINK **
(1) 1447/     707 :                     ; a - Chip to search for
(1) 1448/     707 :                     
(1) 1449/     707 :                     .srch_link:
(1) 1450/     707 : CD CB 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1451/     70A : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1452/     70C : C1                  		pop	bc
(1) 1453/     70D : B7                  		or	a			; Single table?
(1) 1454/     70E : FA 28 07            		jp	m,.singl_link
(1) 1455/     711 :                     .srch_lloop:
(1) 1456/     711 : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1457/     712 : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1458/     714 : 28 43               		jr	z,.refill
(1) 1459/     716 : B9                  		cp	c			; Same link LSB?
(1) 1460/     717 : 20 07               		jr	nz,.invldl
(1) 1461/     719 : 23                  		inc	hl
(1) 1462/     71A : CF                  		rst	8
(1) 1463/     71B : 7E                  		ld	a,(hl)
(1) 1464/     71C : 2B                  		dec	hl
(1) 1465/     71D : B8                  		cp	b			; Same link MSB?
(1) 1466/     71E : 28 16               		jr	z,.reroll
(1) 1467/     720 :                     .invldl:
(1) 1468/     720 : D5                  		push	de
(1) 1469/     721 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1470/     724 : 19                  		add	hl,de
(1) 1471/     725 : D1                  		pop	de
(1) 1472/     726 : 18 E9               		jr	.srch_lloop
(1) 1473/     728 :                     
(1) 1474/     728 :                     ; ----------------------
(1) 1475/     728 :                     ; PSGN/FM3/FM6
(1) 1476/     728 :                     .singl_link:
(1) 1477/     728 : 23                  		inc	hl			; Read MSB first
(1) 1478/     729 : 7E                  		ld	a,(hl)
(1) 1479/     72A : 2B                  		dec	hl
(1) 1480/     72B : CF                  		rst	8
(1) 1481/     72C : B8                  		cp	b			; MSB match?
(1) 1482/     72D : 20 2A               		jr	nz,.refill
(1) 1483/     72F : 7E                  		ld	a,(hl)			; Read LSB
(1) 1484/     730 : B9                  		cp	c
(1) 1485/     731 : 20 26               		jr	nz,.refill
(1) 1486/     733 : C3 5B 07            		jp	.rnot_psg
(1) 1487/     736 :                     
(1) 1488/     736 :                     ; ----------------------------------------
(1) 1489/     736 :                     ; *** Special re-roll check for
(1) 1490/     736 :                     ; listed tables ***
(1) 1491/     736 :                     
(1) 1492/     736 :                     .reroll:
(1) 1493/     736 : E5                  		push	hl
(1) 1494/     737 : 01 03 00            		ld	bc,ztbl_Chip	; <-- fake iy+ztbl_Chip
(1) 1495/     73A : 09                  		add	hl,bc
(1) 1496/     73B : CF                  		rst	8
(1) 1497/     73C : 4E                  		ld	c,(hl)		; c - ID
(1) 1498/     73D : E1                  		pop	hl
(1) 1499/     73E : 7B                  		ld	a,e
(1) 1500/     73F : FE 80               		cp	80h		; PSG?
(1) 1501/     741 : 20 18               		jr	nz,.rnot_psg
(1) 1502/     743 :                     	; Special PSG3/PSGN check
(1) 1503/     743 : 3A 2F 00            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1504/     746 : E6 03               		and	011b
(1) 1505/     748 : FE 03               		cp	011b
(1) 1506/     74A : 20 0F               		jr	nz,.rnot_psg
(1) 1507/     74C : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1508/     74D : FE 02               		cp	2
(1) 1509/     74F : 20 0A               		jr	nz,.rnot_psg
(1) 1510/     751 : CF                  		rst	8
(1) 1511/     752 : D5                  		push	de
(1) 1512/     753 : 16 80               		ld	d,80h		; Force silence
(1) 1513/     755 : CD F8 0E            		call	tblz_clear
(1) 1514/     758 : D1                  		pop	de
(1) 1515/     759 :                     .refill:
(1) 1516/     759 : 18 6D               		jr	.set_asfull
(1) 1517/     75B :                     .rnot_psg:
(1) 1518/     75B : AF                  		xor	a
(1) 1519/     75C : C9                  		ret
(1) 1520/     75D :                     
(1) 1521/     75D :                     ; ----------------------------------------
(1) 1522/     75D :                     ; *** NEW CHIP ***
(1) 1523/     75D :                     ; e - Chip to set
(1) 1524/     75D :                     
(1) 1525/     75D :                     .new_chip:
(1) 1526/     75D : 7B                  		ld	a,e			; Read NEW chip
(1) 1527/     75E : B7                  		or	a			; If non-minus, exit.
(1) 1528/     75F : F2 C8 07            		jp	p,.set_asfull
(1) 1529/     762 : CD CB 07            		call	.pick_tbl
(1) 1530/     765 : CF                  		rst	8
(1) 1531/     766 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1532/     769 : B7                  		or	a
(1) 1533/     76A : FA B8 07            		jp	m,.singl_free
(1) 1534/     76D : E5                  		push	hl			; Backup START table
(1) 1535/     76E :                     ; PASS 1
(1) 1536/     76E :                     .srch_free:
(1) 1537/     76E : 7E                  		ld	a,(hl)			; Read LSB
(1) 1538/     76F : FE FF               		cp	-1			; If -1, return -1
(1) 1539/     771 : 28 0B               		jr	z,.pass_2
(1) 1540/     773 : 23                  		inc	hl
(1) 1541/     774 : 46                  		ld	b,(hl)			; Read MSB
(1) 1542/     775 : 2B                  		dec	hl
(1) 1543/     776 : B0                  		or	b
(1) 1544/     777 : 28 22               		jr	z,.new_link_z
(1) 1545/     779 : CD 94 07            		call	.nextsrch_tbl
(1) 1546/     77C : 18 F0               		jr	.srch_free
(1) 1547/     77E :                     
(1) 1548/     77E :                     ; PASS 2
(1) 1549/     77E :                     ; Rewrite mode
(1) 1550/     77E :                     .pass_2:
(1) 1551/     77E : E1                  		pop	hl
(1) 1552/     77F :                     .next_prio:
(1) 1553/     77F : 7E                  		ld	a,(hl)		; Read LSB
(1) 1554/     780 : FE FF               		cp	-1		; If -1, return -1
(1) 1555/     782 : C8                  		ret	z
(1) 1556/     783 : 23                  		inc	hl
(1) 1557/     784 : 23                  		inc	hl
(1) 1558/     785 : 7E                  		ld	a,(hl)		; Read priority
(1) 1559/     786 : 2B                  		dec	hl
(1) 1560/     787 : 2B                  		dec	hl
(1) 1561/     788 : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1562/     789 : 28 14               		jr	z,.new_link_o
(1) 1563/     78B : B9                  		cp	c
(1) 1564/     78C :                     ; 		jr	z,.new_link_o
(1) 1565/     78C : 38 11               		jr	c,.new_link_o		; PRIORITY
(1) 1566/     78E : CF                  		rst	8
(1) 1567/     78F : CD 94 07            		call	.nextsrch_tbl
(1) 1568/     792 : 18 EB               		jr	.next_prio
(1) 1569/     794 :                     .nextsrch_tbl:
(1) 1570/     794 : D5                  		push	de
(1) 1571/     795 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1572/     798 : 19                  		add	hl,de
(1) 1573/     799 : D1                  		pop	de
(1) 1574/     79A : C9                  		ret
(1) 1575/     79B :                     .new_link_z:
(1) 1576/     79B : 33                  		inc	sp		; skip backup
(1) 1577/     79C : 33                  		inc	sp
(1) 1578/     79D : 18 08               		jr	.new_link
(1) 1579/     79F :                     
(1) 1580/     79F :                     ; OVERWRITE link
(1) 1581/     79F :                     .new_link_o:
(1) 1582/     79F : E5                  		push	hl
(1) 1583/     7A0 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1584/     7A3 : CD F8 0E            		call	tblz_clear
(1) 1585/     7A6 : E1                  		pop	hl
(1) 1586/     7A7 :                     ; NEW link
(1) 1587/     7A7 :                     .new_link:
(1) 1588/     7A7 : CF                  		rst	8
(1) 1589/     7A8 : 23                  		inc	hl
(1) 1590/     7A9 : 23                  		inc	hl
(1) 1591/     7AA :                     ; hl+2
(1) 1592/     7AA :                     .l_hiprio:
(1) 1593/     7AA : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1594/     7AD : DD E5               		push	ix
(1) 1595/     7AF : D1                  		pop	de
(1) 1596/     7B0 : 71                  		ld	(hl),c		; Write priority
(1) 1597/     7B1 : 2B                  		dec	hl
(1) 1598/     7B2 : CF                  		rst	8
(1) 1599/     7B3 : 72                  		ld 	(hl),d		; MSB
(1) 1600/     7B4 : 2B                  		dec	hl
(1) 1601/     7B5 : 73                  		ld	(hl),e		; LSB
(1) 1602/     7B6 : AF                  		xor	a		; Return OK
(1) 1603/     7B7 : C9                  		ret
(1) 1604/     7B8 :                     
(1) 1605/     7B8 :                     ; Single slot
(1) 1606/     7B8 :                     ; c - priority
(1) 1607/     7B8 :                     ; e - chip
(1) 1608/     7B8 :                     .singl_free:
(1) 1609/     7B8 : 46                  		ld	b,(hl)
(1) 1610/     7B9 : 23                  		inc	hl
(1) 1611/     7BA : 7E                  		ld	a,(hl)
(1) 1612/     7BB : 23                  		inc	hl
(1) 1613/     7BC : B0                  		or	b
(1) 1614/     7BD : 28 EB               		jr	z,.l_hiprio
(1) 1615/     7BF : CF                  		rst	8
(1) 1616/     7C0 : 7E                  		ld	a,(hl)
(1) 1617/     7C1 : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1618/     7C2 : 28 E6               		jr	z,.l_hiprio
(1) 1619/     7C4 : B9                  		cp	c
(1) 1620/     7C5 :                     ; 		jr	z,.l_hiprio
(1) 1621/     7C5 : 38 E3               		jr	c,.l_hiprio		; PRIORITY
(1) 1622/     7C7 : CF                  		rst	8
(1) 1623/     7C8 :                     .set_asfull:
(1) 1624/     7C8 : 3E FF               		ld	a,-1			; Return -1
(1) 1625/     7CA : C9                  		ret
(1) 1626/     7CB :                     
(1) 1627/     7CB :                     ; Pick chip table
(1) 1628/     7CB :                     ; In:
(1) 1629/     7CB :                     ;  a - ID
(1) 1630/     7CB :                     ;
(1) 1631/     7CB :                     ; Out:
(1) 1632/     7CB :                     ;  a - Special bit + ID
(1) 1633/     7CB :                     ;
(1) 1634/     7CB :                     ; hl - Table
(1) 1635/     7CB :                     .pick_tbl:
(1) 1636/     7CB : D5                  		push	de
(1) 1637/     7CC : 0F                  		rrca
(1) 1638/     7CD : 0F                  		rrca
(1) 1639/     7CE : 0F                  		rrca
(1) 1640/     7CF : 0F                  		rrca
(1) 1641/     7D0 : E6 07               		and	00000111b
(1) 1642/     7D2 : 87                  		add	a,a
(1) 1643/     7D3 : 21 00 1B            		ld	hl,tblList
(1) 1644/     7D6 : E5                  		push	hl
(1) 1645/     7D7 : 16 00               		ld	d,0
(1) 1646/     7D9 : 5F                  		ld	e,a
(1) 1647/     7DA : 19                  		add	hl,de
(1) 1648/     7DB : 5E                  		ld	e,(hl)
(1) 1649/     7DC : 23                  		inc	hl
(1) 1650/     7DD : 7E                  		ld	a,(hl)
(1) 1651/     7DE : 57                  		ld	d,a
(1) 1652/     7DF : E6 80               		and	10000000b
(1) 1653/     7E1 : CB BA               		res	7,d
(1) 1654/     7E3 : E1                  		pop	hl
(1) 1655/     7E4 : 19                  		add	hl,de
(1) 1656/     7E5 : D1                  		pop	de
(1) 1657/     7E6 : C9                  		ret
(1) 1658/     7E7 :                     
(1) 1659/     7E7 :                     ; ============================================
(1) 1660/     7E7 :                     ; ----------------------------------------
(1) 1661/     7E7 :                     ; Process chip using it's table
(1) 1662/     7E7 :                     ;
(1) 1663/     7E7 :                     ; iy - table to read
(1) 1664/     7E7 :                     ; ----------------------------------------
(1) 1665/     7E7 :                     
(1) 1666/     7E7 :                     dtbl_multi:
(1) 1667/     7E7 : FD 7E 00            		ld	a,(iy)
(1) 1668/     7EA : FE FF               		cp	-1
(1) 1669/     7EC : C8                  		ret	z
(1) 1670/     7ED : CD F9 07            		call	dtbl_singl
(1) 1671/     7F0 : CF                  		rst	8
(1) 1672/     7F1 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1673/     7F4 : FD 19               		add	iy,de
(1) 1674/     7F6 : CF                  		rst	8
(1) 1675/     7F7 : 18 EE               		jr	dtbl_multi
(1) 1676/     7F9 :                     dtbl_singl:
(1) 1677/     7F9 : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1678/     7FC : FD 56 01            		ld	d,(iy+1)
(1) 1679/     7FF : 7A                  		ld	a,d		; If no-zero, active
(1) 1680/     800 : B3                  		or	e
(1) 1681/     801 : 20 60               		jr	nz,.linked
(1) 1682/     803 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1683/     806 : B7                  		or	a
(1) 1684/     807 : F0                  		ret	p		; Return if not.
(1) 1685/     808 : CF                  		rst	8
(1) 1686/     809 : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1687/     80D :                     
(1) 1688/     80D :                     ; ----------------------------------------
(1) 1689/     80D :                     ; chip-silence request
(1) 1690/     80D :                     ; iy - Table
(1) 1691/     80D :                     
(1) 1692/     80D : 06 00               		ld	b,0
(1) 1693/     80F : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1694/     812 : E6 F0               		and	11110000b
(1) 1695/     814 : FE 80               		cp	80h
(1) 1696/     816 : 28 1E               		jr	z,.siln_psg
(1) 1697/     818 : FE 90               		cp	90h
(1) 1698/     81A : 28 16               		jr	z,.siln_psg_n
(1) 1699/     81C : FE A0               		cp	0A0h
(1) 1700/     81E : 28 3D               		jr	z,.siln_fm
(1) 1701/     820 : FE B0               		cp	0B0h
(1) 1702/     822 : 28 39               		jr	z,.siln_fm
(1) 1703/     824 : CF                  		rst	8
(1) 1704/     825 : FE C0               		cp	0C0h
(1) 1705/     827 : 28 31               		jr	z,.siln_dac
(1) 1706/     829 : FE D0               		cp	0D0h
(1) 1707/     82B : 28 0F               		jr	z,.siln_pcm
(1) 1708/     82D : FE E0               		cp	0E0h
(1) 1709/     82F : 28 1C               		jr	z,.siln_pwm
(1) 1710/     831 : C9                  		ret
(1) 1711/     832 :                     .siln_psg_n:
(1) 1712/     832 : AF                  		xor	a
(1) 1713/     833 : 32 2F 00            		ld	(psgHatMode),a
(1) 1714/     836 :                     .siln_psg:
(1) 1715/     836 : CF                  		rst	8
(1) 1716/     837 : 21 0B 15            		ld	hl,psgcom
(1) 1717/     83A : 18 1A               		jr	.rcyl_com
(1) 1718/     83C :                     
(1) 1719/     83C :                     ; --------------------------------
(1) 1720/     83C :                     
(1) 1721/     83C :                     .siln_pcm:
(1) 1722/     83C : 3E 01               		ld	a,1
(1) 1723/     83E : 32 8F 17            		ld	(mcdUpd),a
(1) 1724/     841 : CF                  		rst	8
(1) 1725/     842 : 21 B3 14            		ld	hl,pcmcom+32
(1) 1726/     845 : 09                  		add	hl,bc
(1) 1727/     846 : 36 FF               		ld	(hl),-1
(1) 1728/     848 : 21 93 14            		ld	hl,pcmcom
(1) 1729/     84B : 18 09               		jr	.rcyl_com
(1) 1730/     84D :                     .siln_pwm:
(1) 1731/     84D : 3E 01               		ld	a,1
(1) 1732/     84F : 32 8E 17            		ld	(marsUpd),a
(1) 1733/     852 : CF                  		rst	8
(1) 1734/     853 : 21 D3 14            		ld	hl,pwmcom
(1) 1735/     856 :                     .rcyl_com:
(1) 1736/     856 : 09                  		add	hl,bc
(1) 1737/     857 : 36 04               		ld	(hl),100b	; key-cut
(1) 1738/     859 : C9                  		ret
(1) 1739/     85A :                     
(1) 1740/     85A :                     ; --------------------------------
(1) 1741/     85A :                     
(1) 1742/     85A :                     .siln_dac:
(1) 1743/     85A : CD E0 11            		call	dac_off
(1) 1744/     85D :                     .siln_fm:
(1) 1745/     85D : CD 5D 0A            		call	.fm_tloff
(1) 1746/     860 : C3 55 0A            		jp	.fm_keyoff
(1) 1747/     863 :                     
(1) 1748/     863 :                     ; ----------------------------------------
(1) 1749/     863 :                     ; Process channel now
(1) 1750/     863 :                     ; iy - Table
(1) 1751/     863 :                     ; ix - Tracker channel
(1) 1752/     863 :                     .linked:
(1) 1753/     863 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1754/     864 : 47                  		ld	b,a		; b - flags to check
(1) 1755/     865 : E6 0F               		and	00001111b	; evin flags?
(1) 1756/     867 : C8                  		ret	z
(1) 1757/     868 : 78                  		ld	a,b
(1) 1758/     869 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1759/     86B : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1760/     86C : FD E5               		push	iy		; table+10h instrment data
(1) 1761/     86E : D5                  		push	de
(1) 1762/     86F : DD E1               		pop	ix
(1) 1763/     871 : E1                  		pop	hl
(1) 1764/     872 : 11 0A 00            		ld	de,ztbl_InstCach	; Go to stored inst data
(1) 1765/     875 : 19                  		add	hl,de
(1) 1766/     876 :                     	; --------------------------------
(1) 1767/     876 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1768/     876 :                     	; iy - Our chip table
(1) 1769/     876 :                     	; ix - Track channel
(1) 1770/     876 :                     	; hl - Intrument data
(1) 1771/     876 : 78                  		ld	a,b		; Note and/or Inst?
(1) 1772/     877 : E6 03               		and	0011b
(1) 1773/     879 : C4 A4 08            		call	nz,.reset_effc	; Reset effects
(1) 1774/     87C : CB 50               		bit	2,b		; Volume
(1) 1775/     87E : C4 07 0D            		call	nz,.volu
(1) 1776/     881 : CB 40               		bit	0,b		; Note
(1) 1777/     883 : C4 A5 0E            		call	nz,.note
(1) 1778/     886 : CB 48               		bit	1,b		; Intrument
(1) 1779/     888 : C4 10 0D            		call	nz,.inst
(1) 1780/     88B : CF                  		rst	8
(1) 1781/     88C : CB 58               		bit	3,b		; Effect
(1) 1782/     88E : C4 1C 0C            		call	nz,.effc
(1) 1783/     891 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1784/     892 : E6 70               		and	01110000b	; Filter bits
(1) 1785/     894 : 0F                  		rrca
(1) 1786/     895 : 0F                  		rrca
(1) 1787/     896 : 0F                  		rrca
(1) 1788/     897 : CF                  		rst	8
(1) 1789/     898 : 16 00               		ld	d,0
(1) 1790/     89A : 5F                  		ld	e,a
(1) 1791/     89B : 21 B1 08            		ld	hl,.mk_list
(1) 1792/     89E : 19                  		add	hl,de
(1) 1793/     89F : 7E                  		ld	a,(hl)
(1) 1794/     8A0 : 23                  		inc	hl
(1) 1795/     8A1 : 66                  		ld	h,(hl)
(1) 1796/     8A2 : 6F                  		ld	l,a
(1) 1797/     8A3 : E9                  		jp	(hl)
(1) 1798/     8A4 :                     .reset_effc:
(1) 1799/     8A4 : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 1800/     8A8 : FD 36 08 00         		ld	(iy+ztbl_VolSlide),0
(1) 1801/     8AC : FD 36 07 00         		ld	(iy+ztbl_Volume),0
(1) 1802/     8B0 : C9                  		ret
(1) 1803/     8B1 :                     
(1) 1804/     8B1 :                     ; --------------------------------
(1) 1805/     8B1 :                     .mk_list:
(1) 1806/     8B1 : BF 08               		dw .mk_psg
(1) 1807/     8B3 : BF 08               		dw .mk_psg
(1) 1808/     8B5 : 6E 09               		dw .mk_fm
(1) 1809/     8B7 : E3 09               		dw .mk_fm_sp
(1) 1810/     8B9 : A6 0B               		dw .mk_dac
(1) 1811/     8BB : FC 0B               		dw .mk_pcm
(1) 1812/     8BD : FD 0B               		dw .mk_pwm
(1) 1813/     8BF :                     
(1) 1814/     8BF :                     ; --------------------------------
(1) 1815/     8BF :                     ; PSG and PSGN
(1) 1816/     8BF :                     ; --------------------------------
(1) 1817/     8BF :                     
(1) 1818/     8BF :                     .mk_psg:
(1) 1819/     8BF : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Note
(1) 1820/     8C2 : DD E5               		push	ix			; * Save ix
(1) 1821/     8C4 : CF                  		rst	8
(1) 1822/     8C5 : DD 21 0B 15         		ld	ix,psgcom		; ix - psgcom
(1) 1823/     8C9 : 16 00               		ld	d,0
(1) 1824/     8CB : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1825/     8CE : DD 19               		add	ix,de			; Get com index
(1) 1826/     8D0 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1827/     8D1 : E6 03               		and	0011b
(1) 1828/     8D3 : 28 48               		jr	z,.psgc_proc		; Process only
(1) 1829/     8D5 : 79                  		ld	a,c			; c - Note
(1) 1830/     8D6 : B7                  		or	a
(1) 1831/     8D7 : C8                  		ret	z
(1) 1832/     8D8 : FE FE               		cp	-2			; Key cut?
(1) 1833/     8DA : 28 31               		jr	z,.kycut_psg
(1) 1834/     8DC : FE FF               		cp	-1			; Key off?
(1) 1835/     8DE : 28 21               		jr	z,.kyoff_psg
(1) 1836/     8E0 : DD 36 00 01         		ld	(ix+COM),001b		; Set Key ON
(1) 1837/     8E4 : 7B                  		ld	a,e			; a - Channel 0-3
(1) 1838/     8E5 : 11 00 00            		ld	de,0			; Clear de
(1) 1839/     8E8 : FE 03               		cp	3			; NOISE channel?
(1) 1840/     8EA : 20 0D               		jr	nz,.not_ns
(1) 1841/     8EC : 3A 2F 00            		ld	a,(psgHatMode)		; Tone 3?
(1) 1842/     8EF : E6 03               		and	011b
(1) 1843/     8F1 : FE 03               		cp	011b
(1) 1844/     8F3 : C2 3F 09            		jp	nz,.psg_keyon		; Normal
(1) 1845/     8F6 : 11 18 00            		ld	de,12*2			; Add octave to freq
(1) 1846/     8F9 :                     .not_ns:
(1) 1847/     8F9 : CD 5A 09            		call	.psg_getfreq
(1) 1848/     8FC : 18 26               		jr	.psgc_keyon
(1) 1849/     8FE :                     
(1) 1850/     8FE :                     ; --------------------------------
(1) 1851/     8FE :                     ; -1
(1) 1852/     8FE :                     .kyoff_psgn:
(1) 1853/     8FE : CD 16 09            		call	.kypsgn_hatoff
(1) 1854/     901 :                     .kyoff_psg:
(1) 1855/     901 : DD 36 00 02         		ld	(ix),010b		; Write key off
(1) 1856/     905 : DD E1               		pop	ix			; * Restore ix
(1) 1857/     907 : C3 F1 0E            		jp	.chnl_ulnkoff
(1) 1858/     90A :                     
(1) 1859/     90A :                     ; --------------------------------
(1) 1860/     90A :                     ; -2
(1) 1861/     90A :                     .kycut_psgn:
(1) 1862/     90A : CD 16 09            		call	.kypsgn_hatoff
(1) 1863/     90D :                     .kycut_psg:
(1) 1864/     90D : DD 36 00 04         		ld	(ix),100b		; Write key cut
(1) 1865/     911 : DD E1               		pop	ix			; * Restore ix
(1) 1866/     913 : C3 F1 0E            		jp	.chnl_ulnkcut
(1) 1867/     916 :                     
(1) 1868/     916 :                     
(1) 1869/     916 :                     .kypsgn_hatoff:
(1) 1870/     916 : 3E 00               		ld	a,000b
(1) 1871/     918 : 32 2F 00            		ld	(psgHatMode),a		; ** GLOBAL SETTING
(1) 1872/     91B : CF                  		rst	8
(1) 1873/     91C : C9                  		ret
(1) 1874/     91D :                     
(1) 1875/     91D :                     ; --------------------------------
(1) 1876/     91D :                     ; hl - current freq
(1) 1877/     91D :                     ; ix - psgcom
(1) 1878/     91D :                     ; b - flags
(1) 1879/     91D :                     
(1) 1880/     91D :                     .psgc_proc:
(1) 1881/     91D : CF                  		rst	8
(1) 1882/     91E : DD 6E 1C            		ld	l,(ix+DTL)		; Read saved freq
(1) 1883/     921 : DD 66 20            		ld	h,(ix+DTH)
(1) 1884/     924 :                     .psgc_keyon:
(1) 1885/     924 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1886/     927 : B7                  		or	a
(1) 1887/     928 : CA 39 09            		jp	z,.no_req
(1) 1888/     92B : ED 44               		neg	a
(1) 1889/     92D : 5F                  		ld	e,a
(1) 1890/     92E : 4F                  		ld	c,a
(1) 1891/     92F : AF                  		xor	a
(1) 1892/     930 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 1893/     933 : 3F                  		ccf
(1) 1894/     934 : CB 21               		sla	c
(1) 1895/     936 : 9F                  		sbc	a,a
(1) 1896/     937 : 57                  		ld	d,a
(1) 1897/     938 : 19                  		add	hl,de
(1) 1898/     939 :                     .no_req:
(1) 1899/     939 : DD 75 1C            		ld	(ix+DTL),l
(1) 1900/     93C : DD 74 20            		ld	(ix+DTH),h
(1) 1901/     93F :                     .psg_keyon:
(1) 1902/     93F : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 1903/     942 : 87                  		add	a,a
(1) 1904/     943 : 5F                  		ld	e,a
(1) 1905/     944 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1906/     947 : 93                  		sub	a,e
(1) 1907/     948 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1908/     94B : ED 44               		neg	a
(1) 1909/     94D : CF                  		rst	8
(1) 1910/     94E : 87                  		add	a,a
(1) 1911/     94F : 87                  		add	a,a
(1) 1912/     950 : 30 02               		jr	nc,.vmuch
(1) 1913/     952 : 3E FF               		ld	a,-1
(1) 1914/     954 :                     .vmuch:
(1) 1915/     954 : DD 77 30            		ld	(ix+MVOL),a
(1) 1916/     957 : DD E1               		pop	ix			; * Restore ix
(1) 1917/     959 : C9                  		ret
(1) 1918/     95A :                     
(1) 1919/     95A :                     ; --------------------------------
(1) 1920/     95A :                     ; de - increment
(1) 1921/     95A :                     
(1) 1922/     95A :                     .psg_getfreq:
(1) 1923/     95A : 21 C9 12            		ld	hl,psgFreq_List-(36*2)
(1) 1924/     95D : 19                  		add	hl,de
(1) 1925/     95E : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; de - note*2
(1) 1926/     961 : 19                  		add	hl,de
(1) 1927/     962 : 7E                  		ld	a,(hl)
(1) 1928/     963 : 23                  		inc	hl
(1) 1929/     964 : 66                  		ld	h,(hl)
(1) 1930/     965 : 6F                  		ld	l,a
(1) 1931/     966 : 3A 88 1F            		ld	a,(palMode)
(1) 1932/     969 : B7                  		or	a
(1) 1933/     96A : 28 01               		jr	z,.fnot_pal
(1) 1934/     96C : 2B                  		dec	hl
(1) 1935/     96D :                     .fnot_pal:
(1) 1936/     96D : C9                  		ret
(1) 1937/     96E :                     
(1) 1938/     96E :                     ; --------------------------------
(1) 1939/     96E :                     ; FM
(1) 1940/     96E :                     ; --------------------------------
(1) 1941/     96E :                     
(1) 1942/     96E :                     .mk_fm:
(1) 1943/     96E : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - YM key
(1) 1944/     971 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1945/     972 : E6 03               		and	0011b
(1) 1946/     974 : 28 32               		jr	z,.mkfm_proc		; Process only
(1) 1947/     976 : DD 7E 02            		ld	a,(ix+chnl_Note)	; Get IT note
(1) 1948/     979 : B7                  		or	a
(1) 1949/     97A : C8                  		ret	z
(1) 1950/     97B : FE FE               		cp	-2			; Key-cut?
(1) 1951/     97D : CA 38 0A            		jp	z,.fm_cut
(1) 1952/     980 : FE FF               		cp	-1			; Key-off?
(1) 1953/     982 : CA 32 0A            		jp	z,.fm_off
(1) 1954/     985 : CF                  		rst	8
(1) 1955/     986 : 79                  		ld	a,c
(1) 1956/     987 : FE 06               		cp	6			; Check FM6
(1) 1957/     989 : 20 05               		jr	nz,.not_dac
(1) 1958/     98B : CD E0 11            		call	dac_off			; Turn DAC off
(1) 1959/     98E : 18 15               		jr	.not_dspc
(1) 1960/     990 :                     .not_dac:
(1) 1961/     990 : FE 02               		cp	2			; Check FM3
(1) 1962/     992 : 20 11               		jr	nz,.not_dspc
(1) 1963/     994 : 3A 30 00            		ld	a,(fmSpecial)		; FM3 Special active?
(1) 1964/     997 : B7                  		or	a
(1) 1965/     998 : 28 0B               		jr	z,.not_dspc
(1) 1966/     99A : 3E 00               		ld	a,0
(1) 1967/     99C : 32 30 00            		ld	(fmSpecial),a
(1) 1968/     99F : 11 00 27            		ld	de,2700h		; Turn FM3 Special OFF
(1) 1969/     9A2 : CD B5 11            		call	fm_send_1
(1) 1970/     9A5 :                     .not_dspc:
(1) 1971/     9A5 : CD 55 0A            		call	.fm_keyoff		; Turn FM keys off
(1) 1972/     9A8 :                     .mkfm_proc:
(1) 1973/     9A8 : CD AE 09            		call	.mkfm_freq
(1) 1974/     9AB : C3 8B 0A            		jp	.mkfm_set		; Volume
(1) 1975/     9AE :                     
(1) 1976/     9AE :                     ; --------------------------------
(1) 1977/     9AE :                     ; Read FM freq
(1) 1978/     9AE :                     
(1) 1979/     9AE :                     .mkfm_freq:
(1) 1980/     9AE : C5                  		push	bc
(1) 1981/     9AF : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 1982/     9B2 : 47                  		ld	b,a
(1) 1983/     9B3 : E6 1F               		and	00011111b
(1) 1984/     9B5 : 5F                  		ld	e,a
(1) 1985/     9B6 : 16 00               		ld	d,0
(1) 1986/     9B8 : 21 F9 12            		ld	hl,fmFreq_List
(1) 1987/     9BB : 19                  		add	hl,de
(1) 1988/     9BC : 7E                  		ld	a,(hl)
(1) 1989/     9BD : CF                  		rst	8
(1) 1990/     9BE : 23                  		inc	hl
(1) 1991/     9BF : 66                  		ld	h,(hl)
(1) 1992/     9C0 : 6F                  		ld	l,a			; hl - Current FM freq
(1) 1993/     9C1 : 3A 88 1F            		ld	a,(palMode)		; PAL speed check
(1) 1994/     9C4 : B7                  		or	a
(1) 1995/     9C5 : 28 04               		jr	z,.not_pal
(1) 1996/     9C7 : 11 04 00            		ld	de,4			; freq + 4
(1) 1997/     9CA : 19                  		add	hl,de
(1) 1998/     9CB :                     .not_pal:
(1) 1999/     9CB : 78                  		ld	a,b
(1) 2000/     9CC : E6 E0               		and	11100000b
(1) 2001/     9CE : 0F                  		rrca
(1) 2002/     9CF : 0F                  		rrca
(1) 2003/     9D0 : B4                  		or	h
(1) 2004/     9D1 : 67                  		ld	h,a
(1) 2005/     9D2 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; Get pitchbend effect
(1) 2006/     9D5 : CF                  		rst	8
(1) 2007/     9D6 : AF                  		xor	a			; clear high
(1) 2008/     9D7 : 3F                  		ccf				; clear carry
(1) 2009/     9D8 : CB 23               		sla	e			; pitchbend << 2
(1) 2010/     9DA : 00                  		nop				; **
(1) 2011/     9DB : 9F                  		sbc	a,a			; get carry MSB
(1) 2012/     9DC : 57                  		ld	d,a
(1) 2013/     9DD : 19                  		add	hl,de			; Pitchbend the freq
(1) 2014/     9DE : CD 74 0A            		call	.fm_setfreq
(1) 2015/     9E1 : C1                  		pop	bc
(1) 2016/     9E2 :                     .nofm_note:
(1) 2017/     9E2 : C9                  		ret
(1) 2018/     9E3 :                     
(1) 2019/     9E3 :                     ; --------------------------------
(1) 2020/     9E3 :                     ; FM3 special
(1) 2021/     9E3 :                     ; --------------------------------
(1) 2022/     9E3 :                     
(1) 2023/     9E3 :                     .mk_fm_sp:
(1) 2024/     9E3 : 0E 02               		ld	c,010b			; ** FM3 special ID
(1) 2025/     9E5 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 2026/     9E6 : E6 03               		and	0011b
(1) 2027/     9E8 : CA 8B 0A            		jp	z,.mkfm_set		; Process only
(1) 2028/     9EB : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2029/     9EE : B7                  		or	a
(1) 2030/     9EF : C8                  		ret	z
(1) 2031/     9F0 : FE FE               		cp	-2
(1) 2032/     9F2 : CA 38 0A            		jp	z,.fm_cut
(1) 2033/     9F5 : FE FF               		cp	-1
(1) 2034/     9F7 : CA 32 0A            		jp	z,.fm_off
(1) 2035/     9FA : CD 55 0A            		call	.fm_keyoff
(1) 2036/     9FD : CF                  		rst	8
(1) 2037/     9FE : 21 97 15            		ld	hl,fmcach_3		; DIRECT point to FM3 data
(1) 2038/     A01 : 11 20 00            		ld	de,20h			; point to regs
(1) 2039/     A04 : 19                  		add	hl,de
(1) 2040/     A05 : DD E5               		push	ix
(1) 2041/     A07 : DD 21 2A 0A         		ld	ix,.this_regs
(1) 2042/     A0B : 06 08               		ld	b,8
(1) 2043/     A0D :                     .wr_spc:
(1) 2044/     A0D : DD 56 00            		ld	d,(ix)			; Manually write the FM3 freqs
(1) 2045/     A10 : 5E                  		ld	e,(hl)
(1) 2046/     A11 : CD B5 11            		call	fm_send_1
(1) 2047/     A14 : CF                  		rst	8
(1) 2048/     A15 : 23                  		inc	hl
(1) 2049/     A16 : DD 23               		inc	ix
(1) 2050/     A18 : 10 F3               		djnz	.wr_spc
(1) 2051/     A1A : DD E1               		pop	ix
(1) 2052/     A1C : 11 40 27            		ld	de,2740h		; Turn FM3 Special mode
(1) 2053/     A1F : CD B5 11            		call	fm_send_1
(1) 2054/     A22 : 3E 01               		ld	a,1
(1) 2055/     A24 : 32 30 00            		ld	(fmSpecial),a
(1) 2056/     A27 : C3 8B 0A            		jp	.mkfm_set
(1) 2057/     A2A :                     .this_regs:
(1) 2058/     A2A : AD A9               		db 0ADh,0A9h
(1) 2059/     A2C : AC A8               		db 0ACh,0A8h
(1) 2060/     A2E : AE AA               		db 0AEh,0AAh
(1) 2061/     A30 : A6 A2               		db 0A6h,0A2h
(1) 2062/     A32 :                     
(1) 2063/     A32 :                     ; ----------------------------------------
(1) 2064/     A32 :                     
(1) 2065/     A32 :                     .fm_off:
(1) 2066/     A32 : CD 55 0A            		call	.fm_keyoff
(1) 2067/     A35 : C3 F1 0E            		jp	.chnl_ulnkoff
(1) 2068/     A38 :                     .fm_cut:
(1) 2069/     A38 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2070/     A3B : 87                  		add	a,a
(1) 2071/     A3C : 87                  		add	a,a
(1) 2072/     A3D : 21 37 16            		ld	hl,fmlist_rsave
(1) 2073/     A40 : 16 00               		ld	d,0
(1) 2074/     A42 : 5F                  		ld	e,a
(1) 2075/     A43 : 19                  		add	hl,de
(1) 2076/     A44 : 36 00               		ld	(hl),0
(1) 2077/     A46 : 23                  		inc	hl
(1) 2078/     A47 : 36 00               		ld	(hl),0
(1) 2079/     A49 : 23                  		inc	hl
(1) 2080/     A4A : 36 00               		ld	(hl),0
(1) 2081/     A4C : CD 55 0A            		call	.fm_keyoff
(1) 2082/     A4F : CD 5D 0A            		call	.fm_tloff
(1) 2083/     A52 : C3 F1 0E            		jp	.chnl_ulnkcut
(1) 2084/     A55 :                     
(1) 2085/     A55 :                     ; ----------------------------------------
(1) 2086/     A55 :                     ; iy - current FM table
(1) 2087/     A55 :                     
(1) 2088/     A55 :                     .fm_keyoff:
(1) 2089/     A55 : 16 28               		ld	d,28h
(1) 2090/     A57 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2091/     A5A : C3 B5 11            		jp	fm_send_1
(1) 2092/     A5D :                     
(1) 2093/     A5D :                     .fm_tloff:
(1) 2094/     A5D : 06 04               		ld	b,4
(1) 2095/     A5F : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2096/     A62 : 79                  		ld	a,c
(1) 2097/     A63 : E6 03               		and	011b
(1) 2098/     A65 : F6 40               		or	40h		; TL regs
(1) 2099/     A67 : 1E 7F               		ld	e,7Fh
(1) 2100/     A69 :                     .tl_down:
(1) 2101/     A69 : 57                  		ld	d,a
(1) 2102/     A6A :                     		; e - 7Fh
(1) 2103/     A6A : CD B1 11            		call	fm_autoreg
(1) 2104/     A6D : CF                  		rst	8
(1) 2105/     A6E : 7A                  		ld	a,d
(1) 2106/     A6F : C6 04               		add	a,4
(1) 2107/     A71 : 10 F6               		djnz	.tl_down
(1) 2108/     A73 : C9                  		ret
(1) 2109/     A74 :                     
(1) 2110/     A74 :                     ; --------------------------------
(1) 2111/     A74 :                     
(1) 2112/     A74 :                     ; c - KeyID
(1) 2113/     A74 :                     .fm_setfreq:
(1) 2114/     A74 : 79                  		ld	a,c
(1) 2115/     A75 : E6 03               		and	011b
(1) 2116/     A77 : F6 A4               		or	0A4h
(1) 2117/     A79 : 57                  		ld	d,a
(1) 2118/     A7A : 5C                  		ld	e,h
(1) 2119/     A7B : CF                  		rst	8
(1) 2120/     A7C : CD B1 11            		call	fm_autoreg
(1) 2121/     A7F : 79                  		ld	a,c
(1) 2122/     A80 : E6 03               		and	011b
(1) 2123/     A82 : F6 A0               		or	0A0h
(1) 2124/     A84 : 57                  		ld	d,a
(1) 2125/     A85 : 5D                  		ld	e,l
(1) 2126/     A86 : CD B1 11            		call	fm_autoreg
(1) 2127/     A89 : CF                  		rst	8
(1) 2128/     A8A : C9                  		ret
(1) 2129/     A8B :                     
(1) 2130/     A8B :                     ; ----------------------------------------
(1) 2131/     A8B :                     
(1) 2132/     A8B :                     .mkfm_set:
(1) 2133/     A8B : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2134/     A8E : CD 96 0B            		call	.get_fmcach
(1) 2135/     A91 :                     
(1) 2136/     A91 : E5                  		push	hl
(1) 2137/     A92 : 11 1C 00            		ld	de,1Ch			; Go to last regs
(1) 2138/     A95 : 19                  		add	hl,de
(1) 2139/     A96 : 46                  		ld	b,(hl)			; c - 0B0h from here
(1) 2140/     A97 : E1                  		pop	hl
(1) 2141/     A98 : CF                  		rst	8
(1) 2142/     A99 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2143/     A9C : 79                  		ld	a,c
(1) 2144/     A9D : E6 03               		and	011b
(1) 2145/     A9F : F6 30               		or	30h			; Start at reg 30h
(1) 2146/     AA1 : 57                  		ld	d,a
(1) 2147/     AA2 :                     
(1) 2148/     AA2 :                     	; hl - reg data
(1) 2149/     AA2 :                     	;  b - 0B0h algorithm copy
(1) 2150/     AA2 :                     	;  c - current FM channel 0-6
(1) 2151/     AA2 :                     	;  d - Starting FM reg
(1) 2152/     AA2 : CD F5 0A            		call	.mkfm_wregs		; 30h+
(1) 2153/     AA5 : CD 1F 0B            		call	.mkfm_tlvol		; 40h+
(1) 2154/     AA8 : CD F5 0A            		call	.mkfm_wregs		; 50h+
(1) 2155/     AAB : CD F5 0A            		call	.mkfm_wregs		; 60h+
(1) 2156/     AAE : CD F5 0A            		call	.mkfm_wregs		; 70h+
(1) 2157/     AB1 : CD F5 0A            		call	.mkfm_wregs		; 80h+
(1) 2158/     AB4 : CD F5 0A            		call	.mkfm_wregs		; 90h+
(1) 2159/     AB7 :                     
(1) 2160/     AB7 :                     ; 		ld	a,(hl)			; 0B0h algorithm
(1) 2161/     AB7 : 78                  		ld	a,b
(1) 2162/     AB8 : 23                  		inc	hl
(1) 2163/     AB9 : 5F                  		ld	e,a
(1) 2164/     ABA : 79                  		ld	a,c
(1) 2165/     ABB : E6 03               		and	011b
(1) 2166/     ABD : F6 B0               		or	0B0h
(1) 2167/     ABF : 57                  		ld	d,a
(1) 2168/     AC0 : CD B1 11            		call	fm_autoreg		; Write algorithm
(1) 2169/     AC3 : CF                  		rst	8
(1) 2170/     AC4 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2171/     AC7 : 2F                  		cpl				; REVERSE bits
(1) 2172/     AC8 : E6 30               		and	00110000b
(1) 2173/     ACA : 07                  		rlca				; << 2
(1) 2174/     ACB : 07                  		rlca
(1) 2175/     ACC : 5F                  		ld	e,a			; save as e
(1) 2176/     ACD : 7E                  		ld	a,(hl)			; 0B4h %00aa0ppp
(1) 2177/     ACE : 23                  		inc	hl
(1) 2178/     ACF : E6 3F               		and	00111111b
(1) 2179/     AD1 : B3                  		or	e			; Merge panning
(1) 2180/     AD2 : 5F                  		ld	e,a
(1) 2181/     AD3 : 79                  		ld	a,c
(1) 2182/     AD4 : CF                  		rst	8
(1) 2183/     AD5 : E6 03               		and	011b
(1) 2184/     AD7 : F6 B4               		or	0B4h
(1) 2185/     AD9 : 57                  		ld	d,a
(1) 2186/     ADA : CD B1 11            		call	fm_autoreg
(1) 2187/     ADD : 7E                  		ld	a,(hl)			; 022h
(1) 2188/     ADE : 23                  		inc	hl
(1) 2189/     ADF : CF                  		rst	8
(1) 2190/     AE0 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2191/     AE2 : 28 06               		jr	z,.no_lfo
(1) 2192/     AE4 : 5F                  		ld	e,a
(1) 2193/     AE5 : 16 22               		ld	d,22h
(1) 2194/     AE7 : CD B5 11            		call	fm_send_1
(1) 2195/     AEA :                     .no_lfo:
(1) 2196/     AEA : CF                  		rst	8
(1) 2197/     AEB : 7E                  		ld	a,(hl)			; 028h
(1) 2198/     AEC : E6 F0               		and	11110000b
(1) 2199/     AEE : B1                  		or	c			; Merge FM channel
(1) 2200/     AEF : 5F                  		ld	e,a
(1) 2201/     AF0 : 16 28               		ld	d,28h
(1) 2202/     AF2 : C3 B5 11            		jp	fm_send_1		; Set keys
(1) 2203/     AF5 :                     
(1) 2204/     AF5 :                     ; ----------------------------------------
(1) 2205/     AF5 :                     
(1) 2206/     AF5 :                     .mkfm_wregs:
(1) 2207/     AF5 : CF                  		rst	8
(1) 2208/     AF6 : 5E                  		ld	e,(hl)
(1) 2209/     AF7 : 23                  		inc	hl
(1) 2210/     AF8 : CD B1 11            		call	fm_autoreg
(1) 2211/     AFB : 14                  		inc	d
(1) 2212/     AFC : 14                  		inc	d
(1) 2213/     AFD : 14                  		inc	d
(1) 2214/     AFE : 14                  		inc	d
(1) 2215/     AFF : CF                  		rst	8
(1) 2216/     B00 : 5E                  		ld	e,(hl)
(1) 2217/     B01 : 23                  		inc	hl
(1) 2218/     B02 : CD B1 11            		call	fm_autoreg
(1) 2219/     B05 : 14                  		inc	d
(1) 2220/     B06 : 14                  		inc	d
(1) 2221/     B07 : 14                  		inc	d
(1) 2222/     B08 : 14                  		inc	d
(1) 2223/     B09 : CF                  		rst	8
(1) 2224/     B0A : 5E                  		ld	e,(hl)
(1) 2225/     B0B : 23                  		inc	hl
(1) 2226/     B0C : CD B1 11            		call	fm_autoreg
(1) 2227/     B0F : 14                  		inc	d
(1) 2228/     B10 : 14                  		inc	d
(1) 2229/     B11 : 14                  		inc	d
(1) 2230/     B12 : 14                  		inc	d
(1) 2231/     B13 : CF                  		rst	8
(1) 2232/     B14 : 5E                  		ld	e,(hl)
(1) 2233/     B15 : 23                  		inc	hl
(1) 2234/     B16 : CD B1 11            		call	fm_autoreg
(1) 2235/     B19 : 14                  		inc	d
(1) 2236/     B1A : 14                  		inc	d
(1) 2237/     B1B : 14                  		inc	d
(1) 2238/     B1C : 14                  		inc	d
(1) 2239/     B1D : CF                  		rst	8
(1) 2240/     B1E : C9                  		ret
(1) 2241/     B1F :                     
(1) 2242/     B1F :                     ; ----------------------------------------
(1) 2243/     B1F :                     ; Write 40+ TL w/volume
(1) 2244/     B1F :                     
(1) 2245/     B1F :                     ; hl - TL reg data
(1) 2246/     B1F :                     ; b - current 0B0h
(1) 2247/     B1F :                     ; d - 40h+
(1) 2248/     B1F :                     
(1) 2249/     B1F :                     .mkfm_tlvol:
(1) 2250/     B1F : 78                  		ld	a,b			; Read 0B0h copy
(1) 2251/     B20 : C5                  		push	bc
(1) 2252/     B21 : E5                  		push	hl
(1) 2253/     B22 : 21 8E 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2254/     B25 : E6 07               		and	0111b
(1) 2255/     B27 : 06 00               		ld	b,0
(1) 2256/     B29 : 4F                  		ld	c,a
(1) 2257/     B2A : 09                  		add	hl,bc
(1) 2258/     B2B : CF                  		rst	8
(1) 2259/     B2C : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2260/     B2F : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2261/     B32 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2262/     B35 : 4F                  		ld	c,a			; c - Current Volume
(1) 2263/     B36 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2264/     B37 : E1                  		pop	hl
(1) 2265/     B38 : CB 08               		rrc	b			; OP1
(1) 2266/     B3A : DC 71 0B            		call	c,.write_tl
(1) 2267/     B3D : D4 83 0B            		call	nc,.write_ntl
(1) 2268/     B40 : 23                  		inc	hl
(1) 2269/     B41 : 14                  		inc	d
(1) 2270/     B42 : 14                  		inc	d
(1) 2271/     B43 : CF                  		rst	8
(1) 2272/     B44 : 14                  		inc	d
(1) 2273/     B45 : 14                  		inc	d
(1) 2274/     B46 : CB 08               		rrc	b			; OP2
(1) 2275/     B48 : DC 71 0B            		call	c,.write_tl
(1) 2276/     B4B : D4 83 0B            		call	nc,.write_ntl
(1) 2277/     B4E : 23                  		inc	hl
(1) 2278/     B4F : 14                  		inc	d
(1) 2279/     B50 : 14                  		inc	d
(1) 2280/     B51 : 14                  		inc	d
(1) 2281/     B52 : 14                  		inc	d
(1) 2282/     B53 : CB 08               		rrc	b			; OP3
(1) 2283/     B55 : DC 71 0B            		call	c,.write_tl
(1) 2284/     B58 : D4 83 0B            		call	nc,.write_ntl
(1) 2285/     B5B : 23                  		inc	hl
(1) 2286/     B5C : CF                  		rst	8
(1) 2287/     B5D : 14                  		inc	d
(1) 2288/     B5E : 14                  		inc	d
(1) 2289/     B5F : 14                  		inc	d
(1) 2290/     B60 : 14                  		inc	d
(1) 2291/     B61 : CB 08               		rrc	b			; OP4
(1) 2292/     B63 : DC 71 0B            		call	c,.write_tl
(1) 2293/     B66 : D4 83 0B            		call	nc,.write_ntl
(1) 2294/     B69 : 23                  		inc	hl
(1) 2295/     B6A : 14                  		inc	d
(1) 2296/     B6B : 14                  		inc	d
(1) 2297/     B6C : 14                  		inc	d
(1) 2298/     B6D : 14                  		inc	d
(1) 2299/     B6E : CF                  		rst	8
(1) 2300/     B6F : C1                  		pop	bc
(1) 2301/     B70 : C9                  		ret
(1) 2302/     B71 :                     
(1) 2303/     B71 :                     ; --------------------------------
(1) 2304/     B71 :                     
(1) 2305/     B71 :                     .write_tl:
(1) 2306/     B71 : 7E                  		ld	a,(hl)
(1) 2307/     B72 : 91                  		sub	a,c			; reg - volume
(1) 2308/     B73 : F2 78 0B            		jp	p,.keep_tlmx
(1) 2309/     B76 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2310/     B78 :                     .keep_tlmx:
(1) 2311/     B78 : C5                  		push	bc
(1) 2312/     B79 : 5F                  		ld	e,a
(1) 2313/     B7A : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2314/     B7D : CD B1 11            		call	fm_autoreg
(1) 2315/     B80 : CF                  		rst	8
(1) 2316/     B81 : C1                  		pop	bc
(1) 2317/     B82 : C9                  		ret
(1) 2318/     B83 :                     
(1) 2319/     B83 :                     .write_ntl:
(1) 2320/     B83 : C5                  		push	bc
(1) 2321/     B84 : 5E                  		ld	e,(hl)
(1) 2322/     B85 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2323/     B88 : CD B1 11            		call	fm_autoreg
(1) 2324/     B8B : CF                  		rst	8
(1) 2325/     B8C : C1                  		pop	bc
(1) 2326/     B8D : C9                  		ret
(1) 2327/     B8E :                     
(1) 2328/     B8E :                     ; --------------------------------
(1) 2329/     B8E :                     ; Jump carry list
(1) 2330/     B8E :                     .fm_cindx:
(1) 2331/     B8E : 08                  		db 1000b
(1) 2332/     B8F : 08                  		db 1000b
(1) 2333/     B90 : 08                  		db 1000b
(1) 2334/     B91 : 08                  		db 1000b
(1) 2335/     B92 : 0C                  		db 1100b
(1) 2336/     B93 : 0E                  		db 1110b
(1) 2337/     B94 : 0E                  		db 1110b
(1) 2338/     B95 : 0F                  		db 1111b
(1) 2339/     B96 :                     
(1) 2340/     B96 :                     ; --------------------------------
(1) 2341/     B96 :                     ; Input:
(1) 2342/     B96 :                     ; a - FM id (0-2,4-6)
(1) 2343/     B96 :                     ;
(1) 2344/     B96 :                     ; Ouput:
(1) 2345/     B96 :                     ; hl - instrument data
(1) 2346/     B96 :                     ;
(1) 2347/     B96 :                     ; Uses:
(1) 2348/     B96 :                     ; de
(1) 2349/     B96 :                     ; --------------------------------
(1) 2350/     B96 :                     
(1) 2351/     B96 :                     .get_fmcach:
(1) 2352/     B96 : 21 88 17            		ld	hl,fmcach_list
(1) 2353/     B99 : E6 07               		and	0111b
(1) 2354/     B9B : 16 00               		ld	d,0
(1) 2355/     B9D : CF                  		rst	8
(1) 2356/     B9E : 87                  		add	a,a
(1) 2357/     B9F : 5F                  		ld	e,a
(1) 2358/     BA0 : 19                  		add	hl,de
(1) 2359/     BA1 : 7E                  		ld	a,(hl)
(1) 2360/     BA2 : 23                  		inc	hl
(1) 2361/     BA3 : 66                  		ld	h,(hl)
(1) 2362/     BA4 : 6F                  		ld	l,a
(1) 2363/     BA5 : C9                  		ret
(1) 2364/     BA6 :                     
(1) 2365/     BA6 :                     ; --------------------------------
(1) 2366/     BA6 :                     ; DAC
(1) 2367/     BA6 :                     ; --------------------------------
(1) 2368/     BA6 :                     
(1) 2369/     BA6 :                     .mk_dac:
(1) 2370/     BA6 : 78                  		ld	a,b
(1) 2371/     BA7 : E6 03               		and	0011b
(1) 2372/     BA9 : 28 21               		jr	z,.dac_proc
(1) 2373/     BAB : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2374/     BAE : B7                  		or	a
(1) 2375/     BAF : C8                  		ret	z
(1) 2376/     BB0 : FE FE               		cp	-2
(1) 2377/     BB2 : CA C0 0B            		jp	z,.dac_cut
(1) 2378/     BB5 : FE FF               		cp	-1
(1) 2379/     BB7 : CA C6 0B            		jp	z,.dac_off
(1) 2380/     BBA : CD CC 0B            		call	.dac_proc
(1) 2381/     BBD : C3 F5 11            		jp	dac_play
(1) 2382/     BC0 :                     .dac_cut:
(1) 2383/     BC0 : CD E0 11            		call	dac_off
(1) 2384/     BC3 : C3 F1 0E            		jp	.chnl_ulnkoff
(1) 2385/     BC6 :                     .dac_off:
(1) 2386/     BC6 : CD E0 11            		call	dac_off
(1) 2387/     BC9 : C3 F1 0E            		jp	.chnl_ulnkcut
(1) 2388/     BCC :                     .dac_proc:
(1) 2389/     BCC : 16 00               		ld	d,0			; Freq index
(1) 2390/     BCE : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2391/     BD1 : 21 71 13            		ld	hl,wavFreq_List-(2*36)
(1) 2392/     BD4 : 19                  		add	hl,de
(1) 2393/     BD5 : 7E                  		ld	a,(hl)
(1) 2394/     BD6 : 23                  		inc	hl
(1) 2395/     BD7 : 66                  		ld	h,(hl)
(1) 2396/     BD8 : 6F                  		ld	l,a
(1) 2397/     BD9 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2398/     BDC : CF                  		rst	8
(1) 2399/     BDD : AF                  		xor	a			; Clear high
(1) 2400/     BDE : 3F                  		ccf				; Clear carry
(1) 2401/     BDF : CB 23               		sla	e			; << 1
(1) 2402/     BE1 : 9F                  		sbc	a,a			; Get carry MSB
(1) 2403/     BE2 : 57                  		ld	d,a
(1) 2404/     BE3 : 19                  		add	hl,de
(1) 2405/     BE4 : 22 F3 1C            		ld	(wave_Pitch),hl
(1) 2406/     BE7 : D9                  		exx				; *
(1) 2407/     BE8 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; *
(1) 2408/     BEC : D9                  		exx				; *
(1) 2409/     BED : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2410/     BF0 : 2F                  		cpl				; REVERSE bits
(1) 2411/     BF1 : E6 30               		and	00110000b
(1) 2412/     BF3 : 07                  		rlca
(1) 2413/     BF4 : 07                  		rlca
(1) 2414/     BF5 : CF                  		rst	8
(1) 2415/     BF6 : 5F                  		ld	e,a
(1) 2416/     BF7 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2417/     BF9 : C3 C0 11            		jp	fm_send_2
(1) 2418/     BFC :                     
(1) 2419/     BFC :                     ; --------------------------------
(1) 2420/     BFC :                     ; PCM
(1) 2421/     BFC :                     ; --------------------------------
(1) 2422/     BFC :                     
(1) 2423/     BFC :                     .mk_pcm:
(1) 2501/     BFC : C9                  		ret
(1) 2503/     BFD :                     
(1) 2504/     BFD :                     ; --------------------------------
(1) 2505/     BFD :                     ; PWM
(1) 2506/     BFD :                     ; --------------------------------
(1) 2507/     BFD :                     
(1) 2508/     BFD :                     .mk_pwm:
(1) 2590/     BFD : C9                  		ret
(1) 2592/     BFE :                     
(1) 2593/     BFE :                     ; --------------------------------
(1) 2594/     BFE :                     ; SHARED routine
(1) 2595/     BFE :                     
(1) 2596/     BFE :                     .readfreq_pcm:
(1) 2597/     BFE : 21 D3 13            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2598/     C01 : 18 03               		jr	.set_wavfreq
(1) 2599/     C03 :                     .readfreq_pwm:
(1) 2600/     C03 : 21 71 13            		ld	hl,wavFreq_List-(2*36)
(1) 2601/     C06 :                     .set_wavfreq:
(1) 2602/     C06 : 16 00               		ld	d,0			; Freq index
(1) 2603/     C08 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2604/     C0B : 19                  		add	hl,de
(1) 2605/     C0C : 7E                  		ld	a,(hl)
(1) 2606/     C0D : 23                  		inc	hl
(1) 2607/     C0E : 66                  		ld	h,(hl)
(1) 2608/     C0F : 6F                  		ld	l,a
(1) 2609/     C10 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2610/     C13 : CF                  		rst	8
(1) 2611/     C14 : AF                  		xor	a			; Clear high
(1) 2612/     C15 : 3F                  		ccf				; Clear carry
(1) 2613/     C16 : CB 23               		sla	e			; Get carry MSB
(1) 2614/     C18 : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2615/     C19 : 57                  		ld	d,a
(1) 2616/     C1A : 19                  		add	hl,de
(1) 2617/     C1B : C9                  		ret
(1) 2618/     C1C :                     
(1) 2619/     C1C :                     ; ----------------------------------------
(1) 2620/     C1C :                     ; NEW effect
(1) 2621/     C1C :                     ; ----------------------------------------
(1) 2622/     C1C :                     
(1) 2623/     C1C :                     .effc:
(1) 2624/     C1C : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2625/     C1F : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2626/     C22 : 57                  		ld	d,a
(1) 2627/     C23 : CF                  		rst	8
(1) 2628/     C24 : FE 04               		cp	4			; Effect D?
(1) 2629/     C26 : 28 0F               		jr	z,.effc_D
(1) 2630/     C28 : FE 05               		cp	5			; Effect E?
(1) 2631/     C2A : 28 44               		jr	z,.effc_E
(1) 2632/     C2C : FE 06               		cp	6			; Effect F?
(1) 2633/     C2E : 28 4F               		jr	z,.effc_F
(1) 2634/     C30 : CF                  		rst	8
(1) 2635/     C31 : FE 18               		cp	24			; Effect X?
(1) 2636/     C33 : CA 90 0C            		jp	z,.effc_X
(1) 2637/     C36 : C9                  		ret
(1) 2638/     C37 :                     
(1) 2639/     C37 :                     ; ----------------------------------------
(1) 2640/     C37 :                     ; Effect D: Volume slide up/down
(1) 2641/     C37 :                     ;
(1) 2642/     C37 :                     ; 00h - DON'T USE HERE
(1) 2643/     C37 :                     ;       (Original: Keep effect)
(1) 2644/     C37 :                     ; 0xh - Slide down normal
(1) 2645/     C37 :                     ; Fxh - Slide down fine
(1) 2646/     C37 :                     ; xFh - Slide up normal
(1) 2647/     C37 :                     ; x0h - Slide up fine
(1) 2648/     C37 :                     ; ----------------------------------------
(1) 2649/     C37 :                     
(1) 2650/     C37 :                     .effc_D:
(1) 2651/     C37 : 7B                  		ld	a,e
(1) 2652/     C38 : 0F                  		rrca
(1) 2653/     C39 : 0F                  		rrca
(1) 2654/     C3A : 0F                  		rrca
(1) 2655/     C3B : 0F                  		rrca
(1) 2656/     C3C : E6 0F               		and	0Fh
(1) 2657/     C3E : 4F                  		ld	c,a
(1) 2658/     C3F :                     	; e - DOWN value: ????dddd
(1) 2659/     C3F :                     	; c - UP value:   0000uuuu
(1) 2660/     C3F :                     
(1) 2661/     C3F : 7B                  		ld	a,e
(1) 2662/     C40 : B7                  		or	a
(1) 2663/     C41 : C8                  		ret	z
(1) 2664/     C42 : E6 F0               		and	0F0h		; 0Xh
(1) 2665/     C44 : 28 1D               		jr	z,.D_down
(1) 2666/     C46 : FE F0               		cp	0F0h		; FXh
(1) 2667/     C48 : 28 14               		jr	z,.D_downhf
(1) 2668/     C4A : 7B                  		ld	a,e
(1) 2669/     C4B : E6 0F               		and	00Fh		; X0h
(1) 2670/     C4D : 28 06               		jr	z,.D_up
(1) 2671/     C4F : FE 0F               		cp	00Fh		; XFh
(1) 2672/     C51 : C0                  		ret	nz
(1) 2673/     C52 :                     ; 		jr	z,.D_uphf
(1) 2674/     C52 :                     ; Go UP
(1) 2675/     C52 :                     .D_uphf:
(1) 2676/     C52 : 79                  		ld	a,c
(1) 2677/     C53 : 18 02               		jr	.setefU_D
(1) 2678/     C55 :                     .D_up:
(1) 2679/     C55 : 79                  		ld	a,c
(1) 2680/     C56 : 87                  		add	a,a
(1) 2681/     C57 :                     .setefU_D:
(1) 2682/     C57 : 5F                  		ld	e,a
(1) 2683/     C58 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2684/     C5B : 93                  		sub	a,e
(1) 2685/     C5C : 18 0E               		jr	.setef_mcD
(1) 2686/     C5E :                     ; Go DOWN
(1) 2687/     C5E :                     .D_downhf:
(1) 2688/     C5E : 7B                  		ld	a,e
(1) 2689/     C5F : E6 0F               		and	0Fh
(1) 2690/     C61 : 18 04               		jr	.setef_D
(1) 2691/     C63 :                     .D_down:
(1) 2692/     C63 : 7B                  		ld	a,e
(1) 2693/     C64 : E6 0F               		and	0Fh
(1) 2694/     C66 : 87                  		add	a,a
(1) 2695/     C67 :                     .setef_D:
(1) 2696/     C67 : 5F                  		ld	e,a
(1) 2697/     C68 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2698/     C6B : 83                  		add	a,e
(1) 2699/     C6C :                     ; 		jr	.setef_mcD
(1) 2700/     C6C :                     
(1) 2701/     C6C :                     ; Write slide
(1) 2702/     C6C :                     .setef_mcD:
(1) 2703/     C6C : FD 77 08            		ld	(iy+ztbl_VolSlide),a
(1) 2704/     C6F : C9                  		ret
(1) 2705/     C70 :                     
(1) 2706/     C70 :                     ; ----------------------------------------
(1) 2707/     C70 :                     ; Effect E
(1) 2708/     C70 :                     ; ----------------------------------------
(1) 2709/     C70 :                     
(1) 2710/     C70 :                     .effc_E:
(1) 2711/     C70 : 7B                  		ld	a,e
(1) 2712/     C71 : E6 F0               		and	0F0h
(1) 2713/     C73 : FE F0               		cp	0F0h
(1) 2714/     C75 : C8                  		ret	z
(1) 2715/     C76 : FE E0               		cp	0E0h
(1) 2716/     C78 : C8                  		ret	z
(1) 2717/     C79 : CF                  		rst	8
(1) 2718/     C7A : 7B                  		ld	a,e
(1) 2719/     C7B : ED 44               		neg	a
(1) 2720/     C7D : 18 0B               		jr	.wrt_EF
(1) 2721/     C7F :                     
(1) 2722/     C7F :                     ; ----------------------------------------
(1) 2723/     C7F :                     ; Effect F
(1) 2724/     C7F :                     ; ----------------------------------------
(1) 2725/     C7F :                     
(1) 2726/     C7F :                     .effc_F:
(1) 2727/     C7F : 7B                  		ld	a,e
(1) 2728/     C80 : E6 F0               		and	0F0h
(1) 2729/     C82 : FE F0               		cp	0F0h
(1) 2730/     C84 : C8                  		ret	z
(1) 2731/     C85 : FE E0               		cp	0E0h
(1) 2732/     C87 : C8                  		ret	z
(1) 2733/     C88 : CF                  		rst	8
(1) 2734/     C89 : 7B                  		ld	a,e
(1) 2735/     C8A :                     .wrt_EF:
(1) 2736/     C8A : 87                  		add	a,a
(1) 2737/     C8B : 87                  		add	a,a
(1) 2738/     C8C : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2739/     C8F : C9                  		ret
(1) 2740/     C90 :                     
(1) 2741/     C90 :                     ; ----------------------------------------
(1) 2742/     C90 :                     ; Effect X
(1) 2743/     C90 :                     ;
(1) 2744/     C90 :                     ; Common panning values:
(1) 2745/     C90 :                     ;  00h LEFT
(1) 2746/     C90 :                     ;  80h MIDDLE
(1) 2747/     C90 :                     ; 0FFh RIGHT
(1) 2748/     C90 :                     ; ----------------------------------------
(1) 2749/     C90 :                     
(1) 2750/     C90 :                     .effc_X:
(1) 2751/     C90 : 16 00               		ld	d,0
(1) 2752/     C92 : 7E                  		ld	a,(hl)
(1) 2753/     C93 : E6 F0               		and	11110000b
(1) 2754/     C95 : FE 80               		cp	80h		; PSG?
(1) 2755/     C97 : 28 19               		jr	z,.res_pan
(1) 2756/     C99 : FE 90               		cp	90h		; PSGN?
(1) 2757/     C9B : 28 15               		jr	z,.res_pan
(1) 2758/     C9D : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2759/     C9F : CC BC 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2760/     CA2 :                     
(1) 2761/     CA2 :                     	; ----------------------------------------
(1) 2762/     CA2 :                     	; Common panning bits: %00LR0000
(1) 2763/     CA2 :                     	; (REVERSE: 0-on 1-off)
(1) 2764/     CA2 : CF                  		rst	8
(1) 2765/     CA3 : E5                  		push	hl
(1) 2766/     CA4 : 21 DF 0C            		ld	hl,.comn_panlist
(1) 2767/     CA7 : 7B                  		ld	a,e
(1) 2768/     CA8 : 07                  		rlca
(1) 2769/     CA9 : 07                  		rlca
(1) 2770/     CAA : 07                  		rlca
(1) 2771/     CAB : E6 07               		and	0111b
(1) 2772/     CAD :                     ; 		ld	d,0
(1) 2773/     CAD : 5F                  		ld	e,a
(1) 2774/     CAE : CF                  		rst	8
(1) 2775/     CAF : 19                  		add	hl,de
(1) 2776/     CB0 : 56                  		ld	d,(hl)
(1) 2777/     CB1 : E1                  		pop	hl
(1) 2778/     CB2 :                     .res_pan:
(1) 2779/     CB2 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2780/     CB5 : E6 CF               		and	11001111b
(1) 2781/     CB7 : B2                  		or	d
(1) 2782/     CB8 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2783/     CBB : C9                  		ret
(1) 2784/     CBC :                     
(1) 2785/     CBC :                     	; ----------------------------------------
(1) 2786/     CBC :                     	; MCD panning
(1) 2787/     CBC :                     .pan_mcd:
(1) 2788/     CBC : E5                  		push	hl
(1) 2789/     CBD : D5                  		push	de
(1) 2790/     CBE : 16 00               		ld	d,0
(1) 2791/     CC0 : 21 E7 0C            		ld	hl,.pcm_panlist
(1) 2792/     CC3 : 7B                  		ld	a,e
(1) 2793/     CC4 : E6 F8               		and	0F8h
(1) 2794/     CC6 : 0F                  		rrca
(1) 2795/     CC7 : 0F                  		rrca
(1) 2796/     CC8 : 0F                  		rrca
(1) 2797/     CC9 : 5F                  		ld	e,a
(1) 2798/     CCA : 19                  		add	hl,de
(1) 2799/     CCB : 7E                  		ld	a,(hl)
(1) 2800/     CCC : 21 B3 14            		ld	hl,pcmcom+32
(1) 2801/     CCF : 16 00               		ld	d,0
(1) 2802/     CD1 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2803/     CD4 : 19                  		add	hl,de
(1) 2804/     CD5 : 2F                  		cpl
(1) 2805/     CD6 : 77                  		ld	(hl),a
(1) 2806/     CD7 : D1                  		pop	de
(1) 2807/     CD8 : E1                  		pop	hl
(1) 2808/     CD9 : 3E 01               		ld	a,1
(1) 2809/     CDB : 32 8F 17            		ld	(mcdUpd),a
(1) 2810/     CDE : C9                  		ret
(1) 2811/     CDF :                     
(1) 2812/     CDF :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2813/     CDF :                     ; 00LR0000b
(1) 2814/     CDF :                     .comn_panlist:
(1) 2815/     CDF : 10                  		db 00010000b
(1) 2816/     CE0 : 10                  		db 00010000b
(1) 2817/     CE1 : 10                  		db 00010000b
(1) 2818/     CE2 : 00                  		db 00000000b
(1) 2819/     CE3 : 00                  		db 00000000b
(1) 2820/     CE4 : 20                  		db 00100000b
(1) 2821/     CE5 : 20                  		db 00100000b
(1) 2822/     CE6 : 20                  		db 00100000b
(1) 2823/     CE7 :                     
(1) 2824/     CE7 :                     ; REVERSE OUTPUT BITS
(1) 2825/     CE7 :                     ; RRRR | LLLL
(1) 2826/     CE7 :                     .pcm_panlist:
(1) 2827/     CE7 : F0                  		db 0F0h	; 00h
(1) 2828/     CE8 : E0                  		db 0E0h
(1) 2829/     CE9 : D0                  		db 0D0h	; 10h
(1) 2830/     CEA : C0                  		db 0C0h
(1) 2831/     CEB : B0                  		db 0B0h	; 20h
(1) 2832/     CEC : A0                  		db 0A0h
(1) 2833/     CED : 90                  		db 090h	; 30h
(1) 2834/     CEE : 80                  		db 080h
(1) 2835/     CEF : 70                  		db 070h	; 40h
(1) 2836/     CF0 : 60                  		db 060h
(1) 2837/     CF1 : 50                  		db 050h	; 50h
(1) 2838/     CF2 : 40                  		db 040h
(1) 2839/     CF3 : 30                  		db 030h	; 60h
(1) 2840/     CF4 : 20                  		db 020h
(1) 2841/     CF5 : 10                  		db 010h	; 70h
(1) 2842/     CF6 : 00                  		db 000h
(1) 2843/     CF7 : 00                  		db 000h ; 80h
(1) 2844/     CF8 : 01                  		db 001h
(1) 2845/     CF9 : 02                  		db 002h ; 90h
(1) 2846/     CFA : 03                  		db 003h
(1) 2847/     CFB : 04                  		db 004h ; A0h
(1) 2848/     CFC : 05                  		db 005h
(1) 2849/     CFD : 06                  		db 006h ; B0h
(1) 2850/     CFE : 07                  		db 007h
(1) 2851/     CFF : 08                  		db 008h ; C0h
(1) 2852/     D00 : 09                  		db 009h
(1) 2853/     D01 : 0A                  		db 00Ah ; D0h
(1) 2854/     D02 : 0B                  		db 00Bh
(1) 2855/     D03 : 0C                  		db 00Ch ; E0h
(1) 2856/     D04 : 0D                  		db 00Dh
(1) 2857/     D05 : 0E                  		db 00Eh ; F0h
(1) 2858/     D06 : 0F                  		db 00Fh
(1) 2859/     D07 :                     
(1) 2860/     D07 :                     ; ----------------------------------------
(1) 2861/     D07 :                     ; NEW volume
(1) 2862/     D07 :                     ; ----------------------------------------
(1) 2863/     D07 :                     
(1) 2864/     D07 :                     .volu:
(1) 2865/     D07 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2866/     D0A : D6 40               		sub	a,64
(1) 2867/     D0C : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2868/     D0F : C9                  		ret
(1) 2869/     D10 :                     
(1) 2870/     D10 :                     ; ----------------------------------------
(1) 2871/     D10 :                     ; NEW instrument
(1) 2872/     D10 :                     ; ----------------------------------------
(1) 2873/     D10 :                     
(1) 2874/     D10 :                     .inst:
(1) 2875/     D10 : 7E                  		ld	a,(hl)
(1) 2876/     D11 : E6 F0               		and	11110000b
(1) 2877/     D13 : FE 80               		cp	080h
(1) 2878/     D15 : 28 24               		jr	z,.ins_psg
(1) 2879/     D17 : FE 90               		cp	090h
(1) 2880/     D19 : 28 1A               		jr	z,.ins_psgn
(1) 2881/     D1B : FE A0               		cp	0A0h
(1) 2882/     D1D : 28 52               		jr	z,.ins_fm
(1) 2883/     D1F : CF                  		rst	8
(1) 2884/     D20 : FE B0               		cp	0B0h
(1) 2885/     D22 : 28 4D               		jr	z,.ins_fm
(1) 2886/     D24 : FE C0               		cp	0C0h
(1) 2887/     D26 : CA CC 0D            		jp	z,.ins_dac
(1) 2888/     D29 : FE D0               		cp	0D0h
(1) 2889/     D2B : CA 20 0E            		jp	z,.ins_pcm
(1) 2890/     D2E : FE E0               		cp	0E0h
(1) 2891/     D30 : CA 5D 0E            		jp	z,.ins_pwm
(1) 2892/     D33 : CF                  		rst	8
(1) 2893/     D34 :                     .invl_ins:
(1) 2894/     D34 : C9                  		ret
(1) 2895/     D35 :                     
(1) 2896/     D35 :                     ; ----------------------------------------
(1) 2897/     D35 :                     ; PSG
(1) 2898/     D35 :                     
(1) 2899/     D35 :                     .ins_psgn:
(1) 2900/     D35 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2901/     D36 : E6 07               		and	0111b
(1) 2902/     D38 : 32 2F 00            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2903/     D3B :                     .ins_psg:
(1) 2904/     D3B : CF                  		rst	8
(1) 2905/     D3C : DD E5               		push	ix
(1) 2906/     D3E : E5                  		push	hl
(1) 2907/     D3F : 23                  		inc	hl		; Skip ID
(1) 2908/     D40 : DD 21 0B 15         		ld	ix,psgcom	; Read psg control
(1) 2909/     D44 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2910/     D47 : 16 00               		ld	d,0
(1) 2911/     D49 : DD 19               		add	ix,de
(1) 2912/     D4B : 7E                  		ld	a,(hl)
(1) 2913/     D4C : CF                  		rst	8
(1) 2914/     D4D : 23                  		inc	hl
(1) 2915/     D4E : 7E                  		ld	a,(hl)
(1) 2916/     D4F : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2917/     D52 : 23                  		inc	hl
(1) 2918/     D53 : 7E                  		ld	a,(hl)
(1) 2919/     D54 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2920/     D57 : 23                  		inc	hl
(1) 2921/     D58 : 7E                  		ld	a,(hl)
(1) 2922/     D59 : CF                  		rst	8
(1) 2923/     D5A : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2924/     D5D : 23                  		inc	hl
(1) 2925/     D5E : 7E                  		ld	a,(hl)
(1) 2926/     D5F : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2927/     D62 : 23                  		inc	hl
(1) 2928/     D63 : 7E                  		ld	a,(hl)
(1) 2929/     D64 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2930/     D67 : 23                  		inc	hl
(1) 2931/     D68 : 7E                  		ld	a,(hl)
(1) 2932/     D69 : CF                  		rst	8
(1) 2933/     D6A : DD 77 2C            		ld	(ix+ARP),a	; ARP
(1) 2934/     D6D : E1                  		pop	hl
(1) 2935/     D6E : DD E1               		pop	ix
(1) 2936/     D70 : C9                  		ret
(1) 2937/     D71 :                     
(1) 2938/     D71 :                     ; ----------------------------------------
(1) 2939/     D71 :                     ; FM/FM3
(1) 2940/     D71 :                     
(1) 2941/     D71 :                     .ins_fm:
(1) 2942/     D71 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2943/     D74 : E6 07               		and	0111b
(1) 2944/     D76 : 16 00               		ld	d,0
(1) 2945/     D78 : 87                  		add	a,a
(1) 2946/     D79 : 5F                  		ld	e,a
(1) 2947/     D7A : DD E5               		push	ix
(1) 2948/     D7C : E5                  		push	hl
(1) 2949/     D7D : C5                  		push	bc
(1) 2950/     D7E : DD 21 88 17         		ld	ix,fmcach_list
(1) 2951/     D82 : DD 19               		add	ix,de
(1) 2952/     D84 : CF                  		rst	8
(1) 2953/     D85 : DD 5E 00            		ld	e,(ix)
(1) 2954/     D88 : DD 23               		inc	ix
(1) 2955/     D8A : DD 56 00            		ld	d,(ix)
(1) 2956/     D8D :                     
(1) 2957/     D8D : DD 21 37 16         		ld	ix,fmlist_rsave
(1) 2958/     D91 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2959/     D94 : 87                  		add	a,a
(1) 2960/     D95 : 87                  		add	a,a
(1) 2961/     D96 : 06 00               		ld	b,0
(1) 2962/     D98 : 4F                  		ld	c,a
(1) 2963/     D99 : DD 09               		add	ix,bc
(1) 2964/     D9B : 23                  		inc	hl			; Skip id and pitch
(1) 2965/     D9C : 23                  		inc	hl
(1) 2966/     D9D : 46                  		ld	b,(hl)
(1) 2967/     D9E : 23                  		inc	hl
(1) 2968/     D9F : 7E                  		ld	a,(hl)
(1) 2969/     DA0 : 23                  		inc	hl
(1) 2970/     DA1 : 6E                  		ld	l,(hl)
(1) 2971/     DA2 : 67                  		ld	h,a
(1) 2972/     DA3 :                     	;   ix - last MID and LOW bytes
(1) 2973/     DA3 :                     	;   de - current FM cache
(1) 2974/     DA3 :                     	; b,hl - 24-bit ROM address
(1) 2975/     DA3 : DD 7E 02            		ld	a,(ix+2)
(1) 2976/     DA6 : B8                  		cp	b
(1) 2977/     DA7 : 20 0E               		jr	nz,.new_romdat
(1) 2978/     DA9 : CF                  		rst	8
(1) 2979/     DAA : DD 7E 01            		ld	a,(ix+1)
(1) 2980/     DAD : BC                  		cp	h
(1) 2981/     DAE : 20 07               		jr	nz,.new_romdat
(1) 2982/     DB0 : DD 7E 00            		ld	a,(ix)
(1) 2983/     DB3 : BD                  		cp	l
(1) 2984/     DB4 : 28 11               		jr	z,.same_patch
(1) 2985/     DB6 : CF                  		rst	8
(1) 2986/     DB7 :                     .new_romdat:
(1) 2987/     DB7 : DD 70 02            		ld	(ix+2),b
(1) 2988/     DBA : DD 74 01            		ld	(ix+1),h
(1) 2989/     DBD : DD 75 00            		ld	(ix),l
(1) 2990/     DC0 : 78                  		ld	a,b
(1) 2991/     DC1 : 01 28 00            		ld	bc,28h			; <- size
(1) 2992/     DC4 : CD 95 0F            		call	readRom			; *** ROM ACCESS ***
(1) 2993/     DC7 :                     .same_patch:
(1) 2994/     DC7 : C1                  		pop	bc
(1) 2995/     DC8 : E1                  		pop	hl
(1) 2996/     DC9 : DD E1               		pop	ix
(1) 2997/     DCB : C9                  		ret
(1) 2998/     DCC :                     
(1) 2999/     DCC :                     ; ----------------------------------------
(1) 3000/     DCC :                     
(1) 3001/     DCC :                     .ins_dac:
(1) 3002/     DCC : E5                  		push	hl
(1) 3003/     DCD : C5                  		push	bc
(1) 3004/     DCE : CD E0 11            		call	dac_off
(1) 3005/     DD1 : 7E                  		ld	a,(hl)
(1) 3006/     DD2 : E6 0F               		and	00001111b
(1) 3007/     DD4 : 32 F5 1C            		ld	(wave_Flags),a
(1) 3008/     DD7 : CF                  		rst	8
(1) 3009/     DD8 : 23                  		inc	hl
(1) 3010/     DD9 : 23                  		inc	hl
(1) 3011/     DDA : 5E                  		ld	e,(hl)
(1) 3012/     DDB : 23                  		inc	hl
(1) 3013/     DDC : 7E                  		ld	a,(hl)
(1) 3014/     DDD : 23                  		inc	hl
(1) 3015/     DDE : 6E                  		ld	l,(hl)
(1) 3016/     DDF : 67                  		ld	h,a
(1) 3017/     DE0 : E5                  		push	hl
(1) 3018/     DE1 : 7B                  		ld	a,e
(1) 3019/     DE2 : 01 06 00            		ld	bc,6		; Skip head
(1) 3020/     DE5 : 09                  		add	hl,bc
(1) 3021/     DE6 : CE 00               		adc	a,0
(1) 3022/     DE8 : 22 EA 1C            		ld	(wave_Start),hl	; Set START point
(1) 3023/     DEB : 32 EC 1C            		ld	(wave_Start+2),a
(1) 3024/     DEE : E1                  		pop	hl
(1) 3025/     DEF : 7B                  		ld	a,e
(1) 3026/     DF0 : 11 AC 17            		ld	de,sampleHead
(1) 3027/     DF3 : 01 06 00            		ld	bc,6
(1) 3028/     DF6 : D5                  		push	de
(1) 3029/     DF7 : CF                  		rst	8
(1) 3030/     DF8 : CD 95 0F            		call	readRom	; *** ROM ACCESS ***
(1) 3031/     DFB : E1                  		pop	hl
(1) 3032/     DFC :                     	; hl - temporal header
(1) 3033/     DFC : 5E                  		ld	e,(hl)
(1) 3034/     DFD : 23                  		inc	hl
(1) 3035/     DFE : 56                  		ld	d,(hl)
(1) 3036/     DFF : 23                  		inc	hl
(1) 3037/     E00 : 7E                  		ld	a,(hl)
(1) 3038/     E01 : 23                  		inc	hl
(1) 3039/     E02 : ED 53 ED 1C         		ld	(wave_Len),de	; LEN
(1) 3040/     E06 : 32 EF 1C            		ld	(wave_Len+2),a
(1) 3041/     E09 : 5E                  		ld	e,(hl)
(1) 3042/     E0A : 23                  		inc	hl
(1) 3043/     E0B : CF                  		rst	8
(1) 3044/     E0C : 56                  		ld	d,(hl)
(1) 3045/     E0D : 23                  		inc	hl
(1) 3046/     E0E : 7E                  		ld	a,(hl)
(1) 3047/     E0F : 23                  		inc	hl
(1) 3048/     E10 : ED 53 F0 1C         		ld	(wave_Loop),de	; LOOP
(1) 3049/     E14 : 32 F2 1C            		ld	(wave_Loop+2),a
(1) 3050/     E17 : 11 06 28            		ld	de,2806h	; keys off
(1) 3051/     E1A : CD B5 11            		call	fm_send_1
(1) 3052/     E1D : C1                  		pop	bc
(1) 3053/     E1E : E1                  		pop	hl
(1) 3054/     E1F :                     ; .same_dac:
(1) 3055/     E1F : C9                  		ret
(1) 3056/     E20 :                     
(1) 3057/     E20 :                     ; ----------------------------------------
(1) 3058/     E20 :                     
(1) 3059/     E20 :                     .ins_pcm:
(1) 3060/     E20 : DD E5               		push	ix
(1) 3061/     E22 : E5                  		push	hl
(1) 3062/     E23 : C5                  		push	bc
(1) 3063/     E24 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3064/     E25 : E6 01               		and	00000001b	; Read loop bit
(1) 3065/     E27 : 0F                  		rrca			; Move to MSB
(1) 3066/     E28 : CF                  		rst	8
(1) 3067/     E29 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3068/     E2A : 23                  		inc	hl
(1) 3069/     E2B : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3070/     E2C : B3                  		or	e
(1) 3071/     E2D : 5F                  		ld	e,a
(1) 3072/     E2E : 23                  		inc	hl
(1) 3073/     E2F : 7E                  		ld	a,(hl)
(1) 3074/     E30 : 23                  		inc	hl
(1) 3075/     E31 : 6E                  		ld	l,(hl)
(1) 3076/     E32 : 67                  		ld	h,a
(1) 3077/     E33 :                     	; d    - Loop enable bit
(1) 3078/     E33 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3079/     E33 : DD 21 93 14         		ld	ix,pcmcom
(1) 3080/     E37 : 06 00               		ld	b,0
(1) 3081/     E39 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3082/     E3C : DD 09               		add	ix,bc
(1) 3083/     E3E : 01 28 00            		ld	bc,40		; Go to 40
(1) 3084/     E41 : DD 09               		add	ix,bc
(1) 3085/     E43 : 01 08 00            		ld	bc,8
(1) 3086/     E46 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3087/     E49 : DD 09               		add	ix,bc
(1) 3088/     E4B : DD 74 00            		ld	(ix),h
(1) 3089/     E4E : DD 09               		add	ix,bc
(1) 3090/     E50 : DD 75 00            		ld	(ix),l
(1) 3091/     E53 : C1                  		pop	bc
(1) 3092/     E54 : E1                  		pop	hl
(1) 3093/     E55 : DD E1               		pop	ix
(1) 3094/     E57 : 3E 01               		ld	a,1
(1) 3095/     E59 : 32 8F 17            		ld	(mcdUpd),a
(1) 3096/     E5C : C9                  		ret
(1) 3097/     E5D :                     
(1) 3098/     E5D :                     ; ----------------------------------------
(1) 3099/     E5D :                     
(1) 3100/     E5D :                     .ins_pwm:
(1) 3101/     E5D : DD E5               		push	ix
(1) 3102/     E5F : E5                  		push	hl
(1) 3103/     E60 : C5                  		push	bc
(1) 3104/     E61 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3105/     E62 : E6 03               		and	00000011b
(1) 3106/     E64 : 0F                  		rrca
(1) 3107/     E65 : 0F                  		rrca
(1) 3108/     E66 : 4F                  		ld	c,a
(1) 3109/     E67 : CF                  		rst	8
(1) 3110/     E68 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3111/     E69 : 23                  		inc	hl
(1) 3112/     E6A : 56                  		ld	d,(hl)
(1) 3113/     E6B : 23                  		inc	hl
(1) 3114/     E6C : 5E                  		ld	e,(hl)
(1) 3115/     E6D : 23                  		inc	hl
(1) 3116/     E6E : 7E                  		ld	a,(hl)
(1) 3117/     E6F : 23                  		inc	hl
(1) 3118/     E70 : 6E                  		ld	l,(hl)
(1) 3119/     E71 : 67                  		ld	h,a
(1) 3120/     E72 : 79                  		ld	a,c
(1) 3121/     E73 : B2                  		or	d
(1) 3122/     E74 : 57                  		ld	d,a
(1) 3123/     E75 : CF                  		rst	8
(1) 3124/     E76 :                     	; de,hl - 32-bit PWM pointer
(1) 3125/     E76 : DD 21 D3 14         		ld	ix,pwmcom
(1) 3126/     E7A : 06 00               		ld	b,0
(1) 3127/     E7C : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3128/     E7F : DD 09               		add	ix,bc
(1) 3129/     E81 : 01 18 00            		ld	bc,24
(1) 3130/     E84 : DD 09               		add	ix,bc		; Move to PWOUTF
(1) 3131/     E86 : 01 08 00            		ld	bc,8
(1) 3132/     E89 : DD 72 00            		ld	(ix),d
(1) 3133/     E8C : DD 09               		add	ix,bc
(1) 3134/     E8E : DD 73 00            		ld	(ix),e
(1) 3135/     E91 : DD 09               		add	ix,bc
(1) 3136/     E93 : DD 74 00            		ld	(ix),h
(1) 3137/     E96 : DD 09               		add	ix,bc
(1) 3138/     E98 : DD 75 00            		ld	(ix),l
(1) 3139/     E9B : C1                  		pop	bc
(1) 3140/     E9C : E1                  		pop	hl
(1) 3141/     E9D : DD E1               		pop	ix
(1) 3142/     E9F : 3E 01               		ld	a,1
(1) 3143/     EA1 : 32 8E 17            		ld	(marsUpd),a
(1) 3144/     EA4 : C9                  		ret
(1) 3145/     EA5 :                     
(1) 3146/     EA5 :                     ; ----------------------------------------
(1) 3147/     EA5 :                     ; NEW note
(1) 3148/     EA5 :                     ; ----------------------------------------
(1) 3149/     EA5 :                     
(1) 3150/     EA5 :                     .note:
(1) 3151/     EA5 : 78                  		ld	a,b			; Volume bit?
(1) 3152/     EA6 : E6 04               		and	0100b
(1) 3153/     EA8 : 20 05               		jr	nz,.fm_hasvol
(1) 3154/     EAA : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3155/     EAE : CF                  		rst	8
(1) 3156/     EAF :                     .fm_hasvol:
(1) 3157/     EAF : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3158/     EB2 : 4F                  		ld	c,a
(1) 3159/     EB3 : FE FF               		cp	-1
(1) 3160/     EB5 : C8                  		ret	z
(1) 3161/     EB6 : FE FE               		cp	-2
(1) 3162/     EB8 : C8                  		ret	z
(1) 3163/     EB9 :                     ; 		rst	20h
(1) 3164/     EB9 : CF                  		rst	8
(1) 3165/     EBA : 7E                  		ld	a,(hl)
(1) 3166/     EBB : E6 F0               		and	11110000b
(1) 3167/     EBD : FE A0               		cp	0A0h
(1) 3168/     EBF : 28 0B               		jr	z,.n_fm
(1) 3169/     EC1 :                     
(1) 3170/     EC1 :                     ; --------------------------------
(1) 3171/     EC1 :                     
(1) 3172/     EC1 :                     .n_indx:
(1) 3173/     EC1 : 79                  		ld	a,c
(1) 3174/     EC2 :                     .n_stfreq:
(1) 3175/     EC2 : 23                  		inc	hl			; Skip ID
(1) 3176/     EC3 : 5E                  		ld	e,(hl)			; Read pitch
(1) 3177/     EC4 : 2B                  		dec	hl
(1) 3178/     EC5 : 83                  		add	a,e			; Note + pitch
(1) 3179/     EC6 : CF                  		rst	8
(1) 3180/     EC7 : 87                  		add	a,a			; * 2
(1) 3181/     EC8 : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3182/     ECB : C9                  		ret
(1) 3183/     ECC :                     
(1) 3184/     ECC :                     ; --------------------------------
(1) 3185/     ECC :                     ; FM custom search
(1) 3186/     ECC :                     
(1) 3187/     ECC :                     .n_fm:
(1) 3188/     ECC : 79                  		ld	a,c
(1) 3189/     ECD : 23                  		inc	hl		; Skip ID
(1) 3190/     ECE : 5E                  		ld	e,(hl)		; Read pitch
(1) 3191/     ECF : 2B                  		dec	hl
(1) 3192/     ED0 : CF                  		rst	8
(1) 3193/     ED1 : 83                  		add	a,e		; Note + pitch
(1) 3194/     ED2 :                     	; Search for octave and note...
(1) 3195/     ED2 : 0E 00               		ld	c,0		; c - octave
(1) 3196/     ED4 : 16 07               		ld	d,7
(1) 3197/     ED6 :                     .get_oct:
(1) 3198/     ED6 : 5F                  		ld	e,a		; e - note
(1) 3199/     ED7 : D6 0C               		sub	12
(1) 3200/     ED9 : FA E0 0E            		jp	m,.fnd_oct
(1) 3201/     EDC : 0C                  		inc	c
(1) 3202/     EDD : 15                  		dec	d
(1) 3203/     EDE : 20 F6               		jr	nz,.get_oct
(1) 3204/     EE0 :                     .fnd_oct:
(1) 3205/     EE0 : CF                  		rst	8
(1) 3206/     EE1 : 7B                  		ld	a,e
(1) 3207/     EE2 : 87                  		add	a,a		; Note * 2
(1) 3208/     EE3 : E6 1F               		and	00011111b
(1) 3209/     EE5 : CB 09               		rrc	c
(1) 3210/     EE7 : CB 09               		rrc	c
(1) 3211/     EE9 : CB 09               		rrc	c
(1) 3212/     EEB : CF                  		rst	8
(1) 3213/     EEC : B1                  		or	c
(1) 3214/     EED : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3215/     EF0 : C9                  		ret
(1) 3216/     EF1 :                     
(1) 3217/     EF1 :                     ; ----------------------------------------
(1) 3218/     EF1 :                     
(1) 3219/     EF1 :                     .chnl_ulnkcut:
(1) 3220/     EF1 :                     
(1) 3221/     EF1 :                     .chnl_ulnkoff:
(1) 3222/     EF1 :                     
(1) 3223/     EF1 :                     .chnl_ulnk:
(1) 3224/     EF1 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 3225/     EF4 : CF                  		rst	8
(1) 3226/     EF5 : FD E5               		push	iy
(1) 3227/     EF7 : E1                  		pop	hl
(1) 3228/     EF8 :                     ; 		jp	tblz_clear
(1) 3229/     EF8 :                     
(1) 3230/     EF8 :                     ; ----------------------------------------
(1) 3231/     EF8 :                     ; Reset all table
(1) 3232/     EF8 :                     ;
(1) 3233/     EF8 :                     ; hl - Current channel table
(1) 3234/     EF8 :                     ; d - Silence chip
(1) 3235/     EF8 :                     ;
(1) 3236/     EF8 :                     ; Uses:
(1) 3237/     EF8 :                     ; b
(1) 3238/     EF8 :                     ; ----------------------------------------
(1) 3239/     EF8 :                     
(1) 3240/     EF8 :                     tblz_clear:
(1) 3241/     EF8 : CF                  		rst	8
(1) 3242/     EF9 : 36 00               		ld	(hl),0			; Delete link
(1) 3243/     EFB : 23                  		inc	hl
(1) 3244/     EFC : 36 00               		ld	(hl),0
(1) 3245/     EFE : 23                  		inc	hl
(1) 3246/     EFF : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 3247/     F00 : C9                  		ret
(1) 3248/     F01 :                     
(1) 3249/     F01 :                     ; ============================================================
(1) 3250/     F01 :                     ; --------------------------------------------------------
(1) 3251/     F01 :                     ; Communication with the SCD and 32X
(1) 3252/     F01 :                     ;
(1) 3253/     F01 :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3254/     F01 :                     ;    | Uses: commM,comm18-1F
(1) 3255/     F01 :                     ;    |
(1) 3256/     F01 :                     ; 32X: Interrupts Slave SH2
(1) 3257/     F01 :                     ;    | Uses: comm8-comm11 (CMD request)
(1) 3258/     F01 :                     ;    | two bits of comm14
(1) 3259/     F01 :                     ; --------------------------------------------------------
(1) 3260/     F01 :                     
(1) 3261/     F01 :                     ; NOTE: careful modifing this
(1) 3262/     F01 :                     
(1) 3263/     F01 :                     zmars_send:
(1) 3264/     F01 :                     	; ----------------------------------------
(1) 3265/     F01 :                     	; Send PCM table
(1) 3351/     F01 :                     	; ----------------------------------------
(1) 3352/     F01 :                     	; Send PWM table
(1) 3439/     F01 : C9                  		ret
(1) 3440/     F02 :                     
(1) 3441/     F02 :                     ; --------------------------------------------------------
(1) 3442/     F02 :                     ; Set bank to $A10000 area
(1) 3458/     F02 :                     
(1) 3459/     F02 :                     ; ====================================================================
(1) 3460/     F02 :                     ; ----------------------------------------------------------------
(1) 3461/     F02 :                     ; Subroutines
(1) 3462/     F02 :                     ; ----------------------------------------------------------------
(1) 3463/     F02 :                     
(1) 3464/     F02 :                     ; --------------------------------------------------------
(1) 3465/     F02 :                     ; Init sound engine
(1) 3466/     F02 :                     ; --------------------------------------------------------
(1) 3467/     F02 :                     
(1) 3468/     F02 :                     gema_init:
(1) 3469/     F02 : CD EF 12            		call	gema_lastbank		; Set last bank slot, solves bus problem with 32X
(1) 3470/     F05 : CD E0 11            		call	dac_off
(1) 3471/     F08 : AF                  		xor	a
(1) 3472/     F09 : 32 8E 17            		ld	(marsUpd),a
(1) 3473/     F0C : 32 8F 17            		ld	(mcdUpd),a
(1) 3474/     F0F : 32 87 1F            		ld	(cdRamLen),a
(1) 3475/     F12 : FD 21 BA 17         		ld	iy,nikona_BuffList
(1) 3476/     F16 : 0E 01               		ld	c,1			; Start at this priority
(1) 3477/     F18 :                     .setup_list:
(1) 3478/     F18 : FD 7E 00            		ld	a,(iy)
(1) 3479/     F1B : FE FF               		cp	-1
(1) 3480/     F1D : 28 24               		jr	z,.end_setup
(1) 3481/     F1F : FD 23               		inc	iy
(1) 3482/     F21 : 6F                  		ld	l,a
(1) 3483/     F22 : FD 66 00            		ld	h,(iy)
(1) 3484/     F25 : E5                  		push	hl
(1) 3485/     F26 : DD E1               		pop	ix
(1) 3486/     F28 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3487/     F2B : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3488/     F2F : FD 23               		inc	iy
(1) 3489/     F31 :                     	; iy - src
(1) 3490/     F31 :                     	; hl - dst
(1) 3491/     F31 : 11 04 00            		ld	de,trk_Blocks
(1) 3492/     F34 : 19                  		add	hl,de
(1) 3493/     F35 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3494/     F37 :                     .st_copy:
(1) 3495/     F37 : FD 7E 00            		ld	a,(iy)
(1) 3496/     F3A : 77                  		ld	(hl),a
(1) 3497/     F3B : FD 23               		inc	iy
(1) 3498/     F3D : 23                  		inc	hl
(1) 3499/     F3E : 10 F7               		djnz	.st_copy
(1) 3500/     F40 : 0C                  		inc	c
(1) 3501/     F41 : 18 D5               		jr	.setup_list
(1) 3502/     F43 :                     .end_setup:
(1) 3503/     F43 :                     
(1) 3504/     F43 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3505/     F46 : CD B5 11            		call	fm_send_1
(1) 3506/     F49 : 11 00 27            		ld	de,2700h	; CH3 special/timers OFF
(1) 3507/     F4C : CD B5 11            		call	fm_send_1
(1) 3508/     F4F :                     ; 		ld	de,2800h
(1) 3509/     F4F : 14                  		inc	d		; FM KEYS off
(1) 3510/     F50 : CD B5 11            		call	fm_send_1
(1) 3511/     F53 : 1C                  		inc	e
(1) 3512/     F54 : CD B5 11            		call	fm_send_1
(1) 3513/     F57 : 1C                  		inc	e
(1) 3514/     F58 : CD B5 11            		call	fm_send_1
(1) 3515/     F5B : 1C                  		inc	e
(1) 3516/     F5C : 1C                  		inc	e
(1) 3517/     F5D : CD B5 11            		call	fm_send_1
(1) 3518/     F60 : 1C                  		inc	e
(1) 3519/     F61 : CD B5 11            		call	fm_send_1
(1) 3520/     F64 : 1C                  		inc	e
(1) 3521/     F65 : CD B5 11            		call	fm_send_1
(1) 3522/     F68 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3523/     F6B : 36 9F               		ld	(hl),09Fh
(1) 3524/     F6D : 36 BF               		ld	(hl),0BFh
(1) 3525/     F6F : 36 DF               		ld	(hl),0DFh
(1) 3526/     F71 : 36 FF               		ld	(hl),0FFh
(1) 3527/     F73 : C9                  		ret
(1) 3528/     F74 :                     
(1) 3529/     F74 :                     ; --------------------------------------------------------
(1) 3530/     F74 :                     ; get_tick
(1) 3531/     F74 :                     ;
(1) 3532/     F74 :                     ; Checks if VBlank triggred a TICK
(1) 3533/     F74 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3534/     F74 :                     ; --------------------------------------------------------
(1) 3535/     F74 :                     
(1) 3536/     F74 :                     get_tick:
(1) 3537/     F74 : F3                  		di				; Disable ints
(1) 3538/     F75 : F5                  		push	af
(1) 3539/     F76 : E5                  		push	hl
(1) 3540/     F77 : 21 F7 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3541/     F7A : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3542/     F7B : B7                  		or 	a
(1) 3543/     F7C : 28 13               		jr	z,.ctnotick
(1) 3544/     F7E : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3545/     F80 : 23                  		inc	hl			; Move to tickCnt
(1) 3546/     F81 : 34                  		inc	(hl)			; and increment
(1) 3547/     F82 : CF                  		rst	8
(1) 3548/     F83 : D5                  		push	de
(1) 3549/     F84 : 2A 31 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3550/     F87 : ED 5B 33 00         		ld	de,(sbeatPtck)
(1) 3551/     F8B : CF                  		rst	8
(1) 3552/     F8C : 19                  		add	hl,de
(1) 3553/     F8D : 22 31 00            		ld	(sbeatAcc),hl
(1) 3554/     F90 : D1                  		pop	de
(1) 3555/     F91 :                     .ctnotick:
(1) 3556/     F91 : E1                  		pop	hl
(1) 3557/     F92 : F1                  		pop	af
(1) 3558/     F93 : FB                  		ei				; Enable ints again
(1) 3559/     F94 : C9                  		ret
(1) 3560/     F95 :                     
(1) 3561/     F95 :                     ; --------------------------------------------------------
(1) 3562/     F95 :                     ; readRom
(1) 3563/     F95 :                     ;
(1) 3564/     F95 :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3565/     F95 :                     ; This also tells to 68k that we want to access ROM
(1) 3566/     F95 :                     ;
(1) 3567/     F95 :                     ; Input:
(1) 3568/     F95 :                     ; a  | 68K Address $xx0000
(1) 3569/     F95 :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3570/     F95 :                     ; hl | 68K Address $00xxxx
(1) 3571/     F95 :                     ; de | Destination pointer
(1) 3572/     F95 :                     ;
(1) 3573/     F95 :                     ; Uses:
(1) 3574/     F95 :                     ; b
(1) 3575/     F95 :                     ;
(1) 3576/     F95 :                     ; Notes:
(1) 3577/     F95 :                     ; call RST 20h first, so the currenty playing DAC
(1) 3578/     F95 :                     ; sample has enough data before getting busy here.
(1) 3579/     F95 :                     ; --------------------------------------------------------
(1) 3580/     F95 :                     
(1) 3581/     F95 :                     readRom:
(1) 3582/     F95 : DD E5               		push	ix
(1) 3583/     F97 : DD 21 81 1F         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3584/     F9B : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3585/     F9D : 28 3D               		jr	z,.from_ram
(1) 3586/     F9F : CF                  		rst	8
(1) 3587/     FA0 : 22 35 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3588/     FA3 : CB BC               		res	7,h
(1) 3589/     FA5 : 06 00               		ld	b,0
(1) 3590/     FA7 : 0B                  		dec	bc
(1) 3591/     FA8 : 09                  		add	hl,bc
(1) 3592/     FA9 : CB 7C               		bit	7,h
(1) 3593/     FAB : 20 0B               		jr	nz,.double
(1) 3594/     FAD : 2A 35 00            		ld	hl,(x68ksrclsb)
(1) 3595/     FB0 : 0C                  		inc	c
(1) 3596/     FB1 : 47                  		ld	b,a
(1) 3597/     FB2 : CD FC 0F            		call	.transfer
(1) 3598/     FB5 : DD E1               		pop	ix
(1) 3599/     FB7 : C9                  		ret
(1) 3600/     FB8 :                     .double:
(1) 3601/     FB8 : CF                  		rst	8
(1) 3602/     FB9 : 47                  		ld	b,a
(1) 3603/     FBA : C5                  		push	bc
(1) 3604/     FBB : E5                  		push	hl
(1) 3605/     FBC : 79                  		ld	a,c
(1) 3606/     FBD : 95                  		sub	a,l
(1) 3607/     FBE : 4F                  		ld	c,a
(1) 3608/     FBF : 2A 35 00            		ld	hl,(x68ksrclsb)
(1) 3609/     FC2 : CD FC 0F            		call	.transfer
(1) 3610/     FC5 : E1                  		pop	hl
(1) 3611/     FC6 : C1                  		pop	bc
(1) 3612/     FC7 : 4D                  		ld	c,l
(1) 3613/     FC8 : 0C                  		inc	c
(1) 3614/     FC9 : 3A 36 00            		ld	a,(x68ksrcmid)
(1) 3615/     FCC : E6 80               		and	80h
(1) 3616/     FCE : C6 80               		add	a,80h
(1) 3617/     FD0 : 67                  		ld	h,a
(1) 3618/     FD1 : 2E 00               		ld	l,0
(1) 3619/     FD3 : 30 01               		jr	nc,.x68knocarry
(1) 3620/     FD5 : 04                  		inc	b
(1) 3621/     FD6 :                     .x68knocarry:
(1) 3622/     FD6 : CD FC 0F            		call	.transfer
(1) 3623/     FD9 : DD E1               		pop	ix
(1) 3624/     FDB : C9                  		ret
(1) 3625/     FDC :                     
(1) 3626/     FDC :                     ; ------------------------------------------------
(1) 3627/     FDC :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3628/     FDC :                     ;
(1) 3629/     FDC :                     ; On the 68K side YOU MUST CALL
(1) 3630/     FDC :                     ; gemaUpdate manually if you have the oportunity
(1) 3631/     FDC :                     ;
(1) 3632/     FDC :                     ; Normally from a Vblank wait loop.
(1) 3633/     FDC :                     ; ------------------------------------------------
(1) 3634/     FDC :                     
(1) 3635/     FDC :                     .from_ram:
(1) 3636/     FDC : ED 53 82 1F         		ld	(cdRamDst),de
(1) 3637/     FE0 : 22 84 1F            		ld	(cdRamSrc),hl
(1) 3638/     FE3 : 32 86 1F            		ld	(cdRamSrcB),a
(1) 3639/     FE6 : CD EF 12            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3640/     FE9 : CF                  		rst	8
(1) 3641/     FEA : 79                  		ld	a,c
(1) 3642/     FEB : 32 87 1F            		ld	(cdRamLen),a
(1) 3643/     FEE : 21 00 FF            		ld	hl,RAM_ZCdFlagD&07FFFh+8000h	; ** 68K LABEL **
(1) 3644/     FF1 : 36 01               		ld	(hl),1				; WRITE flag
(1) 3645/     FF3 :                     .wait:
(1) 3646/     FF3 :                     	; Get stuck here until 68K finishes
(1) 3647/     FF3 : 3A 87 1F            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3648/     FF6 : B7                  		or	a
(1) 3649/     FF7 : 20 FA               		jr	nz,.wait
(1) 3650/     FF9 : DD E1               		pop	ix
(1) 3651/     FFB : C9                  		ret
(1) 3652/     FFC :                     
(1) 3653/     FFC :                     ; ------------------------------------------------
(1) 3654/     FFC :                     ; b  - Source ROM $xx0000
(1) 3655/     FFC :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3656/     FFC :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3657/     FFC :                     ; de - Output location
(1) 3658/     FFC :                     ; ix - ROM-block flag
(1) 3659/     FFC :                     ; ------------------------------------------------
(1) 3660/     FFC :                     
(1) 3661/     FFC :                     .transfer:
(1) 3662/     FFC : CF                  		rst	8
(1) 3663/     FFD : D5                  		push	de
(1) 3664/     FFE : 11 00 60            		ld	de,6000h
(1) 3665/    1001 : 7C                  		ld	a,h
(1) 3666/    1002 : 07                  		rlca
(1) 3667/    1003 : 12                  		ld	(de),a
(1) 3668/    1004 : 78                  		ld	a,b
(1) 3669/    1005 : CF                  		rst	8
(1) 3670/    1006 : 12                  		ld	(de),a
(1) 3671/    1007 : 0F                  		rrca
(1) 3672/    1008 : 12                  		ld	(de),a
(1) 3673/    1009 : 0F                  		rrca
(1) 3674/    100A : 12                  		ld	(de),a
(1) 3675/    100B : 0F                  		rrca
(1) 3676/    100C : 12                  		ld	(de),a
(1) 3677/    100D : 0F                  		rrca
(1) 3678/    100E : CF                  		rst	8
(1) 3679/    100F : 12                  		ld	(de),a
(1) 3680/    1010 : 0F                  		rrca
(1) 3681/    1011 : 12                  		ld	(de),a
(1) 3682/    1012 : 0F                  		rrca
(1) 3683/    1013 : 12                  		ld	(de),a
(1) 3684/    1014 : 0F                  		rrca
(1) 3685/    1015 : 12                  		ld	(de),a
(1) 3686/    1016 : D1                  		pop	de
(1) 3687/    1017 : CB FC               		set	7,h
(1) 3688/    1019 : CF                  		rst	8
(1) 3689/    101A :                     	; Transfer ROM data in packets
(1) 3690/    101A :                     	; while playing the cache'd sample
(1) 3691/    101A :                     	; *** CRITICAL PROCESS ***
(1) 3692/    101A :                     	;
(1) 3693/    101A :                     	; pseudo-ref for ldir:
(1) 3694/    101A :                     	; ld (de),(hl)	; load memory (hl) to (de)
(1) 3695/    101A :                     	; inc de	; incr de + 1
(1) 3696/    101A :                     	; inc hl	; incr hl + 1
(1) 3697/    101A :                     	; dec bc	; decr bc - 1
(1) 3698/    101A : 06 00               		ld	b,0
(1) 3699/    101C : 79                  		ld	a,c		; a - Size counter
(1) 3700/    101D : D6 0A               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3701/    101F : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3702/    1021 :                     .x68kloop:
(1) 3703/    1021 : CF                  		rst	8
(1) 3704/    1022 : 00                  		nop
(1) 3705/    1023 : 0E 09               		ld	c,MAX_TRFRPZ-1
(1) 3706/    1025 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3707/    1029 : C4 43 10            		call	nz,.x68klpwt
(1) 3708/    102C : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3709/    102E : CF                  		rst	8
(1) 3710/    102F : 00                  		nop
(1) 3711/    1030 : D6 09               		sub	a,MAX_TRFRPZ-1
(1) 3712/    1032 : D2 21 10            		jp	nc,.x68kloop
(1) 3713/    1035 :                     ; last block
(1) 3714/    1035 :                     .x68klast:
(1) 3715/    1035 : C6 0A               		add	a,MAX_TRFRPZ
(1) 3716/    1037 : 4F                  		ld	c,a
(1) 3717/    1038 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3718/    103C : C4 43 10            		call	nz,.x68klpwt
(1) 3719/    103F : ED B0               		ldir
(1) 3720/    1041 : CF                  		rst	8
(1) 3721/    1042 : C9                  		ret
(1) 3722/    1043 :                     
(1) 3723/    1043 :                     ; Wait here until Genesis unlocks ROM
(1) 3724/    1043 :                     .x68klpwt:
(1) 3725/    1043 : 00                  		nop
(1) 3726/    1044 : 00                  		nop
(1) 3731/    1045 : CF                  		rst	8
(1) 3736/    1046 : 00                  		nop
(1) 3737/    1047 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3738/    104B : 20 F6               		jr	nz,.x68klpwt
(1) 3739/    104D : C9                  		ret
(1) 3740/    104E :                     
(1) 3741/    104E :                     ; ====================================================================
(1) 3742/    104E :                     ; ----------------------------------------------------------------
(1) 3743/    104E :                     ; Sound chip routines
(1) 3744/    104E :                     ; ----------------------------------------------------------------
(1) 3745/    104E :                     
(1) 3746/    104E :                     ; --------------------------------------------------------
(1) 3747/    104E :                     ; chip_env
(1) 3748/    104E :                     ;
(1) 3749/    104E :                     ; Process the PSG
(1) 3750/    104E :                     ; --------------------------------------------------------
(1) 3751/    104E :                     
(1) 3752/    104E :                     chip_env:
(1) 3756/    104E : FD 21 0E 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3757/    1052 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3758/    1056 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3759/    1058 : 06 04               		ld	b,4			; b - 4 channels
(1) 3760/    105A :                     .vloop:
(1) 3761/    105A : CF                  		rst	8
(1) 3762/    105B : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3763/    105E : FD 36 00 00         		ld	(iy+COM),0
(1) 3764/    1062 :                     
(1) 3765/    1062 :                     	; ----------------------------
(1) 3766/    1062 :                     	; bit 2 - stop sound
(1) 3767/    1062 : CB 53               		bit	2,e
(1) 3768/    1064 : 28 0C               		jr	z,.ckof
(1) 3769/    1066 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3770/    106A : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3771/    106E : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3772/    1072 :                     .ckof:
(1) 3773/    1072 :                     	; ----------------------------
(1) 3774/    1072 :                     	; bit 1 - key off
(1) 3775/    1072 : CB 4B               		bit	1,e
(1) 3776/    1074 : 28 0F               		jr      z,.ckon
(1) 3777/    1076 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3778/    1079 : B7                  		or	a
(1) 3779/    107A : 28 09               		jr	z,.ckon
(1) 3780/    107C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3781/    1080 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3782/    1084 : CF                  		rst	8
(1) 3783/    1085 :                     .ckon:
(1) 3784/    1085 :                     	; ----------------------------
(1) 3785/    1085 :                     	; bit 0 - key on
(1) 3786/    1085 : CB 43               		bit	0,e
(1) 3787/    1087 : 28 1A               		jr	z,.envproc
(1) 3788/    1089 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3789/    108D : 78                  		ld	a,b
(1) 3790/    108E : FE 04               		cp	4			; NOISE channel?
(1) 3791/    1090 : 20 08               		jr	nz,.nskip
(1) 3792/    1092 : CF                  		rst	8			; Set NOISE mode
(1) 3793/    1093 : 3A 2F 00            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3794/    1096 : B1                  		or	c
(1) 3795/    1097 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3796/    109A :                     .nskip:
(1) 3797/    109A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3798/    109E : CF                  		rst	8
(1) 3799/    109F : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3800/    10A3 :                     .nblock:
(1) 3801/    10A3 :                     
(1) 3802/    10A3 :                     	; ----------------------------
(1) 3803/    10A3 :                     	; Process effects
(1) 3804/    10A3 :                     	; ----------------------------
(1) 3805/    10A3 :                     .envproc:
(1) 3806/    10A3 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3807/    10A6 : B7                  		or	a			; no modes
(1) 3808/    10A7 : CA 2D 11            		jp	z,.vedlp
(1) 3809/    10AA : FE 01               		cp 	001b			; Attack mode
(1) 3810/    10AC : 20 2C               		jr	nz,.chk2
(1) 3811/    10AE : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3812/    10B2 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3813/    10B5 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3814/    10B8 : B7                  		or	a
(1) 3815/    10B9 : 28 16               		jr	z,.atkend
(1) 3816/    10BB : 57                  		ld	d,a			; c - attack rate
(1) 3817/    10BC : 7B                  		ld	a,e			; a - attack level
(1) 3818/    10BD : CF                  		rst	8
(1) 3819/    10BE : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3820/    10C1 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3821/    10C2 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3822/    10C4 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3823/    10C6 : BB                  		cp	e			; attack rate == level?
(1) 3824/    10C7 : 38 08               		jr	c,.atkend
(1) 3825/    10C9 : 28 06               		jr	z,.atkend
(1) 3826/    10CB : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3827/    10CE : CF                  		rst	8
(1) 3828/    10CF : 18 5C               		jr	.vedlp
(1) 3829/    10D1 :                     .atkend:
(1) 3830/    10D1 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3831/    10D4 :                     .atkzero:
(1) 3832/    10D4 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3833/    10D8 : 18 53               		jr	.vedlp
(1) 3834/    10DA :                     .chk2:
(1) 3835/    10DA :                     
(1) 3836/    10DA : FE 02               		cp	010b			; Decay mode
(1) 3837/    10DC : 20 31               		jr	nz,.chk4
(1) 3838/    10DE :                     .dectmr:
(1) 3839/    10DE : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3840/    10E2 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3841/    10E5 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3842/    10E8 : BB                  		cp	e
(1) 3843/    10E9 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3844/    10EB : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3845/    10ED : CF                  		rst	8
(1) 3846/    10EE : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3847/    10F1 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3848/    10F3 : BB                  		cp	e			; compare level
(1) 3849/    10F4 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3850/    10F6 : 18 08               		jr	.dksav
(1) 3851/    10F8 :                     .dkadd:
(1) 3852/    10F8 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3853/    10FB : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3854/    10FD : BB                  		cp	e			; compare level
(1) 3855/    10FE : 30 05               		jr	nc,.dkyend
(1) 3856/    1100 :                     .dksav:
(1) 3857/    1100 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3858/    1103 : 18 28               		jr	.vedlp
(1) 3859/    1105 :                     .dkyend:
(1) 3860/    1105 : CF                  		rst	8
(1) 3861/    1106 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3862/    1109 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3863/    110D : 18 1E               		jr	.vedlp
(1) 3864/    110F :                     .chk4:
(1) 3865/    110F : FE 04               		cp	100b			; Sustain phase
(1) 3866/    1111 : 20 1A               		jr	nz,.vedlp
(1) 3867/    1113 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3868/    1117 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3869/    111A : CF                  		rst	8
(1) 3870/    111B : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3871/    111E : 38 05               		jr	c,.killenv		; release done
(1) 3872/    1120 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3873/    1123 : 18 08               		jr	.vedlp
(1) 3874/    1125 :                     .killenv:
(1) 3875/    1125 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3876/    1129 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3877/    112D :                     .vedlp:
(1) 3878/    112D :                     	; ----------------------------
(1) 3879/    112D :                     	; PSG UPDATE
(1) 3880/    112D :                     	; ----------------------------
(1) 3881/    112D : FD 7E 28            		ld	a,(iy+FLG)
(1) 3882/    1130 : B7                  		or	a
(1) 3883/    1131 : 28 72               		jr	z,.noupd
(1) 3884/    1133 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3885/    1137 : 59                  		ld	e,c
(1) 3886/    1138 : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3887/    113B : 57                  		ld	d,a
(1) 3888/    113C : E6 03               		and	011b
(1) 3889/    113E : FE 03               		cp	011b
(1) 3890/    1140 : 20 1D               		jr	nz,.normal
(1) 3891/    1142 : CF                  		rst	8
(1) 3892/    1143 : 78                  		ld	a,b		; Channel 4?
(1) 3893/    1144 : FE 03               		cp	3
(1) 3894/    1146 : 28 13               		jr	z,.silnc_3
(1) 3895/    1148 : FE 04               		cp	4
(1) 3896/    114A : 20 18               		jr	nz,.do_nfreq
(1) 3897/    114C : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3898/    114F : 57                  		ld	d,a
(1) 3899/    1150 : E6 03               		and	011b
(1) 3900/    1152 : CF                  		rst	8
(1) 3901/    1153 : FE 03               		cp	011b
(1) 3902/    1155 : 20 30               		jr	nz,.vonly
(1) 3903/    1157 : 1E C0               		ld	e,0C0h
(1) 3904/    1159 : 18 09               		jr	.do_nfreq
(1) 3905/    115B :                     .silnc_3:
(1) 3906/    115B : 3E FF               		ld	a,-1
(1) 3907/    115D : 18 32               		jr	.vlmuch
(1) 3908/    115F :                     .normal:
(1) 3909/    115F : 78                  		ld	a,b
(1) 3910/    1160 : FE 04               		cp	4
(1) 3911/    1162 : 28 23               		jr	z,.vonly
(1) 3912/    1164 :                     .do_nfreq:
(1) 3913/    1164 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3914/    1167 : FD 66 20            		ld	h,(iy+DTH)
(1) 3915/    116A :                     	; freq effects go here
(1) 3916/    116A :                     	; (save e FIRST.)
(1) 3917/    116A :                     	;	push	de
(1) 3918/    116A :                     	;	pop	de
(1) 3919/    116A : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3920/    116B : E6 0F               		and	00001111b
(1) 3921/    116D : B3                  		or	e		; OR with channel set in e
(1) 3922/    116E : CF                  		rst	8
(1) 3923/    116F : DD 77 00            		ld	(ix),a		; write it
(1) 3924/    1172 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3925/    1173 : 0F                  		rrca
(1) 3926/    1174 : 0F                  		rrca
(1) 3927/    1175 : 0F                  		rrca
(1) 3928/    1176 : 0F                  		rrca
(1) 3929/    1177 : E6 0F               		and	00001111b
(1) 3930/    1179 : 5F                  		ld	e,a
(1) 3931/    117A : 7C                  		ld	a,h		; Grab MSB bits
(1) 3932/    117B : CF                  		rst	8
(1) 3933/    117C : 07                  		rlca
(1) 3934/    117D : 07                  		rlca
(1) 3935/    117E : 07                  		rlca
(1) 3936/    117F : 07                  		rlca
(1) 3937/    1180 : E6 30               		and	00110000b
(1) 3938/    1182 : B3                  		or	e
(1) 3939/    1183 : DD 77 00            		ld	(ix),a
(1) 3940/    1186 : CF                  		rst	8
(1) 3941/    1187 :                     .vonly:
(1) 3942/    1187 : FD 7E 30            		ld	a,(iy+MVOL)		; c - Level
(1) 3943/    118A : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3944/    118D : 30 02               		jr	nc,.vlmuch
(1) 3945/    118F : 3E FF               		ld	a,-1
(1) 3946/    1191 :                     .vlmuch:
(1) 3947/    1191 : CB 3F               		srl	a			; (Level >> 4)
(1) 3948/    1193 : CB 3F               		srl	a
(1) 3949/    1195 : CB 3F               		srl	a
(1) 3950/    1197 : CF                  		rst	8
(1) 3951/    1198 : CB 3F               		srl	a
(1) 3952/    119A : E6 0F               		and	00001111b		; Filter volume value
(1) 3953/    119C : B1                  		or	c			; and OR with current channel
(1) 3954/    119D : F6 90               		or	90h			; Set volume-set mode
(1) 3955/    119F : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3956/    11A2 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3957/    11A5 :                     .noupd:
(1) 3958/    11A5 :                     	; ----------------------------
(1) 3959/    11A5 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3960/    11A7 : 79                  		ld	a,c
(1) 3961/    11A8 : CF                  		rst	8
(1) 3962/    11A9 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3963/    11AB : 4F                  		ld	c,a
(1) 3964/    11AC : 05                  		dec	b
(1) 3965/    11AD : C2 5A 10            		jp	nz,.vloop
(1) 3966/    11B0 : C9                  		ret
(1) 3967/    11B1 :                     
(1) 3968/    11B1 :                     ; ---------------------------------------------
(1) 3969/    11B1 :                     ; FM register writes
(1) 3970/    11B1 :                     ;
(1) 3971/    11B1 :                     ; Input:
(1) 3972/    11B1 :                     ; d - ctrl
(1) 3973/    11B1 :                     ; e - data
(1) 3974/    11B1 :                     ; ---------------------------------------------
(1) 3975/    11B1 :                     
(1) 3976/    11B1 :                     ; c - KeyID
(1) 3977/    11B1 :                     fm_autoreg:
(1) 3978/    11B1 : CB 51               		bit	2,c
(1) 3979/    11B3 : 20 0B               		jr	nz,fm_send_2
(1) 3980/    11B5 :                     
(1) 3981/    11B5 :                     ; Channels 1-3 and global registers
(1) 3982/    11B5 :                     fm_send_1:
(1) 3983/    11B5 : 7A                  		ld	a,d
(1) 3984/    11B6 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3985/    11B9 : 00                  		nop
(1) 3986/    11BA : 7B                  		ld	a,e
(1) 3987/    11BB : 32 01 40            		ld	(Zym_data_1),a
(1) 3988/    11BE : 00                  		nop
(1) 3989/    11BF : C9                  		ret
(1) 3990/    11C0 :                     ; Channels 4-6
(1) 3991/    11C0 :                     fm_send_2:
(1) 3992/    11C0 : 7A                  		ld	a,d
(1) 3993/    11C1 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3994/    11C4 : 00                  		nop
(1) 3995/    11C5 : 7B                  		ld	a,e
(1) 3996/    11C6 : 32 03 40            		ld	(Zym_data_2),a
(1) 3997/    11C9 : 00                  		nop
(1) 3998/    11CA : C9                  		ret
(1) 3999/    11CB :                     
(1) 4000/    11CB :                     ; --------------------------------------------------------
(1) 4001/    11CB :                     ; brute-force WAVE ON/OFF playback
(1) 4002/    11CB :                     ; --------------------------------------------------------
(1) 4003/    11CB :                     
(1) 4004/    11CB :                     dac_on:
(1) 4005/    11CB : 3E 2B               		ld	a,2Bh
(1) 4006/    11CD : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4007/    11D0 : 3E 80               		ld	a,80h
(1) 4008/    11D2 : 32 01 40            		ld	(Zym_data_1),a
(1) 4009/    11D5 : 3E D9               		ld 	a,zopcExx
(1) 4010/    11D7 : 32 08 00            		ld	(dac_me),a
(1) 4011/    11DA : 3E F5               		ld 	a,zopcPushAf
(1) 4012/    11DC : 32 20 00            		ld	(dac_fill),a
(1) 4013/    11DF : C9                  		ret
(1) 4014/    11E0 :                     dac_off:
(1) 4015/    11E0 : 3E 2B               		ld	a,2Bh
(1) 4016/    11E2 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4017/    11E5 : 3E 00               		ld	a,00h
(1) 4018/    11E7 : 32 01 40            		ld	(Zym_data_1),a
(1) 4019/    11EA : 3E C9               		ld 	a,zopcRet
(1) 4020/    11EC : 32 08 00            		ld	(dac_me),a
(1) 4021/    11EF : 3E C9               		ld 	a,zopcRet
(1) 4022/    11F1 : 32 20 00            		ld	(dac_fill),a
(1) 4023/    11F4 : C9                  		ret
(1) 4024/    11F5 :                     
(1) 4025/    11F5 :                     ; --------------------------------------------------------
(1) 4026/    11F5 :                     ; dac_play
(1) 4027/    11F5 :                     ;
(1) 4028/    11F5 :                     ; Plays a new sample
(1) 4029/    11F5 :                     ;
(1) 4030/    11F5 :                     ; NOTE:
(1) 4031/    11F5 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4032/    11F5 :                     ; getting here.
(1) 4033/    11F5 :                     ; --------------------------------------------------------
(1) 4034/    11F5 :                     
(1) 4035/    11F5 :                     dac_play:
(1) 4036/    11F5 : F3                  		di
(1) 4037/    11F6 : CD E0 11            		call	dac_off
(1) 4038/    11F9 : D9                  		exx				; flip exx regs
(1) 4039/    11FA : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4040/    11FD : ED 5B F3 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4041/    1201 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4042/    1204 : D9                  		exx				; move them back
(1) 4043/    1205 : 2A EA 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4044/    1208 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4045/    120B : 22 96 17            		ld	(dDacPntr),hl
(1) 4046/    120E : 32 98 17            		ld	(dDacPntr+2),a
(1) 4047/    1211 : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4048/    1214 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4049/    1217 : 22 99 17            		ld	(dDacCntr),hl
(1) 4050/    121A : 32 9B 17            		ld	(dDacCntr+2),a
(1) 4051/    121D : AF                  		xor	a
(1) 4052/    121E : 32 37 00            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4053/    1221 : CD 29 12            		call	dac_refill
(1) 4054/    1224 : CD CB 11            		call	dac_on
(1) 4055/    1227 : FB                  		ei
(1) 4056/    1228 : C9                  		ret
(1) 4057/    1229 :                     
(1) 4058/    1229 :                     ; --------------------------------------------------------
(1) 4059/    1229 :                     
(1) 4060/    1229 :                     dac_refill:
(1) 4061/    1229 : CF                  		rst	8
(1) 4062/    122A : C5                  		push	bc
(1) 4063/    122B : D5                  		push	de
(1) 4064/    122C : E5                  		push	hl
(1) 4065/    122D : 3A F5 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4066/    1230 : FE 07               		cp	111b
(1) 4067/    1232 : D2 E8 12            		jp	nc,.dacfill_end
(1) 4068/    1235 : 3A 9B 17            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4069/    1238 : 2A 99 17            		ld	hl,(dDacCntr)
(1) 4070/    123B : 01 80 00            		ld	bc,80h
(1) 4071/    123E : 37                  		scf
(1) 4072/    123F : 3F                  		ccf
(1) 4073/    1240 : ED 42               		sbc	hl,bc
(1) 4074/    1242 : DE 00               		sbc	a,0
(1) 4075/    1244 : 32 9B 17            		ld	(dDacCntr+2),a
(1) 4076/    1247 : 22 99 17            		ld	(dDacCntr),hl
(1) 4077/    124A : 16 1D               		ld	d,dWaveBuff>>8
(1) 4078/    124C : B7                  		or	a
(1) 4079/    124D : FA 77 12            		jp	m,.dac_over
(1) 4080/    1250 : 3A 37 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4081/    1253 : 5F                  		ld	e,a
(1) 4082/    1254 : C6 80               		add 	a,80h
(1) 4083/    1256 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4084/    1259 : 2A 96 17            		ld	hl,(dDacPntr)
(1) 4085/    125C : 3A 98 17            		ld	a,(dDacPntr+2)
(1) 4086/    125F : CD 95 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4087/    1262 : 2A 96 17            		ld	hl,(dDacPntr)
(1) 4088/    1265 : 3A 98 17            		ld	a,(dDacPntr+2)
(1) 4089/    1268 : 01 80 00            		ld	bc,80h
(1) 4090/    126B : 09                  		add	hl,bc
(1) 4091/    126C : CE 00               		adc	a,0
(1) 4092/    126E : 22 96 17            		ld	(dDacPntr),hl
(1) 4093/    1271 : 32 98 17            		ld	(dDacPntr+2),a
(1) 4094/    1274 : C3 EB 12            		jp	.dacfill_ret
(1) 4095/    1277 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4096/    1277 :                     ; but the USER won't notice it.
(1) 4097/    1277 :                     .dac_over:
(1) 4098/    1277 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4099/    1279 : 3A F5 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4100/    127C : E6 01               		and	001b
(1) 4101/    127E : C2 A1 12            		jp	nz,.dacfill_loop
(1) 4102/    1281 : 7D                  		ld	a,l
(1) 4103/    1282 : C6 80               		add	a,80h
(1) 4104/    1284 : 4F                  		ld	c,a
(1) 4105/    1285 : 06 00               		ld	b,0
(1) 4106/    1287 : C5                  		push	bc
(1) 4107/    1288 : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4108/    128B : 5F                  		ld	e,a
(1) 4109/    128C : C6 80               		add	a,80h
(1) 4110/    128E : 32 37 00            		ld	(dDacFifoMid),a
(1) 4111/    1291 : C1                  		pop	bc
(1) 4112/    1292 : 79                  		ld	a,c
(1) 4113/    1293 : B0                  		or	b
(1) 4114/    1294 : 28 52               		jr	z,.dacfill_end
(1) 4115/    1296 : 2A 96 17            		ld	hl,(dDacPntr)
(1) 4116/    1299 : 3A 98 17            		ld	a,(dDacPntr+2)
(1) 4117/    129C : CD 95 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4118/    129F : 18 47               		jr	.dacfill_end
(1) 4119/    12A1 :                     ; loop sample
(1) 4120/    12A1 :                     .dacfill_loop:
(1) 4121/    12A1 : C5                  		push	bc
(1) 4122/    12A2 : D5                  		push	de
(1) 4123/    12A3 : 3A F2 1C            		ld	a,(wave_Loop+2)
(1) 4124/    12A6 : 4F                  		ld	c,a
(1) 4125/    12A7 : ED 5B F0 1C         		ld	de,(wave_Loop)
(1) 4126/    12AB : 2A EA 1C            		ld	hl,(wave_Start)
(1) 4127/    12AE : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4128/    12B1 : 81                  		add	a,c
(1) 4129/    12B2 : 19                  		add	hl,de
(1) 4130/    12B3 : CE 00               		adc	a,0
(1) 4131/    12B5 : 22 96 17            		ld	(dDacPntr),hl
(1) 4132/    12B8 : 32 98 17            		ld	(dDacPntr+2),a
(1) 4133/    12BB : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4134/    12BE : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4135/    12C1 : 91                  		sub	a,c
(1) 4136/    12C2 : 37                  		scf
(1) 4137/    12C3 : 3F                  		ccf
(1) 4138/    12C4 : ED 52               		sbc	hl,de
(1) 4139/    12C6 : DE 00               		sbc	a,0
(1) 4140/    12C8 : 22 99 17            		ld	(dDacCntr),hl
(1) 4141/    12CB : 32 9B 17            		ld	(dDacCntr+2),a
(1) 4142/    12CE : D1                  		pop	de
(1) 4143/    12CF : C1                  		pop	bc
(1) 4144/    12D0 : 78                  		ld	a,b
(1) 4145/    12D1 : B1                  		or	c
(1) 4146/    12D2 : 28 17               		jr	z,.dacfill_ret
(1) 4147/    12D4 : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4148/    12D7 : 5F                  		ld	e,a
(1) 4149/    12D8 : C6 80               		add	a,80h
(1) 4150/    12DA : 32 37 00            		ld	(dDacFifoMid),a
(1) 4151/    12DD : 2A 96 17            		ld	hl,(dDacPntr)
(1) 4152/    12E0 : 3A 98 17            		ld	a,(dDacPntr+2)
(1) 4153/    12E3 : CD 95 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4154/    12E6 : 18 03               		jr	.dacfill_ret
(1) 4155/    12E8 :                     .dacfill_end:
(1) 4156/    12E8 : CD E0 11            		call	dac_off		; DAC finished
(1) 4157/    12EB :                     .dacfill_ret:
(1) 4158/    12EB : E1                  		pop	hl
(1) 4159/    12EC : D1                  		pop	de
(1) 4160/    12ED : C1                  		pop	bc
(1) 4161/    12EE : C9                  		ret
(1) 4162/    12EF :                     
(1) 4163/    12EF :                     ; ----------------------------------------------------------------
(1) 4164/    12EF :                     ; gema_lastbank
(1) 4165/    12EF :                     ;
(1) 4166/    12EF :                     ; Two purposes:
(1) 4167/    12EF :                     ; - Set the BANK to the very last part of memory for the
(1) 4168/    12EF :                     ;   readRom to read from RAM
(1) 4169/    12EF :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4170/    12EF :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4171/    12EF :                     ;
(1) 4172/    12EF :                     ; Uses:
(1) 4173/    12EF :                     ; hl,b
(1) 4174/    12EF :                     ; ----------------------------------------------------------------
(1) 4175/    12EF :                     
(1) 4176/    12EF :                     gema_lastbank:
(1) 4177/    12EF : 21 00 60            		ld	hl,6000h
(1) 4178/    12F2 : 06 09               		ld	b,9		; 9 bits
(1) 4179/    12F4 :                     .write:
(1) 4180/    12F4 : 36 01               		ld	(hl),1
(1) 4181/    12F6 : 10 FC               		djnz	.write
(1) 4182/    12F8 : C9                  		ret
(1) 4183/    12F9 :                     
(1) 4184/    12F9 :                     ; ====================================================================
(1) 4185/    12F9 :                     ; ----------------------------------------------------------------
(1) 4186/    12F9 :                     ; Frequency tables
(1) 4187/    12F9 :                     ; ----------------------------------------------------------------
(1) 4188/    12F9 :                     
(1) 4189/    12F9 : 84 02               fmFreq_List:	dw 644
(1) 4190/    12FB : A9 02               		dw 681
(1) 4191/    12FD : D2 02               		dw 722
(1) 4192/    12FF : FD 02               		dw 765
(1) 4193/    1301 : 2A 03               		dw 810
(1) 4194/    1303 : 5A 03               		dw 858
(1) 4195/    1305 : 8E 03               		dw 910
(1) 4196/    1307 : C4 03               		dw 964
(1) 4197/    1309 : FD 03               		dw 1021
(1) 4198/    130B : 39 04               		dw 1081
(1) 4199/    130D : 7A 04               		dw 1146
(1) 4200/    130F : BE 04               		dw 1214
(1) 4201/    1311 :                     
(1) 4202/    1311 :                     ; ----------------------------------------
(1) 4203/    1311 :                     ; DAC and PWM
(1) 4204/    1311 :                     ; ----------------------------------------
(1) 4205/    1311 :                     
(1) 4206/    1311 :                     psgFreq_List:
(1) 4207/    1311 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4208/    1311 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4209/    1311 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4210/    1311 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1317 : FF FF FF FF FF FF 
             131D : FF FF FF FF FF FF 
             1323 : F8 03 BF 03 89 03 
(1) 4211/    1329 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             132F : CE 02 A5 02 80 02 
             1335 : 5C 02 3A 02 1A 02 
             133B : FB 01 DF 01 C4 01 
(1) 4212/    1341 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             1347 : 67 01 53 01 40 01 
             134D : 2E 01 1D 01 0D 01 
             1353 : FE 00 EF 00 E2 00 
(1) 4213/    1359 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             135F : B4 00 A9 00 A0 00 
             1365 : 97 00 8F 00 87 00 
             136B : 7F 00 78 00 71 00 
(1) 4214/    1371 : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             1377 : 5A 00 55 00 50 00 
             137D : 4B 00 47 00 43 00 
             1383 : 40 00 3C 00 39 00 
(1) 4215/    1389 : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             138F : 2D 00 2B 00 28 00 
             1395 : 26 00 24 00 22 00 
             139B : 20 00 1F 00 1D 00 
(1) 4216/    13A1 : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             13A7 : 17 00 16 00 15 00 
             13AD : 13 00 12 00 11 00 
             13B3 : 10 00 09 00 01 00 
(1) 4217/    13B9 :                     
(1) 4218/    13B9 :                     ; ----------------------------------------
(1) 4219/    13B9 :                     ; DAC and PWM shared list
(1) 4220/    13B9 :                     ; ----------------------------------------
(1) 4221/    13B9 :                     
(1) 4222/    13B9 :                     wavFreq_List:
(1) 4223/    13B9 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4224/    13B9 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4225/    13B9 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4226/    13B9 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4227/    13B9 : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0051h,0056h,005Bh,0060h,0066h,006Ch,0073h,0079h	; x-3 4000 ok
             13BF : 4C 00 51 00 56 00 
             13C5 : 5B 00 60 00 66 00 
             13CB : 6C 00 73 00 79 00 
(1) 4228/    13D1 : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,0099h,00A2h,00ACh,00B6h,00C1h,00CCh,00D8h,00E5h,00F2h	; x-4 8000 ok
             13D7 : 99 00 A2 00 AC 00 
             13DD : B6 00 C1 00 CC 00 
             13E3 : D8 00 E5 00 F2 00 
(1) 4229/    13E9 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,0132h,0145h,0158h,016Ch,0182h,0198h,01AEh,01C7h,01E0h	; x-5 16000 ok
             13EF : 32 01 45 01 58 01 
             13F5 : 6C 01 82 01 98 01 
             13FB : AE 01 C7 01 E0 01 
(1) 4230/    1401 : 00 02 20 02 40 02   	dw 0200h,0220h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0328h,0352h,0390h,03C8h	; x-6 32000 bad/ok
             1407 : 60 02 80 02 A0 02 
             140D : D0 02 F8 02 28 03 
             1413 : 52 03 90 03 C8 03 
(1) 4231/    1419 : 00 04               	dw 0400h;,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4232/    141B :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4233/    141B :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4234/    141B :                     
(1) 4235/    141B :                     ; ----------------------------------------
(1) 4236/    141B :                     ; SegaCD PCM
(1) 4237/    141B :                     ; ----------------------------------------
(1) 4238/    141B :                     wavFreq_CdPcm:
(1) 4239/    141B :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4240/    141B :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4241/    141B :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4242/    141B : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             1421 : 28 01 3C 01 4C 01 
             1427 : 60 01 7C 01 88 01 
             142D : AA 01 BC 01 DC 01 
(1) 4243/    1433 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             1439 : 58 02 7C 02 A0 02 
             143F : C8 02 FC 02 1C 03 
             1445 : 54 03 7C 03 B8 03 
(1) 4244/    144B : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1451 : AC 04 EC 04 40 05 
             1457 : 90 05 E4 05 3C 06 
             145D : 98 06 04 07 60 07 
(1) 4245/    1463 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             1469 : 60 09 F0 09 64 0A 
             146F : 04 0B AA 0B 60 0C 
             1475 : 18 0D E4 0D B8 0E 
(1) 4246/    147B : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 untested
             1481 : 80 12 9C 13 C8 14 
             1487 : 24 16 4C 17 DC 18 
             148D : 38 1A E0 1B 94 1D 
(1) 4247/    1493 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4248/    1493 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4249/    1493 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4250/    1493 :                     
(1) 4251/    1493 :                     ; ====================================================================
(1) 4252/    1493 :                     ; ----------------------------------------------------------------
(1) 4253/    1493 :                     ; Chip buffers
(1) 4254/    1493 :                     ; ----------------------------------------------------------------
(1) 4255/    1493 :                     
(1) 4256/    1493 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             1499 : 00 00             
(1) 4257/    149B : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             14A1 : 00 00             
(1) 4258/    14A3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14A9 : 00 00             
(1) 4259/    14AB : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 24 - Volume
             14B1 : FF FF             
(1) 4260/    14B3 : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 32 - CURRENT Panning %RRRRLLLL
             14B9 : FF FF             
(1) 4261/    14BB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             14C1 : 00 00             
(1) 4262/    14C3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14C9 : 00 00             
(1) 4263/    14CB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14D1 : 00 00             
(1) 4264/    14D3 :                     
(1) 4265/    14D3 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14D9 : 00 00             
(1) 4266/    14DB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14E1 : 00 00             
(1) 4267/    14E3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14E9 : 00 00             
(1) 4268/    14EB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             14F1 : 00 00             
(1) 4269/    14F3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             14F9 : 00 00             
(1) 4270/    14FB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1501 : 00 00             
(1) 4271/    1503 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1509 : 00 00             
(1) 4272/    150B :                     
(1) 4273/    150B : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4274/    150F : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4275/    1513 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4276/    1517 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4277/    151B : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4278/    151F : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4279/    1523 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4280/    1527 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4281/    152B : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4282/    152F : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4283/    1533 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4284/    1537 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4285/    153B : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4286/    153F : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4287/    1543 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4288/    1547 :                     
(1) 4289/    1547 :                     ; --------------------------------------------------------
(1) 4290/    1547 :                     fmcach_1	ds 28h
(1) 4291/    156F :                     fmcach_2	ds 28h
(1) 4292/    1597 :                     fmcach_3	ds 28h
(1) 4293/    15BF :                     fmcach_4	ds 28h
(1) 4294/    15E7 :                     fmcach_5	ds 28h
(1) 4295/    160F :                     fmcach_6	ds 28h
(1) 4296/    1637 :                     fmlist_rsave	ds 4*3		; 4 bytes per channel: 0000h,00h,00h
(1) 4297/    1643 :                     trkInfoCach	ds 4
(1) 4298/    1647 :                     		ds 4*3		; _rsave followup
(1) 4299/    1653 :                     
(1) 4300/    1653 :                     ; ====================================================================
(1) 4301/    1653 :                     ; ----------------------------------------------------------------
(1) 4302/    1653 :                     ; Track buffers
(1) 4303/    1653 :                     ; ----------------------------------------------------------------
(1) 4304/    1653 :                     
(1) 4305/    1653 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4306/    1673 :                     trkHdrs_1	ds 8*4
(1) 4307/    1693 :                     trkHdrs_2	ds 8*4
(1) 4308/    16B3 :                     trkBlks_0	ds 8
(1) 4309/    16BB :                     trkBlks_1	ds 8
(1) 4310/    16C3 :                     trkBlks_2	ds 8
(1) 4311/    16CB :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4312/    170A :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4313/    1749 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4314/    1788 : 47 15               fmcach_list:	dw fmcach_1
(1) 4315/    178A : 6F 15               		dw fmcach_2
(1) 4316/    178C : 97 15               		dw fmcach_3
(1) 4317/    178E : 00                  marsUpd		db 0			; Flag to request a PWM transfer
(1) 4318/    178F : 00                  mcdUpd		db 0			; Flag to request a PCM transfer
(1) 4319/    1790 : BF 15               		dw fmcach_4		; Followup
(1) 4320/    1792 : E7 15               		dw fmcach_5
(1) 4321/    1794 : 0F 16               		dw fmcach_6
(1) 4322/    1796 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4323/    1799 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4324/    179C :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4325/    17AA :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4326/    17AC :                     sampleHead	ds 006h
(1) 4327/    17B2 :                     instListOut	ds 8
(1) 4328/    17BA :                     
(1) 4329/    17BA :                     ; ====================================================================
(1) 4330/    17BA :                     ; --------------------------------------------------------
(1) 4331/    17BA :                     ; MASTER buffers list
(1) 4332/    17BA :                     ;
(1) 4333/    17BA :                     ; dw track_buffer
(1) 4334/    17BA :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4335/    17BA :                     ;
(1) 4336/    17BA :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4337/    17BA :                     ; --------------------------------------------------------
(1) 4338/    17BA :                     
(1) 4339/    17BA :                     nikona_BuffList:
(1) 4340/    17BA : CB 16 B3 16 53 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             17C0 : 00 1F             
(1) 4341/    17C2 : 0A 17 BB 16 73 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             17C8 : 20 1F             
(1) 4342/    17CA : 49 17 C3 16 93 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             17D0 : 40 1F             
(1) 4343/    17D2 :                     nikona_BuffList_e:
(1) 4344/    17D2 : FF FF               	dw -1	; ENDOFLIST
(1) 4345/    17D4 :                     
(1) 4346/    17D4 :                     ; ====================================================================
(1) 4347/    17D4 :                     ; --------------------------------------------------------
(1) 4348/    17D4 :                     ; Channel tables
(1) 4349/    17D4 :                     ;
(1) 4350/    17D4 :                     ; PSG   80h
(1) 4351/    17D4 :                     ; PSGN  90h
(1) 4352/    17D4 :                     ; FM   0A0h
(1) 4353/    17D4 :                     ; FM3  0B0h
(1) 4354/    17D4 :                     ; DAC  0C0h
(1) 4355/    17D4 :                     ; PCM  0D0h
(1) 4356/    17D4 :                     ; PWM  0E0h
(1) 4357/    17D4 :                     ; --------------------------------------------------------
(1) 4358/    17D4 :                     
(1) 4359/    1B00 :                     		org 1B00h			; <-- MUST BE x0h ALIGNED
(1) 4360/    1B00 : 0E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4361/    1B02 : 46 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4362/    1B04 : A0 00               		dw tblFM-tblList		; 0A0h
(1) 4363/    1B06 : E8 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4364/    1B08 : FA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4365/    1B0A : 0E 00               		dw tblPCM-tblList		; 0D0h
(1) 4366/    1B0C : 58 01               		dw tblPWM-tblList		; 0E0h
(1) 4367/    1B0E :                     ; 		dw 0				; 0F0h
(1) 4368/    1B0E :                     ; --------------------------------------------------------
(1) 4369/    1B0E : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B14 : 00 00 00 00       
(1) 4370/    1B18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1E : 00 00             
(1) 4371/    1B20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1B26 : 00 00 00 00       
(1) 4372/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4373/    1B32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1B38 : 00 00 00 00       
(1) 4374/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4375/    1B44 : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1B4A : 00 00 00 00       
(1) 4376/    1B4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B54 : 00 00             
(1) 4377/    1B56 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1B5C : 00 00 00 00       
(1) 4378/    1B60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B66 : 00 00             
(1) 4379/    1B68 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1B6E : 00 00 00 00       
(1) 4380/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4381/    1B7A : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1B80 : 00 00 00 00       
(1) 4382/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4383/    1B8C : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1B92 : 00 00 00 00       
(1) 4384/    1B96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9C : 00 00             
(1) 4385/    1B9E : FF FF               		dw -1	; end-of-list
(1) 4386/    1BA0 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BA6 : 00 00 00 00       
(1) 4387/    1BAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB0 : 00 00             
(1) 4388/    1BB2 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1BB8 : 00 00 00 00       
(1) 4389/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4390/    1BC4 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 4 <--
             1BCA : 00 00 00 00       
(1) 4391/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4392/    1BD6 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 5
             1BDC : 00 00 00 00       
(1) 4393/    1BE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BE6 : 00 00             
(1) 4394/    1BE8 : 00 00 00 02 00 00   tblFM3:		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3 <--
             1BEE : 00 00 00 00       
(1) 4395/    1BF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF8 : 00 00             
(1) 4396/    1BFA : 00 00 00 06 00 00   tblFM6:		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 6 <--
             1C00 : 00 00 00 00       
(1) 4397/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4398/    1C0C : FF FF               		dw -1	; end-of-list
(1) 4399/    1C0E : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C14 : 00 00 00 00       
(1) 4400/    1C18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1E : 00 00             
(1) 4401/    1C20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C26 : 00 00 00 00       
(1) 4402/    1C2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C30 : 00 00             
(1) 4403/    1C32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C38 : 00 00 00 00       
(1) 4404/    1C3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C42 : 00 00             
(1) 4405/    1C44 : FF FF               		dw -1	; end-of-list
(1) 4406/    1C46 : 00 00 00 03 00 00   tblPSGN:	db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Noise
             1C4C : 00 00 00 00       
(1) 4407/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4408/    1C58 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C5E : 00 00 00 00       
(1) 4409/    1C62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C68 : 00 00             
(1) 4410/    1C6A : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C70 : 00 00 00 00       
(1) 4411/    1C74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C7A : 00 00             
(1) 4412/    1C7C : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C82 : 00 00 00 00       
(1) 4413/    1C86 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8C : 00 00             
(1) 4414/    1C8E : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1C94 : 00 00 00 00       
(1) 4415/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4416/    1CA0 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1CA6 : 00 00 00 00       
(1) 4417/    1CAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB0 : 00 00             
(1) 4418/    1CB2 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1CB8 : 00 00 00 00       
(1) 4419/    1CBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC2 : 00 00             
(1) 4420/    1CC4 : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1CCA : 00 00 00 00       
(1) 4421/    1CCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD4 : 00 00             
(1) 4422/    1CD6 : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1CDC : 00 00 00 00       
(1) 4423/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4424/    1CE8 : FF FF               		dw -1	; end-of-list
(1) 4425/    1CEA :                     ; ----------------------------------------------------------------
(1) 4426/    1CEA : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4427/    1CEC : 00                  		db 0
(1) 4428/    1CED : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4429/    1CEF : 00                  		db 0
(1) 4430/    1CF0 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4431/    1CF2 : 00                  		db 0
(1) 4432/    1CF3 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4433/    1CF5 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4434/    1CF6 :                     
(1) 4435/    1CF6 : 00                  tickSpSet	db 0		; **
(1) 4436/    1CF7 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4437/    1CF8 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4438/    1CF9 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4439/    1CFA :                     
(1) 4440/    1CFA :                     ; ====================================================================
(1) 4441/    1CFA :                     ; ----------------------------------------------------------------
(1) 4442/    1CFA :                     ; Special aligned buffers
(1) 4443/    1CFA :                     ;
(1) 4444/    1CFA :                     ; Located at 1D00h
(1) 4445/    1CFA :                     ; ----------------------------------------------------------------
(1) 4446/    1CFA :                     
(1) 4447/    1D00 :                     		org 1D00h
(1) 4448/    1D00 :                     dWaveBuff	ds 100h				; WAVE data buffer: 100h bytes
(1) 4449/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4450/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4451/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4452/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4453/    1F60 :                     
(1) 4454/    1F60 :                     ; ====================================================================
(1) 4455/    1F60 :                     ; ----------------------------------------------------------------
(1) 4456/    1F60 :                     ; Control area
(1) 4457/    1F60 :                     ; * MANUAL ORDER, check gema.asm *
(1) 4458/    1F60 :                     ; ----------------------------------------------------------------
(1) 4459/    1F60 :                     
(1) 4460/    1F60 :                     		org 1F60h
(1) 4461/    1F60 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1) 4462/    1F80 : 00                  commZWrite	db 0				; cmd fifo wptr (from 68k)
(1) 4463/    1F81 : 00                  commZRomBlk	db 0				; 68k ROM block flag
(1) 4464/    1F82 : 00 00               cdRamDst	db 0,0				; ** Z80 destination
(1) 4465/    1F84 : 00 00               cdRamSrc	db 0,0				; ** 68k 24-bit source
(1) 4466/    1F86 : 00                  cdRamSrcB	db 0				; **
(1) 4467/    1F87 : 00                  cdRamLen	db 0				; Size + status flag
(1) 4468/    1F88 : 00                  palMode		db 0				; PAL mode flag
(1) 4469/    1F89 : 00                  mcdBlock	db 0				; Flag to BLOCK PCM transfers.
(1) 4470/    1F8A : 00                  marsBlock	db 0				; Flag to BLOCK PWM transfers.
(1) 4471/    1F8B :                     
(1) 4472/    1F8B :                     ; --------------------------------------------------------
(1) 4473/    1F8B :                     		dephase
(1) 4474/    1F8B :                     		cpu 68000		; [AS] Return to 68k
(1) 4475/    1F8B :                     		padding off		; [AS] NO padding
(1) 4476/    1F8B :                     		align 2
(1) 4477/    1F8C :                     
      31/    1F8C :                     
      32/    1F8C :                     
 AS V1.42 Beta [Bld 212] - Source File driver_only.asm - Page 2 - 10/24/2024 04:39:58 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - | *ARCHITECTURE :      "x86_64-Linux" - |
 ARP :                           2C - |  ATK :                            8 - |
*BANKSET :                        4 - | *BIGENDIAN :                      0 - |
*BITMAPMD :                       1 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CDRAMDST :                    1F82 C |  CDRAMLEN :                    1F87 C |
 CDRAMSRC :                    1F84 C |  CDRAMSRCB :                   1F86 C |
 CHIP_ENV :                    104E C |  CHIP_ENV.ATKEND :             10D1 C |
*CHIP_ENV.ATKZERO :            10D4 C |  CHIP_ENV.CHK2 :               10DA C |
 CHIP_ENV.CHK4 :               110F C |  CHIP_ENV.CKOF :               1072 C |
 CHIP_ENV.CKON :               1085 C | *CHIP_ENV.DECTMR :             10DE C |
 CHIP_ENV.DKADD :              10F8 C |  CHIP_ENV.DKSAV :              1100 C |
 CHIP_ENV.DKYEND :             1105 C |  CHIP_ENV.DO_NFREQ :           1164 C |
 CHIP_ENV.ENVPROC :            10A3 C |  CHIP_ENV.KILLENV :            1125 C |
*CHIP_ENV.NBLOCK :             10A3 C |  CHIP_ENV.NORMAL :             115F C |
 CHIP_ENV.NOUPD :              11A5 C |  CHIP_ENV.NSKIP :              109A C |
 CHIP_ENV.SILNC_3 :            115B C |  CHIP_ENV.VEDLP :              112D C |
 CHIP_ENV.VLMUCH :             1191 C |  CHIP_ENV.VLOOP :              105A C |
 CHIP_ENV.VONLY :              1187 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
*COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                   1F60 C |  COMMZREAD :                     2E C |
 COMMZROMBLK :                 1F81 C |  COMMZWRITE :                  1F80 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
 CURRTICKBITS :                1CF9 C | *CUSTOM :                         0 - |
*CYCLE :                         32 - |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     11E0 C |
 DAC_ON :                      11CB C |  DAC_PLAY :                    11F5 C |
 DAC_REFILL :                  1229 C |  DAC_REFILL.DACFILL_END :      12E8 C |
 DAC_REFILL.DACFILL_LOOP :     12A1 C |  DAC_REFILL.DACFILL_RET :      12EB C |
 DAC_REFILL.DAC_OVER :         1277 C | *DATE :                "10/24/2024" - |
 DDACCNTR :                    1799 C |  DDACFIFOMID :                   37 C |
 DDACPNTR :                    1796 C |  DKY :                            C - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      42 C |
 DRV_LOOP.CMND_0 :               D8 C |  DRV_LOOP.CMND_1 :               DB C |
 DRV_LOOP.CMND_2 :               F4 C |  DRV_LOOP.CMND_3 :              12E C |
 DRV_LOOP.CMND_5 :              16C C |  DRV_LOOP.CMND_6 :              1A5 C |
 DRV_LOOP.CMND_7 :              1DE C |  DRV_LOOP.CMND_RDSLOT :         1FC C |
 DRV_LOOP.DEL_ALL :             165 C |  DRV_LOOP.GETCBYTEL :            AB C |
 DRV_LOOP.GRAB_ARG :             A9 C |  DRV_LOOP.LIST :                 C8 C |
 DRV_LOOP.NEITHER :              82 C |  DRV_LOOP.NEXT_CMD :             86 C |
 DRV_LOOP.NOBEATS :              69 C |  DRV_LOOP.NOTICKS :              5C C |
 DRV_LOOP.NOT_PAL :             1F1 C |  DRV_LOOP.SRCH_DEL :            14C C |
 DRV_LOOP.SRCH_FVOL :           18A C |  DRV_LOOP.SRCH_MODE :           114 C |
 DRV_LOOP.SRCH_SLOT :           20E C |  DRV_LOOP.SRCH_VOL :            1C3 C |
 DRV_LOOP.WRTTO_DEL :           159 C |  DRV_LOOP.WRTTO_FVOL :          197 C |
 DRV_LOOP.WRTTO_SLOT :          123 C |  DRV_LOOP.WRTTO_VOL :           1D0 C |
 DTBL_MULTI :                   7E7 C |  DTBL_SINGL :                   7F9 C |
*DTBL_SINGL.CHNL_ULNK :         EF1 C |  DTBL_SINGL.CHNL_ULNKCUT :      EF1 C |
 DTBL_SINGL.CHNL_ULNKOFF :      EF1 C |  DTBL_SINGL.COMN_PANLIST :      CDF C |
 DTBL_SINGL.DAC_CUT :           BC0 C |  DTBL_SINGL.DAC_OFF :           BC6 C |
 DTBL_SINGL.DAC_PROC :          BCC C |  DTBL_SINGL.D_DOWN :            C63 C |
 DTBL_SINGL.D_DOWNHF :          C5E C |  DTBL_SINGL.D_UP :              C55 C |
*DTBL_SINGL.D_UPHF :            C52 C |  DTBL_SINGL.EFFC :              C1C C |
 DTBL_SINGL.EFFC_D :            C37 C |  DTBL_SINGL.EFFC_E :            C70 C |
 DTBL_SINGL.EFFC_F :            C7F C |  DTBL_SINGL.EFFC_X :            C90 C |
 DTBL_SINGL.FM_CINDX :          B8E C |  DTBL_SINGL.FM_CUT :            A38 C |
 DTBL_SINGL.FM_HASVOL :         EAF C |  DTBL_SINGL.FM_KEYOFF :         A55 C |
 DTBL_SINGL.FM_OFF :            A32 C |  DTBL_SINGL.FM_SETFREQ :        A74 C |
 DTBL_SINGL.FM_TLOFF :          A5D C |  DTBL_SINGL.FND_OCT :           EE0 C |
 DTBL_SINGL.FNOT_PAL :          96D C |  DTBL_SINGL.GET_FMCACH :        B96 C |
 DTBL_SINGL.GET_OCT :           ED6 C |  DTBL_SINGL.INST :              D10 C |
 DTBL_SINGL.INS_DAC :           DCC C |  DTBL_SINGL.INS_FM :            D71 C |
 DTBL_SINGL.INS_PCM :           E20 C |  DTBL_SINGL.INS_PSG :           D3B C |
 DTBL_SINGL.INS_PSGN :          D35 C |  DTBL_SINGL.INS_PWM :           E5D C |
*DTBL_SINGL.INVL_INS :          D34 C |  DTBL_SINGL.KEEP_TLMX :         B78 C |
 DTBL_SINGL.KYCUT_PSG :         90D C | *DTBL_SINGL.KYCUT_PSGN :        90A C |
 DTBL_SINGL.KYOFF_PSG :         901 C | *DTBL_SINGL.KYOFF_PSGN :        8FE C |
 DTBL_SINGL.KYPSGN_HATOFF :     916 C |  DTBL_SINGL.LINKED :            863 C |
 DTBL_SINGL.MKFM_FREQ :         9AE C |  DTBL_SINGL.MKFM_PROC :         9A8 C |
 DTBL_SINGL.MKFM_SET :          A8B C |  DTBL_SINGL.MKFM_TLVOL :        B1F C |
 DTBL_SINGL.MKFM_WREGS :        AF5 C |  DTBL_SINGL.MK_DAC :            BA6 C |
 DTBL_SINGL.MK_FM :             96E C |  DTBL_SINGL.MK_FM_SP :          9E3 C |
 DTBL_SINGL.MK_LIST :           8B1 C |  DTBL_SINGL.MK_PCM :            BFC C |
 DTBL_SINGL.MK_PSG :            8BF C |  DTBL_SINGL.MK_PWM :            BFD C |
 DTBL_SINGL.NEW_ROMDAT :        DB7 C | *DTBL_SINGL.NOFM_NOTE :         9E2 C |
 DTBL_SINGL.NOTE :              EA5 C |  DTBL_SINGL.NOT_DAC :           990 C |
 DTBL_SINGL.NOT_DSPC :          9A5 C |  DTBL_SINGL.NOT_NS :            8F9 C |
 DTBL_SINGL.NOT_PAL :           9CB C |  DTBL_SINGL.NO_LFO :            AEA C |
 DTBL_SINGL.NO_REQ :            939 C |  DTBL_SINGL.N_FM :              ECC C |
*DTBL_SINGL.N_INDX :            EC1 C | *DTBL_SINGL.N_STFREQ :          EC2 C |
 DTBL_SINGL.PAN_MCD :           CBC C |  DTBL_SINGL.PCM_PANLIST :       CE7 C |
 DTBL_SINGL.PSGC_KEYON :        924 C |  DTBL_SINGL.PSGC_PROC :         91D C |
 DTBL_SINGL.PSG_GETFREQ :       95A C |  DTBL_SINGL.PSG_KEYON :         93F C |
 DTBL_SINGL.RCYL_COM :          856 C | *DTBL_SINGL.READFREQ_PCM :      BFE C |
*DTBL_SINGL.READFREQ_PWM :      C03 C |  DTBL_SINGL.RESET_EFFC :        8A4 C |
 DTBL_SINGL.RES_PAN :           CB2 C |  DTBL_SINGL.SAME_PATCH :        DC7 C |
 DTBL_SINGL.SETEFU_D :          C57 C |  DTBL_SINGL.SETEF_D :           C67 C |
 DTBL_SINGL.SETEF_MCD :         C6C C |  DTBL_SINGL.SET_WAVFREQ :       C06 C |
 DTBL_SINGL.SILN_DAC :          85A C |  DTBL_SINGL.SILN_FM :           85D C |
 DTBL_SINGL.SILN_PCM :          83C C |  DTBL_SINGL.SILN_PSG :          836 C |
 DTBL_SINGL.SILN_PSG_N :        832 C |  DTBL_SINGL.SILN_PWM :          84D C |
 DTBL_SINGL.THIS_REGS :         A2A C |  DTBL_SINGL.TL_DOWN :           A69 C |
 DTBL_SINGL.VMUCH :             954 C |  DTBL_SINGL.VOLU :              D07 C |
 DTBL_SINGL.WRITE_NTL :         B83 C |  DTBL_SINGL.WRITE_TL :          B71 C |
 DTBL_SINGL.WRT_EF :            C8A C |  DTBL_SINGL.WR_SPC :            A0D C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EFFV :                          34 - |
 EMU :                            1 - | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    1547 C |  FMCACH_2 :                    156F C |
 FMCACH_3 :                    1597 C |  FMCACH_4 :                    15BF C |
 FMCACH_5 :                    15E7 C |  FMCACH_6 :                    160F C |
 FMCACH_LIST :                 1788 C |  FMFREQ_LIST :                 12F9 C |
 FMLIST_RSAVE :                1637 C |  FMSPECIAL :                     30 C |
 FM_AUTOREG :                  11B1 C |  FM_SEND_1 :                   11B5 C |
 FM_SEND_2 :                   11C0 C | *FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMAMSTRLISTPOS :               1C C |  GEMA_INIT :                    F02 C |
 GEMA_INIT.END_SETUP :          F43 C |  GEMA_INIT.SETUP_LIST :         F18 C |
 GEMA_INIT.ST_COPY :            F37 C |  GEMA_LASTBANK :               12EF C |
 GEMA_LASTBANK.WRITE :         12F4 C |  GET_TICK :                     F74 C |
 GET_TICK.CTNOTICK :            F91 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
 HEADEROUT :                   179C C |  HEADEROUT_E :                 17AA C |
*HINTCLR :                       18 - | *HIRQ_ON :                        4 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 17B2 C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - | *LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
*MACEXP :                         7 - |  MARS :                           0 - |
*MARSBLOCK :                   1F8A C |  MARSCD :                         0 - |
 MARSUPD :                     178E C |  MAX_BUFFNTRY :                   8 - |
 MAX_RCACH :                     20 - |  MAX_SLOTS :                      3 - |
 MAX_TBLSIZE :                   12 - |  MAX_TRFRPZ :                     A - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_ZCMND :                     20 - |  MCD :                            0 - |
*MCDBLOCK :                    1F89 C |  MCDUPD :                      178F C |
*MCD_COMM_M :                     E - | *MCD_COMM_S :                     F - |
*MCD_DCOMM_M :                   10 - | *MCD_DCOMM_S :                   20 - |
*MCD_HINT :                       6 - | *MCD_INTMASK :                   32 - |
*MCD_MEMORY :                     3 - | *MD_BANK_SRAM :              A130F1 - |
 MODE :                          18 - | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - | *MONOWIDTH :                     38 - |
 MVOL :                          30 - | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             17BA C | *NIKONA_BUFFLIST_E :           17D2 C |
*PACKING :                        0 - | *PADDING :                        0 - |
 PALMODE :                     1F88 C |  PCMCOM :                      1493 C |
*PEN :                           20 - | *PICO :                           0 - |
*PROC_CHIPS :                   60D C |  PSGCOM :                      150B C |
 PSGFREQ_LIST :                1311 C |  PSGHATMODE :                    2F C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PWMCOM :                      14D3 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_ZCDFLAGD :            FFFFFF00 - | *RCHWIDTH :                      36 - |
 READROM :                      F95 C |  READROM.DOUBLE :               FB8 C |
 READROM.FROM_RAM :             FDC C |  READROM.TRANSFER :             FFC C |
 READROM.WAIT :                 FF3 C |  READROM.X68KLAST :            1035 C |
 READROM.X68KLOOP :            1021 C |  READROM.X68KLPWT :            1043 C |
 READROM.X68KNOCARRY :          FD6 C | *RELAXED :                        0 - |
*RES :                            2 - |  RRT :                           14 - |
 SAMPLEHEAD :                  17AC C |  SBEATACC :                      31 C |
 SBEATPTCK :                     33 C |  SET_CHIPS :                    5F1 C |
*SET_WRAMSIZE :               3C000 - | *SHIFT :                          2 - |
 SLV :                           10 - | *STANDBY :                        3 - |
*SYSMARS_FRAMEBUFFER :       840000 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_OVERWRITE :         860000 - | *SYSMARS_REG :               A15100 - |
*SYSMARS_SVDP :              A15180 - | *SYSMCD_REG :                A12000 - |
*SYSMCD_WRAM :               200000 - | *SYS_CTRL_1 :                A10009 - |
*SYS_CTRL_2 :                A1000B - | *SYS_CTRL_3 :                A1000D - |
*SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_IO :                    A10001 - |
*SYS_SRAM :                  200000 - | *SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 638 C |  TBLBUFF_READ.DONT_RES :        6F8 C |
 TBLBUFF_READ.DO_CHIP :         693 C |  TBLBUFF_READ.GRAB_LINK :       6DC C |
 TBLBUFF_READ.HAS_INDX :        66F C |  TBLBUFF_READ.INVLDL :          720 C |
 TBLBUFF_READ.L_HIPRIO :        7AA C |  TBLBUFF_READ.NEW_CHIP :        75D C |
 TBLBUFF_READ.NEW_LINK :        7A7 C |  TBLBUFF_READ.NEW_LINK_O :      79F C |
 TBLBUFF_READ.NEW_LINK_Z :      79B C |  TBLBUFF_READ.NEXTSRCH_TBL :    794 C |
 TBLBUFF_READ.NEXT_INDX :       666 C |  TBLBUFF_READ.NEXT_PRIO :       77F C |
 TBLBUFF_READ.NO_INDX :         68B C |  TBLBUFF_READ.PASS_2 :          77E C |
 TBLBUFF_READ.PICK_TBL :        7CB C |  TBLBUFF_READ.REFILL :          759 C |
 TBLBUFF_READ.REROLL :          736 C |  TBLBUFF_READ.RNOT_PSG :        75B C |
 TBLBUFF_READ.SAME_LINK :       6FB C |  TBLBUFF_READ.SET_ASFULL :      7C8 C |
 TBLBUFF_READ.SINGL_FREE :      7B8 C |  TBLBUFF_READ.SINGL_LINK :      728 C |
 TBLBUFF_READ.SRCH_FREE :       76E C |  TBLBUFF_READ.SRCH_LINK :       707 C |
 TBLBUFF_READ.SRCH_LLOOP :      711 C |  TBLBUFF_READ.TRACK_CONT :      650 C |
 TBLBUFF_READ.VALID :           664 C |  TBLFM :                       1BA0 C |
 TBLFM3 :                      1BE8 C |  TBLFM6 :                      1BFA C |
 TBLLIST :                     1B00 C |  TBLPCM :                      1B0E C |
 TBLPSG :                      1C0E C |  TBLPSGN :                     1C46 C |
 TBLPWM :                      1C58 C |  TBLZ_CLEAR :                   EF8 C |
 TH :                      20000000 - |  TICKCNT :                     1CF8 C |
 TICKFLAG :                    1CF7 C |  TICKSPSET :                   1CF6 C |
*TIME :               "04:39:58 AM" - | *TIMERCTL :                      30 - |
 TRACK_OUT :                    5AC C |  TRACK_OUT.INDX_DEL :           5BA C |
 TRACK_OUT.NOTHIN :             5E8 C |  TRKBLKS_0 :                   16B3 C |
 TRKBLKS_1 :                   16BB C |  TRKBLKS_2 :                   16C3 C |
 TRKBUFF_0 :                   16CB C |  TRKBUFF_1 :                   170A C |
 TRKBUFF_2 :                   1749 C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   1653 C |
 TRKHDRS_1 :                   1673 C |  TRKHDRS_2 :                   1693 C |
 TRKINFOCACH :                 1643 C |  TRK_BANKBLK :                   16 - |
 TRK_BANKHEADS :                 15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   25 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   17 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   22 - |  TRK_ROMINST :                   1F - |
 TRK_ROMPATT :                   1C - |  TRK_ROMPATTREAD :               19 - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               18 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    221 C |
 UPD_TRACK.CHNL_FREE :          32C C |  UPD_TRACK.CONT_CHNL :          337 C |
 UPD_TRACK.DECROW :             2DB C |  UPD_TRACK.DECROW_E :           2DE C |
 UPD_TRACK.EFFECT_FILL :        503 C |  UPD_TRACK.EFF_A :              3B1 C |
 UPD_TRACK.EFF_B :              3C2 C |  UPD_TRACK.EFF_C :              3E0 C |
 UPD_TRACK.EXIT :               2CF C |  UPD_TRACK.FADE_OUT :           25C C |
 UPD_TRACK.FIRST_BLK :          437 C |  UPD_TRACK.FIRST_FILL :         50A C |
 UPD_TRACK.FIRST_HEAD :         47E C |  UPD_TRACK.GRAB_RHEAD :         599 C |
 UPD_TRACK.HAS_NOTE :           2E6 C |  UPD_TRACK.INC_CPATT :          3E3 C |
 UPD_TRACK.KEEP_BLK :           454 C |  UPD_TRACK.KEEP_IT :            4A4 C |
 UPD_TRACK.KEEP_VOL :           272 C |  UPD_TRACK.NEXT_CHNL :          311 C |
 UPD_TRACK.NEXT_NOTE :          2BF C |  UPD_TRACK.NO_EFF :             37D C |
 UPD_TRACK.NO_GLBL :            54A C |  UPD_TRACK.NO_INS :             35F C |
 UPD_TRACK.NO_NOTE :            354 C |  UPD_TRACK.NO_VOL :             36A C |
 UPD_TRACK.OLD_TYPE :           348 C |  UPD_TRACK.RAN_OUT :            3F1 C |
 UPD_TRACK.READ_TRACK :         238 C |  UPD_TRACK.ROW_ACTIVE :         2B8 C |
 UPD_TRACK.SET_TRACK :          41B C |  UPD_TRACK.SFXMD :              27C C |
 UPD_TRACK.SRCH_NEW :           30C C |  UPD_TRACK.TOO_MUCH :           268 C |
 UPD_TRACK.TRACK_END :          4F3 C | *VBLK :                          80 - |
*VDPSTS :                         A - | *VDP_CTRL :                  C00004 - |
*VDP_DATA :                  C00000 - | *VERSION :                     142F - |
*VINTCLR :                       16 - | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1CF5 C |
 WAVE_LEN :                    1CED C |  WAVE_LOOP :                   1CF0 C |
 WAVE_PITCH :                  1CF3 C |  WAVE_START :                  1CEA C |
 WAVFREQ_CDPCM :               141B C |  WAVFREQ_LIST :                13B9 C |
 X68KSRCLSB :                    35 C |  X68KSRCMID :                    36 C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - | *Z80_BUS :                   A11100 - |
*Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
*Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
*ZMARS_SEND :                   F01 C | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZTBL_CHIP :                      3 - |
 ZTBL_FREQINDX :                  5 - |  ZTBL_INSTCACH :                  A - |
*ZTBL_LINK :                      0 - |  ZTBL_MASTERVOL :                 4 - |
 ZTBL_PITCHBEND :                 6 - | *ZTBL_PRIORITY :                  2 - |
 ZTBL_VOLSLIDE :                  8 - |  ZTBL_VOLUME :                    7 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_VDPREG :                 20004100 - |

    571 symbols
    186 unused symbols

 AS V1.42 Beta [Bld 212] - Source File driver_only.asm - Page 3 - 10/24/2024 04:39:58 AM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
DATA_DEND                             | DATA_DSET                            
ENDMEMORY                             | ERREPORT                             
FILLSECTORS                           | FS_END                               
FS_FILE                               | FS_MKLIST                            
MARS_VRAMEND                          | MARS_VRAMSTART                       
MEMORY                                | REPORT                               
ROMPAD                                | SCREEN_CODE                          
VDP_SHOWME                            |

     17 macros

 AS V1.42 Beta [Bld 212] - Source File driver_only.asm - Page 4 - 10/24/2024 04:39:58 AM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File driver_only.asm - Page 5 - 10/24/2024 04:39:58 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

   5074 lines source file
      2 passes
      0 errors
      0 warnings
