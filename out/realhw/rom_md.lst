 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 10/11/2024 07:15:31 PM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; A devkit for developing software on the SEGA 16-bit family
       6/       0 :                     ; of systems: Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ; ===========================================================================
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; NIKONA SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 : =$0                  SET_INITMODE	equ 0		; Starting screen mode number on boot
      15/       0 :                     
      16/       0 :                     ; ====================================================================
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      19/       0 :                     ; ----------------------------------------------------------------
      20/       0 :                     
      21/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      22/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      23/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      24/       0 :                     
      25/       0 :                     ; ----------------------------------------------------
      26/       0 :                     ; SCD, 32X and CD32X ONLY
      27/       0 :                     ;
      28/       0 :                     ; These sections are unused(free) on Genesis/Pico
      29/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      30/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      31/       0 :                     
      32/       0 :                     ; ====================================================================
      33/       0 :                     ; ----------------------------------------------------------------
      34/       0 :                     ; AS Assembler starting settings
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     
      37/       0 :                     		cpu 		68000		; Starting CPU is 68000
      38/       0 :                     		padding		off		; Don't pad dc.b
      39/       0 :                     		listing 	purecode
      40/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      41/       0 :                     		page 		0
      42/       0 :                     
      43/       0 :                     ; ====================================================================
      44/       0 :                     ; ----------------------------------------------------------------
      45/       0 :                     ; Includes
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     
      48/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; DO NOT CHANGE THE SIZE OF THE STRINGS
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; if not this will NOT boot on hardware.
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Volume and System(SDK/engine) name
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Note:
(1)   27/       0 :                     ; Leave HTAG_SYSNAME as is if you haven't modified
(1)   28/       0 :                     ; any of the Nikona SDK files (/system folder)
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   32/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   33/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   34/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------------------
(1)   37/       0 :                     ; Release date
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; "(C)name year.month"
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 : ="(C)???? 2024.???"  HTAG_DATEINFO	equ "(C)???? 2024.???"
(1)   43/       0 :                     
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     ; "Domestic" Name, Your game's name in your language
(1)   46/       0 :                     ; --------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 : ="GEMA Sound Dri..   HTAG_NDM_MD	equ "GEMA Sound Driver MD                            "
(1)   49/       0 : ="GEMA Sound Dri..   HTAG_NDM_MCD	equ "GEMA Sound Driver MCD                           "
(1)   50/       0 : ="GEMA Sound Dri..   HTAG_NDM_MARS	equ "GEMA Sound Driver SUPER32X                      "
(1)   51/       0 : ="GEMA Sound Dri..   HTAG_NDM_MARSCD	equ "GEMA Sound Driver CD32X                         "
(1)   52/       0 : ="GEMA Sound Dri..   HTAG_NDM_PICO	equ "GEMA Sound Driver PICO                          "
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     ; "Overseas" Name, Your game's name in English
(1)   56/       0 :                     ; --------------------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 : ="GEMA Sound Dri..   HTAG_NOV_MD	equ "GEMA Sound Driver GENESIS                       "
(1)   59/       0 : ="GEMA Sound Dri..   HTAG_NOV_MCD	equ "GEMA Sound Driver SCD                           "
(1)   60/       0 : ="GEMA Sound Dri..   HTAG_NOV_MARS	equ "GEMA Sound Driver 32X                           "
(1)   61/       0 : ="GEMA Sound Dri..   HTAG_NOV_MARSCD	equ "GEMA Sound Driver CD32X                         "
(1)   62/       0 : ="GEMA Sound Dri..   HTAG_NOV_PICO	equ "GEMA Sound Driver PICO                          "
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Serial number
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; "id anything-vv"
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; id:
(1)   70/       0 :                     ; GM - Game
(1)   71/       0 :                     ; AI - Educative
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; anything:
(1)   74/       0 :                     ; Your own serial format, there's no standard.
(1)   75/       0 :                     ;
(1)   76/       0 :                     ; vv:
(1)   77/       0 :                     ; Version number: 00 to 99
(1)   78/       0 :                     ; --------------------------------------------------------
(1)   79/       0 :                     
(1)   80/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Regions supported
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; Save data settings
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; Only UPPERCASE and _ are allowed.
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     
(1)   94/       0 : =$100                SET_SRAMSIZE	equ $100		; SRAM/BRAM filesize, must be "blocks" of $40 bytes ($20 w/Protection)
(1)   95/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SCD internal save name
(1)   96/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name
(1)   97/       0 :                     
      49/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MCD|MARSCD
(1)  231/       0 :                     	if MOMPASS>2
(1)  232/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  233/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  234/       0 :                     		endif
(1)  235/       0 :                     	endif
(1)  236/       0 :                     	endif
(1)  237/       0 :                     
(1)  238/       0 :                     	if MARS
(1)  239/       0 :                     		if * >= $900000+$100000
(1)  240/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  241/       0 :                     		endif
(1)  242/       0 :                     
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     	elseif MCD|MARSCD
(1)  245/       0 :                     		dephase
(1)  246/       0 :                     
(1)  247/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  248/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  249/       0 :                     		rompad mpadlbl
(1)  250/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  251/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  252/       0 :                     	endif
(1)  253/       0 :                     	endm
(1)  254/       0 :                     
(1)  255/       0 :                     ; --------------------------------------------
(1)  256/       0 :                     
(1)  257/       0 :                     binclude_dma	macro lblstart,file
(1)  258/       0 :                     	if MARS
(1)  259/       0 :                     GLBL_LASTPHDMA	set *
(1)  260/       0 :                     	dephase
(1)  261/       0 :                     GLBL_PHASEDMA	set *
(1)  262/       0 :                     		endif
(1)  263/       0 :                     
(1)  264/       0 :                     		align 2
(1)  265/       0 :                     lblstart	label *
(1)  266/       0 :                     		binclude file
(1)  267/       0 :                     		align 2
(1)  268/       0 :                     
(1)  269/       0 :                     	if MARS
(1)  270/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  271/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  272/       0 :                     	endif
(1)  273/       0 :                     		endm
(1)  274/       0 :                     
(1)  275/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  276/       0 :                     	if MARS
(1)  277/       0 :                     GLBL_LASTPHDMA	set *
(1)  278/       0 :                     	dephase
(1)  279/       0 :                     GLBL_PHASEDMA	set *
(1)  280/       0 :                     		endif
(1)  281/       0 :                     
(1)  282/       0 :                     		align 2
(1)  283/       0 :                     lblstart	label *
(1)  284/       0 :                     		binclude file
(1)  285/       0 :                     lblend		label *
(1)  286/       0 :                     		align 2
(1)  287/       0 :                     
(1)  288/       0 :                     	if MARS
(1)  289/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  290/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  291/       0 :                     	endif
(1)  292/       0 :                     		endm
(1)  293/       0 :                     
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     ; 32X graphics pack Enter/Exit
(1)  296/       0 :                     ; --------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     mars_VramStart	macro thelabel
(1)  299/       0 :                     thelabel label *
(1)  300/       0 :                     		phase 0
(1)  301/       0 :                     		endm
(1)  302/       0 :                     
(1)  303/       0 :                     mars_VramEnd	macro thelabel
(1)  304/       0 :                     		align 8
(1)  305/       0 :                     .end:
(1)  306/       0 :                     ; 		if MOMPASS == 1
(1)  307/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  308/       0 :                     ; 		endif
(1)  309/       0 :                     		dephase
(1)  310/       0 :                     thelabel label *
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     ; Fill CD sectors
(1)  315/       0 :                     ; --------------------------------------------
(1)  316/       0 :                     
(1)  317/       0 :                     fillSectors macro num
(1)  318/       0 :                     	rept num
(1)  319/       0 :                     		align $800-1
(1)  320/       0 :                     		dc.b 0
(1)  321/       0 :                     	endm
(1)  322/       0 :                     	endm
(1)  323/       0 :                     
(1)  324/       0 :                     ; ====================================================================
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     ; Nikona CODE macros
(1)  327/       0 :                     ; ------------------------------------------------------------
(1)  328/       0 :                     
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     ; VDP color debug
(1)  331/       0 :                     ; --------------------------------------------
(1)  332/       0 :                     
(1)  333/       0 :                     vdp_showme	macro color
(1)  334/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  335/       0 :                     		move.w	#color,(vdp_data).l
(1)  336/       0 :                     		endm
(1)  337/       0 :                     
      50/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)  240/       0 :                     
      51/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      52/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      53/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      54/       0 :                     		include	"system/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Buffer data used by Boot ROM
(1)    7/       0 :                     ;                   * FREE on Cartridge
(1)    8/       0 :                     ; $FFFC00-$FFFD00 | Stack area a7
(1)    9/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
(1)   10/       0 :                     ;                   * FREE on Cartridge
(1)   11/       0 :                     ; $FFFE00-$FFFFFF | USED by the BIOS as temporals
(1)   12/       0 :                     ;                   * FREE on Cartridge
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$FFFC00             SET_RAMLIMIT		equ $FFFC00
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; MAIN USER RAM
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : (MACRO)              			memory $FFFF0000
(1)   21/       0 : =$0                  GLBL_LASTPC     := *
(1)   21/       0 :                                     dephase
(1)   21/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   21/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   22/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   24/FFFFFFFFFFFFB000 :                     .end:
(1)   25/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   25/    B000 :                     .here:          dephase
(1)   25/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   25/       0 :                                     phase GLBL_LASTPC
(1)   29/       0 :                     
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     ; Nikona .w section of RAM
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; MUST BE AFTER $FF8000
(1)   34/       0 :                     ; ------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : (MACRO)              			memory $FFFFB000
(1)   36/       0 : =$0                  GLBL_LASTPC     := *
(1)   36/       0 :                                     dephase
(1)   36/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   36/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   37/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   39/FFFFFFFFFFFFC800 :                     
(1)   40/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   41/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   50/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   51/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   55/FFFFFFFFFFFFC800 :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   56/FFFFFFFFFFFFD7F8 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   57/FFFFFFFFFFFFE99A :                     sizeof_MdRam		ds.l 0
(1)   59/FFFFFFFFFFFFE9A0 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)   60/    39A0 :                     .here:          dephase
(1)   60/    39A0 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   60/       0 :                                     phase GLBL_LASTPC
(1)   64/       0 :                     
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     ; SCD and 32X special section
(1)   67/       0 :                     ; --------------------------------------------------------
(1)   68/       0 :                     
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Fixed areas
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  104/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  105/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  106/       0 :                     
      55/       0 :                     
      56/       0 :                     ; ====================================================================
      57/       0 :                     ; ----------------------------------------------------------------
      58/       0 :                     ; GLOBAL variables
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     
      61/       0 : (MACRO)              		memory RAM_MdGlobal
      61/       0 : =$0                  GLBL_LASTPC     := *
      61/       0 :                                     dephase
      61/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      61/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      62/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      63/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFFB000 :                     ; USER SETTINGS
(1)    9/FFFFFFFFFFFFB000 :                     ;
(1)   10/FFFFFFFFFFFFB000 :                     ; Example:
(1)   11/FFFFFFFFFFFFB000 :                     ; setting_tagname	equ value
(1)   12/FFFFFFFFFFFFB000 :                     ; SET_DEBUGMODE		equ True
(1)   13/FFFFFFFFFFFFB000 :                     ; SET_PLAYERNAME	equ "NIKONA"
(1)   14/FFFFFFFFFFFFB000 :                     ;
(1)   15/FFFFFFFFFFFFB000 :                     ; setting_tagname:
(1)   16/FFFFFFFFFFFFB000 :                     ; Any name you want but careful with any conflicting names
(1)   17/FFFFFFFFFFFFB000 :                     ; within the Nikona-internal code
(1)   18/FFFFFFFFFFFFB000 :                     ;
(1)   19/FFFFFFFFFFFFB000 :                     ; Notes:
(1)   20/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   21/FFFFFFFFFFFFB000 :                     ; during build
(1)   22/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   23/FFFFFFFFFFFFB000 :                     
(1)   24/FFFFFFFFFFFFB000 : =$0                  SET_DEBUGMODE		equ False
(1)   25/FFFFFFFFFFFFB000 :                     
(1)   26/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)   27/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM memory (RAM_Global)
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here, for
(1)   31/FFFFFFFFFFFFB000 :                     ; storing temporals on your current screen use RAM_ScrnBuff
(1)   32/FFFFFFFFFFFFB000 :                     ;
(1)   33/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   34/FFFFFFFFFFFFB000 :                     ;
(1)   35/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpL ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   36/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpW ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   37/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpB ds.b 6 ; Reserve 6 BYTES
(1)   38/FFFFFFFFFFFFB000 :                     ;
(1)   39/FFFFFFFFFFFFB000 :                     ; Careful with BYTES, everything needs to be even-aligned
(1)   40/FFFFFFFFFFFFB000 :                     ; or your will get an ADDRESS ERROR.
(1)   41/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   42/FFFFFFFFFFFFB000 :                     
(1)   43/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   44/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   45/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   46/FFFFFFFFFFFFB007 :                     
(1)   47/FFFFFFFFFFFFB007 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFFB007 :                     			align 2
(1)   49/FFFFFFFFFFFFB008 :                     
      64/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      69/FFFFFFFFFFFFB00C : (MACRO)              		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      70/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      70/       C :                     .here:          dephase
      70/       C :                                     ds.b -(.here-GLBL_LASTORG)
      70/       0 :                                     phase GLBL_LASTPC
      71/       0 :                     
      72/       0 :                     ; ====================================================================
      73/       0 :                     ; ----------------------------------------------------------------
      74/       0 :                     ; SAVE data structure
      75/       0 :                     ; ----------------------------------------------------------------
      76/       0 :                     
      77/       0 : (MACRO)              		memory RAM_SaveData
      77/       0 : =$0                  GLBL_LASTPC     := *
      77/       0 :                                     dephase
      77/FFFFFFFFFFFFD7F8 :                                     phase RAM_SAVEDATA
      77/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
      78/FFFFFFFFFFFFD7F8 :                     	; ------------------------------------------------
      79/FFFFFFFFFFFFD7F8 :                     		include "game/savemem.asm"
(1)    1/FFFFFFFFFFFFD7F8 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFD7F8 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFD7F8 :                     
(1)    6/FFFFFFFFFFFFD7F8 :                     RAM_Save_TAG		ds.b 4		; ** RESERVED **
(1)    7/FFFFFFFFFFFFD7FC :                     RAM_Save_Counter	ds.l 1		; Temporal
(1)    8/FFFFFFFFFFFFD800 :                     
      80/FFFFFFFFFFFFD800 :                     	; ------------------------------------------------
      81/FFFFFFFFFFFFD800 :                     sizeof_SaveInfo	ds.l 0
      85/FFFFFFFFFFFFD804 : (MACRO)              		erreport "USER Globals",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      86/FFFFFFFFFFFFD804 : (MACRO)              		endmemory
      86/       C :                     .here:          dephase
      86/       C :                                     ds.b -(.here-GLBL_LASTORG)
      86/       0 :                                     phase GLBL_LASTPC
      87/       0 :                     
      88/       0 :                     ; ====================================================================
      89/       0 :                     ; ----------------------------------------------------------------
      90/       0 :                     ; Init procedures for all systems
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     
      93/       0 :                     		!org 0						; Start at 0
      94/       0 :                     ; ---------------------------------------------
      95/       0 :                     ; SEGA 32X
      96/       0 :                     ; ---------------------------------------------
      97/       0 :                     
     165/       0 :                     		include	"system/head_md.asm"			; Genesis header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Genesis header
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 0202           		dc.l MD_Entry		; Entry point MUST point to $3F0
(1)    8/       8 : 0000 0200           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0200           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0200           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0200           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0200           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0200           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0200           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0200           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0200           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0200           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0200           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0200           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0200           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0200           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0200           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0200           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0200           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0200           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0200           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0200           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0200           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0200           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0200           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0200           		dc.l MD_ErrorTrap
(1)   32/      68 : FFFF E98C           		dc.l RAM_ExternalJump	; RAM jump for External (JMP xxxx xxxx)
(1)   33/      6C : 0000 0200           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF E986           		dc.l RAM_HBlankJump	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0200           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF E980           		dc.l RAM_VBlankJump	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0200           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0200           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0200           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0200           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0200           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0200           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0200           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0200           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0200           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0200           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0200           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0200           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0200           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0200           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0200           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2047      		dc.b HTAG_SYS_MD;"SEGA GENESIS    "
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   71/     110 : 2843 293F 3F3F      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 3F20 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4745 4D41 2053      		dc.b HTAG_NDM_MD;"Nikona MD                                       "
              126 : 6F75 6E64 2044 
              12C : 7269 7665 7220 
              132 : 4D44 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4745 4D41 2053      		dc.b HTAG_NOV_MD;"Nikona GENESIS                                  "
              156 : 6F75 6E64 2044 
              15C : 7269 7665 7220 
              162 : 4745 4E45 5349 
              168 : 5320 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0001 0DC8           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 5241 F820           		dc.b "RA",$F8,$20
(1)   82/     1B4 : 0020 0001           		dc.l $200001
(1)   83/     1B8 : 0020 01FF           		dc.l $200001+((SET_SRAMSIZE*2)-2)	;$203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; Error handlers
(1)   90/     200 :                     ;
(1)   91/     200 :                     ; All of these do nothing for now.
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     
(1)   94/     200 :                     MD_ErrBus:				; Bus error
(1)   95/     200 :                     MD_ErrAddr:				; Address error
(1)   96/     200 :                     MD_ErrIll:				; ILLEGAL Instruction
(1)   97/     200 :                     MD_ErrZDiv:				; Divide by 0
(1)   98/     200 :                     MD_ErrChk:				; CHK Instruction
(1)   99/     200 :                     MD_ErrTrapV:				; TRAPV Instruction
(1)  100/     200 :                     MD_ErrPrivl:				; Privilege violation
(1)  101/     200 :                     MD_Trace:				; Trace
(1)  102/     200 :                     MD_Line1010:				; Line 1010 Emulator
(1)  103/     200 :                     MD_Line1111:				; Line 1111 Emulator
(1)  104/     200 :                     MD_ErrorEx:				; Error exception
(1)  105/     200 :                     MD_ErrorTrap:
(1)  106/     200 : 4E73                		rte			; Return from Exception
(1)  107/     202 :                     
(1)  108/     202 :                     ; ====================================================================
(1)  109/     202 :                     ; ----------------------------------------------------------------
(1)  110/     202 :                     ; Entry point
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     
(1)  113/     202 :                     MD_Entry:
(1)  114/     202 : 46FC 2700           		move	#$2700,sr			; Disable interrputs
(1)  115/     206 : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Read IO port
(1)  116/     20C : 0200 000F           		andi.b	#%00001111,d0			; Get version, right 4 bits
(1)  117/     210 : 670A                		beq.s	.old_md				; If 0, No TMSS
(1)  118/     212 : 23F9 0000 0100      		move.l	($100).l,(sys_tmss).l		; Write "SEGA" to port sys_tmss
              218 : 00A1 4000          
(1)  119/     21C :                     .old_md:
(1)  120/     21C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l			; Test VDP to unlock Video
(1)  121/     222 :                     	; --------------------------------
(1)  122/     222 : 7000                		moveq	#0,d0
(1)  123/     224 : 2C40                		movea.l	d0,a6
(1)  124/     226 : 4E66                		move.l	a6,usp
(1)  125/     228 : 41F9 FFFF 0000      		lea	($FFFF0000).l,a0		; Clean our "work" RAM
(1)  126/     22E : 223C FFFF E99A      		move.l	#sizeof_mdram,d1
(1)  127/     234 : 7000                		moveq	#0,d0
(1)  128/     236 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  129/     238 : B1C1                		cmp.l	d1,a0
(1)  130/     23A : 65FA                		bcs.s	.loop_ram
(1)  131/     23C : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  132/     242 : 3E2E 0004           .wait_dma:	move.w	4(a6),d7			; Check if DMA is active.
(1)  133/     246 : 0807 0001           		btst	#1,d7
(1)  134/     24A : 66F6                		bne.s	.wait_dma
(1)  135/     24C : 2D7C 8004 8104      		move.l	#$80048104,4(a6)		; Reset these VDP registers
              252 : 0004             
(1)  136/     254 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)		; Clear palette
              25A : 0004             
(1)  137/     25C : 7E3F                		moveq	#64-1,d7
(1)  138/     25E : 7C00                		moveq	#0,d6
(1)  139/     260 :                     .palclear:
(1)  140/     260 : 3C86                		move.w	d6,(a6)
(1)  141/     262 : 51CF FFFC           		dbf	d7,.palclear
(1)  142/     266 : 4CF9 7FFF 00FF      		movem.l	($FF0000).l,d0-a6		; Clean registers using zeros from RAM
              26C : 0000             
(1)  143/     26E : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              274 : 1100             
(1)  144/     276 : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              27C : 1200             
(1)  145/     27E :                     .wait:
(1)  146/     27E : 0839 0000 00A1      		btst	#0,(z80_bus).l
              284 : 1100             
(1)  147/     286 : 66F6                		bne.s	.wait
(1)  148/     288 :                     
     166/     288 : 6100 143A           		bsr	Sound_init				; Init Sound driver FIRST
     167/     28C : 6100 02A4           		bsr	Video_init				;  ''  Video
     168/     290 : 6100 1344           		bsr	System_Init				;  ''  Values
     169/     294 : 31FC 0000 E994      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     170/     29A : 6000 1C14           		bra.w	Md_ReadModes				; Go to SCREEN LOAD section
     171/     29E :                     
     172/     29E :                     ; ---------------------------------------------
     174/     29E :                     
     175/     29E :                     ; ====================================================================
     176/     29E :                     ; --------------------------------------------------------
     177/     29E :                     ; SYSTEM routines
     178/     29E :                     ;
     179/     29E :                     ; MD/PICO:  Normal ROM locations
     180/     29E :                     ; 32X:      Loaded into RAM to prevent bus-conflicts
     181/     29E :                     ;           with the SH2's view of ROM
     182/     29E :                     ; CD/CD32X: Loaded into RAM for safe access.
     183/     29E :                     ; --------------------------------------------------------
     184/     29E :                     
     189/     29E :                     ; ---------------------------------------------
     190/     29E :                     
     191/     29E :                     		include	"sound/driver/gema_macros.asm"
(1)    1/     29E :                     ; ------------------------------------------------------------
(1)    2/     29E :                     ; MACROS
(1)    3/     29E :                     ; ------------------------------------------------------------
(1)    4/     29E :                     
(1)    5/     29E :                     ; ----------------------------------------------------
(1)    6/     29E :                     ; gSmplData - Include .WAV sample data, applies to
(1)    7/     29E :                     ;             DAC, PCM* and PWM
(1)    8/     29E :                     ;
(1)    9/     29E :                     ;             * No need to convert data, Sub-CPU
(1)   10/     29E :                     ;             converts the data manually.
(1)   11/     29E :                     ;
(1)   12/     29E :                     ; labl | 24-bit Pointer, depending of the
(1)   13/     29E :                     ;        current CPU
(1)   14/     29E :                     ; file | File path for the WAV sample file
(1)   15/     29E :                     ; loop | Loop start point if sample loop is enabled
(1)   16/     29E :                     ;        Set to 0 if not using loop.
(1)   17/     29E :                     ; ----------------------------------------------------
(1)   18/     29E :                     
(1)   19/     29E :                     gSmplData macro labl,file,loop
(1)   20/     29E :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   21/     29E :                     		align 4
(1)   22/     29E :                     	endif
(1)   23/     29E :                     labl	label *
(1)   24/     29E :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   25/     29E :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   26/     29E :                     labl_s:
(1)   27/     29E :                     	binclude file,$2C
(1)   28/     29E :                     labl_e:
(1)   29/     29E :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   30/     29E :                     		align 4
(1)   31/     29E :                     	endif
(1)   32/     29E :                     	endm
(1)   33/     29E :                     
(1)   34/     29E :                     ; ----------------------------------------------------
(1)   35/     29E :                     ; gemaList - Make a tracklist label
(1)   36/     29E :                     ; ----------------------------------------------------
(1)   37/     29E :                     
(1)   38/     29E :                     ; gemaList macro thislbl
(1)   39/     29E :                     ; 	align 2
(1)   40/     29E :                     ; thislbl	label *
(1)   41/     29E :                     ; GLBL_GEMABASE := *
(1)   42/     29E :                     ; 	endm
(1)   43/     29E :                     
(1)   44/     29E :                     ; ----------------------------------------------------
(1)   45/     29E :                     ; gemaTrk - Sequence entry on Gema_MasterList
(1)   46/     29E :                     ;
(1)   47/     29E :                     ; enblt | Disable/Enable global beats on this Sequence
(1)   48/     29E :                     ;         0 - Don't Use beats, 1 - Use beats
(1)   49/     29E :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   50/     29E :                     ;   loc | Direct location of the sequence data
(1)   51/     29E :                     ; ----------------------------------------------------
(1)   52/     29E :                     
(1)   53/     29E :                     gemaTrk macro enbltp,ticks,loc
(1)   54/     29E :                     	dc.l ((enbltp&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   55/     29E :                     	endm
(1)   56/     29E :                     
(1)   57/     29E :                     ; ----------------------------------------------------
(1)   58/     29E :                     ; gemaHead - Track pointers to their respective data
(1)   59/     29E :                     ;
(1)   60/     29E :                     ; blk_data  | Block data pointer
(1)   61/     29E :                     ; patt_data | Pattern data pointer
(1)   62/     29E :                     ; ins_list  | instrument list pointer
(1)   63/     29E :                     ; num_chnls | Number of channels used in the track
(1)   64/     29E :                     ;             If 0: Read ALL channels
(1)   65/     29E :                     ;                   (NOT recommended, UNSTABLE)
(1)   66/     29E :                     ; ----------------------------------------------------
(1)   67/     29E :                     
(1)   68/     29E :                     gemaHead macro blk,pat,ins,num
(1)   69/     29E :                     	dc.w num
(1)   70/     29E :                     	dc.l blk
(1)   71/     29E :                     	dc.l pat
(1)   72/     29E :                     	dc.l ins
(1)   73/     29E :                     	endm
(1)   74/     29E :                     
(1)   75/     29E :                     ; ------------------------------------------------------------
(1)   76/     29E :                     ; Instrument macros, instrument_num-1
(1)   77/     29E :                     ; (ex. Instrument 1 is 0 here)
(1)   78/     29E :                     ;
(1)   79/     29E :                     ; NOTE: UNUSED instruments MUST use gInsNull or
(1)   80/     29E :                     ; the Z80 gets unexpected results and probably crash.
(1)   81/     29E :                     ; ------------------------------------------------------------
(1)   82/     29E :                     
(1)   83/     29E :                     ; ----------------------------------------------------
(1)   84/     29E :                     ; gInsNull - Null instrument
(1)   85/     29E :                     ; ----------------------------------------------------
(1)   86/     29E :                     
(1)   87/     29E :                     gInsNull macro
(1)   88/     29E :                     	dc.b $00,$00,$00,$00
(1)   89/     29E :                     	dc.b $00,$00,$00,$00
(1)   90/     29E :                     	endm
(1)   91/     29E :                     
(1)   92/     29E :                     ; ----------------------------------------------------
(1)   93/     29E :                     ; gInsPsg - PSG tone
(1)   94/     29E :                     ;
(1)   95/     29E :                     ; pitch | Pitch/Octave
(1)   96/     29E :                     ; alv   | Attack level
(1)   97/     29E :                     ; atk   | Attack rate
(1)   98/     29E :                     ; slv   | Sustain
(1)   99/     29E :                     ; dky   | Decay rate (up)
(1)  100/     29E :                     ; rrt   | Release rate (down)
(1)  101/     29E :                     ; vib   | Set to 0, planned vibrato for later.
(1)  102/     29E :                     ; ----------------------------------------------------
(1)  103/     29E :                     
(1)  104/     29E :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  105/     29E :                     	dc.b $80,pitch,alv,atk
(1)  106/     29E :                     	dc.b slv,dky,rrt,vib
(1)  107/     29E :                     	endm
(1)  108/     29E :                     
(1)  109/     29E :                     ; ----------------------------------------------------
(1)  110/     29E :                     ; gInsPsg - PSG noise
(1)  111/     29E :                     ;
(1)  112/     29E :                     ; pitch | Pitch/Octave
(1)  113/     29E :                     ;         If using Tone3: set to 47 for a full noise
(1)  114/     29E :                     ; alv   | Attack level
(1)  115/     29E :                     ; atk   | Attack rate
(1)  116/     29E :                     ; slv   | Sustain
(1)  117/     29E :                     ; dky   | Decay rate (up)
(1)  118/     29E :                     ; rrt   | Release rate (down)
(1)  119/     29E :                     ; vib   | Set to 0, planned vibrato for later.
(1)  120/     29E :                     ; mode  | Noise mode: %tmm
(1)  121/     29E :                     ;        t - Bass(0)|Noise(1)
(1)  122/     29E :                     ;        m - Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)  123/     29E :                     ;        Using Tone3 will disable PSG Channel 3.
(1)  124/     29E :                     ;
(1)  125/     29E :                     ; Note:
(1)  126/     29E :                     ; Tone3 WILL silence PSG3 as it steals the
(1)  127/     29E :                     ; frequency from it, chip limitation.
(1)  128/     29E :                     ; ----------------------------------------------------
(1)  129/     29E :                     
(1)  130/     29E :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  131/     29E :                     	dc.b $90|mode,pitch,alv,atk
(1)  132/     29E :                     	dc.b slv,dky,rrt,vib
(1)  133/     29E :                     	endm
(1)  134/     29E :                     
(1)  135/     29E :                     ; ----------------------------------------------------
(1)  136/     29E :                     ; gInsFm - FM Normal instrument/patch
(1)  137/     29E :                     ;
(1)  138/     29E :                     ; pitch | Pitch/Octave
(1)  139/     29E :                     ; fmins | 24-bit pointer to FM patch data
(1)  140/     29E :                     ; ----------------------------------------------------
(1)  141/     29E :                     
(1)  142/     29E :                     gInsFm macro pitch,fmins
(1)  143/     29E :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  144/     29E :                     	dc.b fmins&$FF,$00,$00,$00
(1)  145/     29E :                     	endm
(1)  146/     29E :                     
(1)  147/     29E :                     ; ----------------------------------------------------
(1)  148/     29E :                     ; gInsFm - FM3 Special instrument/patch
(1)  149/     29E :                     ;
(1)  150/     29E :                     ; pitch | UNUSED, set to 0
(1)  151/     29E :                     ; fmins | 24-bit pointer to FM patch data
(1)  152/     29E :                     ; ----------------------------------------------------
(1)  153/     29E :                     
(1)  154/     29E :                     gInsFm3	macro pitch,fmins
(1)  155/     29E :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  156/     29E :                     	dc.b fmins&$FF,$00,$00,$00
(1)  157/     29E :                     	endm
(1)  158/     29E :                     
(1)  159/     29E :                     ; ----------------------------------------------------
(1)  160/     29E :                     ; gInsDac - DAC instrument
(1)  161/     29E :                     ;
(1)  162/     29E :                     ; pitch | Pitch/Octave
(1)  163/     29E :                     ; start | 24-bit pointer to DAC sample
(1)  164/     29E :                     ; flags | Flags: %0000000l
(1)  165/     29E :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  166/     29E :                     ; ----------------------------------------------------
(1)  167/     29E :                     
(1)  168/     29E :                     gInsDac	macro pitch,start,flags
(1)  169/     29E :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  170/     29E :                     	dc.b start&$FF,0,0,0
(1)  171/     29E :                     	endm
(1)  172/     29E :                     
(1)  173/     29E :                     ; ----------------------------------------------------
(1)  174/     29E :                     ; gInsPcm - Sega CD PCM Sample
(1)  175/     29E :                     ;
(1)  176/     29E :                     ; pitch | Pitch/Octave
(1)  177/     29E :                     ; start | 24-bit pointer to DAC sample
(1)  178/     29E :                     ; flags | Flags: %0000000l
(1)  179/     29E :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  180/     29E :                     ; ----------------------------------------------------
(1)  181/     29E :                     
(1)  182/     29E :                     gInsPcm	macro pitch,start,flags
(1)  183/     29E :                      if MCD|MARSCD
(1)  184/     29E :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  185/     29E :                     	dc.b start&$FF,0,0,0
(1)  186/     29E :                      else
(1)  187/     29E :                     	dc.b $00,$00,$00,$00
(1)  188/     29E :                     	dc.b $00,$00,$00,$00
(1)  189/     29E :                      endif
(1)  190/     29E :                     	endm
(1)  191/     29E :                     
(1)  192/     29E :                     ; ----------------------------------------------------
(1)  193/     29E :                     ; gInsPwm - Sega 32X PWM Sample
(1)  194/     29E :                     ;
(1)  195/     29E :                     ; pitch | Pitch/Octave
(1)  196/     29E :                     ; start | 24-bit pointer to DAC sample
(1)  197/     29E :                     ; flags | Flags: %000000sl
(1)  198/     29E :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  199/     29E :                     ;         s - Sample data is in Stereo
(1)  200/     29E :                     ; ----------------------------------------------------
(1)  201/     29E :                     
(1)  202/     29E :                     gInsPwm	macro pitch,start,flags
(1)  203/     29E :                      if MARS|MARSCD
(1)  204/     29E :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  205/     29E :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  206/     29E :                      else
(1)  207/     29E :                     	dc.b $00,$00,$00,$00
(1)  208/     29E :                     	dc.b $00,$00,$00,$00
(1)  209/     29E :                      endif
(1)  210/     29E :                     	endm
(1)  211/     29E :                     
     192/     29E :                     		include	"sound/driver/gema.asm"
(1)    1/     29E :                     ; ===========================================================================
(1)    2/     29E :                     ; -------------------------------------------------------------------
(1)    3/     29E :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/     29E :                     ; by GenesisFan64 2023-2024
(1)    5/     29E :                     ;
(1)    6/     29E :                     ; Features:
(1)    7/     29E :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     29E :                     ;   | All 8 channels with streaming support
(1)    9/     29E :                     ;   | for larger samples.
(1)   10/     29E :                     ;
(1)   11/     29E :                     ; - Support for 32X's PWM:
(1)   12/     29E :                     ;   | 7 pseudo-channels in either MONO
(1)   13/     29E :                     ;   | or STEREO.
(1)   14/     29E :                     ;
(1)   15/     29E :                     ; - WAVE playback at 16000hz (base) for
(1)   16/     29E :                     ;   | all sample-based channels:
(1)   17/     29E :                     ;   | DAC, PCM and PWM
(1)   18/     29E :                     ;
(1)   19/     29E :                     ; - DMA ROM protection for DAC
(1)   20/     29E :                     ;   | This keeps the wave playback in a
(1)   21/     29E :                     ;   | decent quality while doing any DMA
(1)   22/     29E :                     ;   | task in the 68k side.
(1)   23/     29E :                     ; - FM special mode with custom frequencies
(1)   24/     29E :                     ; - Autodetection for the PSG's Tone3 mode
(1)   25/     29E :                     ;
(1)   26/     29E :                     ; * Notes:
(1)   27/     29E :                     ; This driver uses the area $FFFF00-$FFFFFF
(1)   28/     29E :                     ; The Z80 writes a flag directly to RAM for
(1)   29/     29E :                     ; a workaround to bypass a data-reading
(1)   30/     29E :                     ; hardware limitation. (see Sound_Update)
(1)   31/     29E :                     ;
(1)   32/     29E :                     ; CURRENTLY THIS CAN ONLY BE USED HERE IN NikonaSDK
(1)   33/     29E :                     ; BECAUSE OF CROSS-REFERENCING LABELS BETWEEN THE
(1)   34/     29E :                     ; Z80 and 68K.
(1)   35/     29E :                     ; -------------------------------------------------------------------
(1)   36/     29E :                     
(1)   37/     29E :                     ; ====================================================================
(1)   38/     29E :                     ; --------------------------------------------------------
(1)   39/     29E :                     ; Variables
(1)   40/     29E :                     ; --------------------------------------------------------
(1)   41/     29E :                     
(1)   42/     29E :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   43/     29E :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   44/     29E :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   45/     29E :                     
(1)   46/     29E :                     ; Z80-area points:
(1)   47/     29E : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   48/     29E : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   49/     29E : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   50/     29E : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   51/     29E : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   52/     29E : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   53/     29E : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   54/     29E :                     
(1)   55/     29E :                     ; ====================================================================
(1)   56/     29E :                     ; --------------------------------------------------------
(1)   57/     29E :                     ; Labels
(1)   58/     29E :                     ; --------------------------------------------------------
(1)   59/     29E :                     
(1)   60/     29E : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_SoundBuff	; transferRom flag (shared with Z80)
(1)   61/     29E :                     
(1)   62/     29E :                     ; ====================================================================
(1)   63/     29E :                     ; --------------------------------------------------------
(1)   64/     29E :                     ; Initialize Sound
(1)   65/     29E :                     ; --------------------------------------------------------
(1)   66/     29E :                     
(1)   67/     29E :                     gemaInit:
(1)   68/     29E : 007C 0700           		ori.w	#$0700,sr
(1)   72/     2A2 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              2A8 : 1100             
(1)   73/     2AA : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              2B0 : 1200             
(1)   74/     2B2 :                     .wait:
(1)   75/     2B2 : 0839 0000 00A1      		btst	#0,(z80_bus).l
              2B8 : 1100             
(1)   76/     2BA : 66F6                		bne.s	.wait
(1)   77/     2BC : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   78/     2C2 : 2049                		move.l	a1,a0
(1)   79/     2C4 : 323C 1FFF           		move.w	#$1FFF,d1
(1)   80/     2C8 : 7000                		moveq	#0,d0
(1)   81/     2CA :                     .cleanup:
(1)   82/     2CA : 10C0                		move.b	d0,(a0)+
(1)   83/     2CC : 51C9 FFFC           		dbf	d1,.cleanup
(1)   84/     2D0 : 41F9 0000 1EDC      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   85/     2D6 : 303C 1F87           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   86/     2DA :                     .copy:
(1)   87/     2DA : 12D8                		move.b	(a0)+,(a1)+
(1)   88/     2DC : 51C8 FFFC           		dbf	d0,.copy
(1)   89/     2E0 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset
              2E6 : 1200             
(1)   90/     2E8 : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)   91/     2EC : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Write PAL mode flag from here
(1)   92/     2F2 : 0800 0006           		btst	#6,d0
(1)   93/     2F6 : 6708                		beq.s	.not_pal
(1)   94/     2F8 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+palMode).l
              2FE : 003E             
(1)   95/     300 :                     .not_pal:
(1)   96/     300 : 4E71                		nop
(1)   97/     302 : 4E71                		nop
(1)   98/     304 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
              30A : 1200             
(1)   99/     30C : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
              312 : 1100             
(1)  101/     314 :                     
(1)  102/     314 :                     ; ====================================================================
(1)  103/     314 :                     ; ----------------------------------------------------------------
(1)  104/     314 :                     ; gemaReset
(1)  105/     314 :                     ;
(1)  106/     314 :                     ; Reset sound to default sequence list
(1)  107/     314 :                     ; ----------------------------------------------------------------
(1)  108/     314 :                     
(1)  109/     314 :                     gemaReset:
(1)  110/     314 : 41F8 46DC           		lea	(MainGemaSeqList),a0
(1)  111/     318 : 6100 0140           		bsr	gemaSetMasterList
(1)  112/     31C : 7E05                		moveq	#6-1,d7				; Make sure it finishes.
(1)  113/     31E : 51CF FFFE           		dbf	d7,*
(1)  114/     322 : 4E75                		rts
(1)  115/     324 :                     
(1)  116/     324 :                     ; ====================================================================
(1)  117/     324 :                     ; ----------------------------------------------------------------
(1)  118/     324 :                     ; gemaUpdate
(1)  119/     324 :                     ;
(1)  120/     324 :                     ; Call this during DISPLAY ONLY and during your VBlank wait
(1)  121/     324 :                     ; (already called by System_Render)
(1)  122/     324 :                     ;
(1)  123/     324 :                     ; RAM-to-Z80 transferRom workaround:
(1)  124/     324 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  125/     324 :                     ; see it), The 68k CPU manually writes the RAM bytes from
(1)  126/     324 :                     ; here to the Z80's RAM
(1)  127/     324 :                     ; THIS IS REQUIRED if you want to play your the tracks
(1)  128/     324 :                     ; (and instruments) in case you use the ASIC-Stamp scaling/
(1)  129/     324 :                     ; rotation.
(1)  130/     324 :                     ;
(1)  131/     324 :                     ; SCD/CD32X:
(1)  132/     324 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  133/     324 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  134/     324 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  135/     324 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set for
(1)  136/     324 :                     ;   reading from there
(1)  137/     324 :                     ;
(1)  138/     324 :                     ; Sega Pico:
(1)  139/     324 :                     ; - TODO The entire Sound Driver will be here, translated from
(1)  140/     324 :                     ;   Z80 to 68k.
(1)  141/     324 :                     ; ----------------------------------------------------------------
(1)  142/     324 :                     
(1)  143/     324 :                     gemaUpdate:
(1)  147/     324 :                     	; ------------------------------------------------
(1)  148/     324 :                     	; If transferRom wants to read from 68k RAM
(1)  149/     324 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w		; Z80 WROTE the flag?
(1)  150/     328 : 674C                		beq.s	.no_task
(1)  151/     32A : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Clear here
(1)  152/     32E : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  153/     332 : 7E00                		moveq	#0,d7
(1)  154/     334 : 6142                		bsr	sndLockZ80
(1)  155/     336 : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Size != 0?
(1)  156/     33C : 6732                		beq.s	.no_size
(1)  157/     33E : 5347                		subq.w	#1,d7
(1)  158/     340 : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  159/     346 : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  160/     34C : 1C26                		move.b	-(a6),d6			; d6 - Source
(1)  161/     34E : 4846                		swap	d6
(1)  162/     350 : 1C26                		move.b	-(a6),d6
(1)  163/     352 : E14E                		lsl.w	#8,d6
(1)  164/     354 : 1C26                		move.b	-(a6),d6
(1)  165/     356 : 7A00                		moveq	#0,d5
(1)  166/     358 : 1A26                		move.b	-(a6),d5			; d5 - Dest
(1)  167/     35A : E14D                		lsl.w	#8,d5
(1)  168/     35C : 1A26                		move.b	-(a6),d5
(1)  169/     35E : DBC5                		add.l	d5,a5
(1)  170/     360 : 2846                		move.l	d6,a4
(1)  171/     362 :                     .copy_bytes:
(1)  172/     362 : 1ADC                		move.b	(a4)+,(a5)+
(1)  173/     364 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  174/     368 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; Clear LEN, breaks Z80 loop
              36E : 0030             
(1)  175/     370 :                     .no_size:
(1)  176/     370 : 611A                		bsr	sndUnlockZ80
(1)  177/     372 : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  178/     376 :                     .no_task:
(1)  180/     376 : 4E75                		rts
(1)  181/     378 :                     
(1)  182/     378 :                     ; ====================================================================
(1)  183/     378 :                     ; ------------------------------------------------
(1)  184/     378 :                     ; sndLockZ80
(1)  185/     378 :                     ;
(1)  186/     378 :                     ; Locks Z80, unlocks bus.
(1)  187/     378 :                     ; ------------------------------------------------
(1)  188/     378 :                     
(1)  189/     378 :                     sndLockZ80:
(1)  191/     378 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
              37E : 1100             
(1)  192/     380 :                     .wait:
(1)  193/     380 : 0839 0000 00A1      		btst	#0,(z80_bus).l
              386 : 1100             
(1)  194/     388 : 66F6                		bne.s	.wait
(1)  196/     38A : 4E75                		rts
(1)  197/     38C :                     
(1)  198/     38C :                     ; ------------------------------------------------
(1)  199/     38C :                     ; sndUnlockZ80
(1)  200/     38C :                     ;
(1)  201/     38C :                     ; Unlocks Z80, locks bus.
(1)  202/     38C :                     ; ------------------------------------------------
(1)  203/     38C :                     
(1)  204/     38C :                     sndUnlockZ80:
(1)  206/     38C : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
              392 : 1100             
(1)  208/     394 : 4E75                		rts
(1)  209/     396 :                     
(1)  210/     396 :                     ; ------------------------------------------------
(1)  211/     396 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  212/     396 :                     ;
(1)  213/     396 :                     ; d6 - commFifo index
(1)  214/     396 :                     ; ------------------------------------------------
(1)  215/     396 :                     
(1)  216/     396 :                     sndReq_Enter:
(1)  218/     396 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
              39C : 1100             
(1)  220/     39E : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  221/     3A2 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  222/     3A6 : 40E7                		move.w	sr,-(sp)
(1)  223/     3A8 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  224/     3AC : DEFC 0016           		adda	#(4*4)+2+4,sp			; Go back to the RTS jump
(1)  225/     3B0 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  226/     3B6 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  227/     3BC :                     .wait:
(1)  229/     3BC : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
              3C2 : 1100             
(1)  230/     3C4 : 66F6                		bne.s	.wait
(1)  232/     3C6 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  233/     3C8 : 4886                		ext.w	d6				; extend to 16 bits
(1)  234/     3CA : 4E75                		rts
(1)  235/     3CC :                     ; JUMP ONLY
(1)  236/     3CC :                     sndReq_Exit:
(1)  238/     3CC : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
              3D2 : 1100             
(1)  240/     3D4 : 9EFC 001A           		suba	#8+2+(4*4),sp
(1)  241/     3D8 : 46DF                		move.w	(sp)+,sr
(1)  242/     3DA : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  243/     3DE : DEFC 0008           		adda	#8,sp
(1)  244/     3E2 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  245/     3E6 : 4E75                		rts
(1)  246/     3E8 :                     
(1)  247/     3E8 :                     ; ------------------------------------------------
(1)  248/     3E8 :                     ; Send request id and arguments
(1)  249/     3E8 :                     ;
(1)  250/     3E8 :                     ; Input:
(1)  251/     3E8 :                     ; d7 - byte to write
(1)  252/     3E8 :                     ; d6 - index pointer
(1)  253/     3E8 :                     ; a5 - commZWrite, update index
(1)  254/     3E8 :                     ; a6 - commZfifo command list
(1)  255/     3E8 :                     ;
(1)  256/     3E8 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  257/     3E8 :                     ; ------------------------------------------------
(1)  258/     3E8 :                     
(1)  259/     3E8 :                     sndReq_scmd:
(1)  260/     3E8 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  261/     3EE : 5206                		addq.b	#1,d6				; next fifo pos
(1)  262/     3F0 : 0206 001F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  263/     3F4 : 600C                		bra.s	sndReq_sbyte
(1)  264/     3F6 :                     sndReq_slong:
(1)  265/     3F6 : 610A                		bsr	sndReq_sbyte
(1)  266/     3F8 : E09F                		ror.l	#8,d7
(1)  267/     3FA :                     sndReq_saddr:	; 24-bit address
(1)  268/     3FA : 6106                		bsr	sndReq_sbyte
(1)  269/     3FC : E09F                		ror.l	#8,d7
(1)  270/     3FE :                     sndReq_sword:
(1)  271/     3FE : 6102                		bsr	sndReq_sbyte
(1)  272/     400 : E09F                		ror.l	#8,d7
(1)  273/     402 :                     sndReq_sbyte:
(1)  274/     402 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  275/     406 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  276/     408 : 0206 001F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  277/     40C : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  278/     40E : 4E75                		rts
(1)  279/     410 :                     
(1)  280/     410 :                     ; --------------------------------------------------------
(1)  281/     410 :                     ; gemaDmaPause
(1)  282/     410 :                     ;
(1)  283/     410 :                     ; Call this BEFORE doing any DMA transfer
(1)  284/     410 :                     ;
(1)  285/     410 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  286/     410 :                     ; --------------------------------------------------------
(1)  287/     410 :                     
(1)  288/     410 :                     gemaDmaPause:
(1)  292/     410 : 2F07                		move.l	d7,-(sp)
(1)  293/     412 : 6100 FF64           		bsr	sndLockZ80
(1)  294/     416 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk).l	; Block flag for Z80
              41C : 002F             
(1)  295/     41E : 6100 FF6C           		bsr	sndUnlockZ80
(1)  296/     422 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  297/     426 : 51CF FFFE           		dbf	d7,*
(1)  298/     42A : 2E1F                		move.l	(sp)+,d7
(1)  299/     42C : 4E75                		rts
(1)  301/     42E :                     
(1)  302/     42E :                     ; --------------------------------------------------------
(1)  303/     42E :                     ; gemaDmaResume
(1)  304/     42E :                     ;
(1)  305/     42E :                     ; Call this AFTER finishing DMA transfer
(1)  306/     42E :                     ;
(1)  307/     42E :                     ; 32X: Clear the RV bit manually AFTER calling this.
(1)  308/     42E :                     ; --------------------------------------------------------
(1)  309/     42E :                     
(1)  310/     42E :                     gemaDmaResume:
(1)  314/     42E : 2F07                		move.l	d7,-(sp)
(1)  315/     430 : 6100 FF46           		bsr	sndLockZ80
(1)  316/     434 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk).l	; Unblock flag for Z80
              43A : 002F             
(1)  317/     43C : 6100 FF4E           		bsr	sndUnlockZ80
(1)  318/     440 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  319/     444 : 51CF FFFE           		dbf	d7,*
(1)  320/     448 : 2E1F                		move.l	(sp)+,d7
(1)  321/     44A : 4E75                		rts
(1)  323/     44C :                     
(1)  324/     44C :                     ; ====================================================================
(1)  325/     44C :                     ; --------------------------------------------------------
(1)  326/     44C :                     ; Subroutines
(1)  327/     44C :                     ;
(1)  328/     44C :                     ; USER Sound calls are here
(1)  329/     44C :                     ; --------------------------------------------------------
(1)  330/     44C :                     
(1)  331/     44C :                     ; --------------------------------------------------------
(1)  332/     44C :                     ; gemaTest
(1)  333/     44C :                     ;
(1)  334/     44C :                     ; For TESTING only.
(1)  335/     44C :                     ; --------------------------------------------------------
(1)  336/     44C :                     
(1)  337/     44C :                     gemaTest:
(1)  338/     44C : 6100 FF48           		bsr	sndReq_Enter
(1)  339/     450 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  340/     454 : 6192                		bsr	sndReq_scmd
(1)  341/     456 : 6000 FF74           		bra 	sndReq_Exit
(1)  342/     45A :                     
(1)  343/     45A :                     ; --------------------------------------------------------
(1)  344/     45A :                     ; gemaSetMasterList
(1)  345/     45A :                     ;
(1)  346/     45A :                     ; Sets the Master tracklist location, data can be stored
(1)  347/     45A :                     ; on ROM, RAM* and Word-RAM*
(1)  348/     45A :                     ;
(1)  349/     45A :                     ; Input:
(1)  350/     45A :                     ; a0 | 68k pointer
(1)  351/     45A :                     ;
(1)  352/     45A :                     ; Notes:
(1)  353/     45A :                     ; - ALL TRACKS MUST BE STOPPED, CALL gemaStopAll FIRST
(1)  354/     45A :                     ;
(1)  355/     45A :                     ; * RAM data (SCD/CD32X when using Stamps):
(1)  356/     45A :                     ;   Requires calling Sound_Update manually as a
(1)  357/     45A :                     ;   workaround for the Z80's limitation of not being
(1)  358/     45A :                     ;   able to read from RAM
(1)  359/     45A :                     ; * Word-RAM (SCD/CD32X):
(1)  360/     45A :                     ;   Make sure the Word-RAM permission is set to MAIN-CPU
(1)  361/     45A :                     ;   all the time.
(1)  362/     45A :                     ; --------------------------------------------------------
(1)  363/     45A :                     
(1)  364/     45A :                     gemaSetMasterList:
(1)  365/     45A : 6100 FF3A           		bsr	sndReq_Enter
(1)  366/     45E : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  367/     462 : 6184                		bsr	sndReq_scmd
(1)  368/     464 : 2E08                		move.l	a0,d7
(1)  369/     466 : 618E                		bsr	sndReq_slong
(1)  370/     468 : 6000 FF62           		bra 	sndReq_Exit
(1)  371/     46C :                     
(1)  372/     46C :                     ; --------------------------------------------------------
(1)  373/     46C :                     ; gemaPlaySeq
(1)  374/     46C :                     ;
(1)  375/     46C :                     ; Play a sequence
(1)  376/     46C :                     ;
(1)  377/     46C :                     ; Input:
(1)  378/     46C :                     ; d0.b | Sequence number
(1)  379/     46C :                     ; d1.b | Starting block
(1)  380/     46C :                     ; d2.b | Playback slot number
(1)  381/     46C :                     ;        If -1: Auto-search free slot
(1)  382/     46C :                     ; --------------------------------------------------------
(1)  383/     46C :                     
(1)  384/     46C :                     gemaPlaySeq:
(1)  385/     46C : 6100 FF28           		bsr	sndReq_Enter
(1)  386/     470 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  387/     474 : 6100 FF72           		bsr	sndReq_scmd
(1)  388/     478 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  389/     47A : 6186                		bsr	sndReq_sbyte
(1)  390/     47C : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  391/     47E : 6182                		bsr	sndReq_sbyte
(1)  392/     480 : 1E02                		move.b	d2,d7		; d2.b Slot
(1)  393/     482 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  394/     486 : 6000 FF44           		bra 	sndReq_Exit
(1)  395/     48A :                     
(1)  396/     48A :                     ; --------------------------------------------------------
(1)  397/     48A :                     ; gemaPlaySeqAuto
(1)  398/     48A :                     ;
(1)  399/     48A :                     ; Play a sequence into any free slot
(1)  400/     48A :                     ;
(1)  401/     48A :                     ; Input:
(1)  402/     48A :                     ; d0.b | Sequence number
(1)  403/     48A :                     ; d1.b | Starting block
(1)  404/     48A :                     ; --------------------------------------------------------
(1)  405/     48A :                     
(1)  406/     48A :                     gemaPlaySeqAuto:
(1)  407/     48A : 6100 FF0A           		bsr	sndReq_Enter
(1)  408/     48E : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  409/     492 : 6100 FF54           		bsr	sndReq_scmd
(1)  410/     496 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  411/     498 : 6100 FF68           		bsr	sndReq_sbyte
(1)  412/     49C : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  413/     49E : 6100 FF62           		bsr	sndReq_sbyte
(1)  414/     4A2 : 7EFF                		moveq	#-1,d7		; d2.b Slot
(1)  415/     4A4 : 6100 FF5C           		bsr	sndReq_sbyte
(1)  416/     4A8 : 6000 FF22           		bra 	sndReq_Exit
(1)  417/     4AC :                     
(1)  418/     4AC :                     ; --------------------------------------------------------
(1)  419/     4AC :                     ; gemaStopSeq
(1)  420/     4AC :                     ;
(1)  421/     4AC :                     ; Stops tracks with the same sequence number
(1)  422/     4AC :                     ;
(1)  423/     4AC :                     ; Input:
(1)  424/     4AC :                     ; d0.b | Sequence number to search for
(1)  425/     4AC :                     ;        If -1: Stop tracks with any sequence
(1)  426/     4AC :                     ; d1.b | Playback slot number
(1)  427/     4AC :                     ;        If -1: Stop all slots
(1)  428/     4AC :                     ; --------------------------------------------------------
(1)  429/     4AC :                     
(1)  430/     4AC :                     gemaStopSeq:
(1)  431/     4AC : 6100 FEE8           		bsr	sndReq_Enter
(1)  432/     4B0 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  433/     4B4 : 6100 FF32           		bsr	sndReq_scmd
(1)  434/     4B8 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  435/     4BA : 6100 FF46           		bsr	sndReq_sbyte
(1)  436/     4BE : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  437/     4C0 : 6100 FF40           		bsr	sndReq_sbyte
(1)  438/     4C4 : 6000 FF06           		bra 	sndReq_Exit
(1)  439/     4C8 :                     
(1)  440/     4C8 :                     ; --------------------------------------------------------
(1)  441/     4C8 :                     ; gemaStopAll
(1)  442/     4C8 :                     ;
(1)  443/     4C8 :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  444/     4C8 :                     ; --------------------------------------------------------
(1)  445/     4C8 :                     
(1)  446/     4C8 :                     gemaStopAll:
(1)  447/     4C8 : 6100 FECC           		bsr	sndReq_Enter
(1)  448/     4CC : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  449/     4D0 : 6100 FF16           		bsr	sndReq_scmd
(1)  450/     4D4 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  451/     4D6 : 6100 FF2A           		bsr	sndReq_sbyte
(1)  452/     4DA : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  453/     4DC : 6100 FF24           		bsr	sndReq_sbyte
(1)  454/     4E0 : 6000 FEEA           		bra 	sndReq_Exit
(1)  455/     4E4 :                     
(1)  456/     4E4 :                     ; --------------------------------------------------------
(1)  457/     4E4 :                     ; gemaFadeSeq
(1)  458/     4E4 :                     ;
(1)  459/     4E4 :                     ; Set Master volume to a track slot.
(1)  460/     4E4 :                     ;
(1)  461/     4E4 :                     ; Input:
(1)  462/     4E4 :                     ; d0.b | Target volume
(1)  463/     4E4 :                     ; d1.b | Playback slot number
(1)  464/     4E4 :                     ;        If -1: Apply to all slots
(1)  465/     4E4 :                     ;
(1)  466/     4E4 :                     ; Notes:
(1)  467/     4E4 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  468/     4E4 :                     ; - In v1.0 this only works during new notes on playback.
(1)  469/     4E4 :                     ; --------------------------------------------------------
(1)  470/     4E4 :                     
(1)  471/     4E4 :                     gemaFadeSeq:
(1)  472/     4E4 : 6100 FEB0           		bsr	sndReq_Enter
(1)  473/     4E8 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  474/     4EC : 6100 FEFA           		bsr	sndReq_scmd
(1)  475/     4F0 : 1E00                		move.b	d0,d7		; d0.b Target volume
(1)  476/     4F2 : 6100 FF0E           		bsr	sndReq_sbyte
(1)  477/     4F6 : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  478/     4F8 : 6100 FF08           		bsr	sndReq_sbyte
(1)  479/     4FC : 6000 FECE           		bra 	sndReq_Exit
(1)  480/     500 :                     
(1)  481/     500 :                     ; --------------------------------------------------------
(1)  482/     500 :                     ; gemaSetSeqVol
(1)  483/     500 :                     ;
(1)  484/     500 :                     ; Set Master volume to a Seq slot.
(1)  485/     500 :                     ;
(1)  486/     500 :                     ; Input:
(1)  487/     500 :                     ; d0.b | Master volume:
(1)  488/     500 :                     ;        $00-max $40-min
(1)  489/     500 :                     ; d1.b | Playback slot number
(1)  490/     500 :                     ;        If -1: Set to all slots
(1)  491/     500 :                     ;
(1)  492/     500 :                     ; Notes:
(1)  493/     500 :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  494/     500 :                     ; - In v1.0 this only works on (re)start
(1)  495/     500 :                     ;   or during new notes on playback.
(1)  496/     500 :                     ; --------------------------------------------------------
(1)  497/     500 :                     
(1)  498/     500 :                     gemaSetSeqVol:
(1)  499/     500 : 6100 FE94           		bsr	sndReq_Enter
(1)  500/     504 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  501/     508 : 6100 FEDE           		bsr	sndReq_scmd
(1)  502/     50C : 1E00                		move.b	d0,d7		; d1.b Volume data <--
(1)  503/     50E : 6100 FEF2           		bsr	sndReq_sbyte
(1)  504/     512 : 1E01                		move.b	d1,d7		; d0.b Slot
(1)  505/     514 : 6100 FEEC           		bsr	sndReq_sbyte
(1)  506/     518 : 6000 FEB2           		bra 	sndReq_Exit
(1)  507/     51C :                     
(1)  508/     51C :                     ; --------------------------------------------------------
(1)  509/     51C :                     ; gemaSetBeats
(1)  510/     51C :                     ;
(1)  511/     51C :                     ; Sets global sub-beats, affects ALL tracks.
(1)  512/     51C :                     ;
(1)  513/     51C :                     ; Input:
(1)  514/     51C :                     ; d0.w | sub-beats
(1)  515/     51C :                     ;
(1)  516/     51C :                     ; Note:
(1)  517/     51C :                     ; This gets auto-converted if Z80 is in PAL-speed
(1)  518/     51C :                     ; mode.
(1)  519/     51C :                     ; --------------------------------------------------------
(1)  520/     51C :                     
(1)  521/     51C :                     ; Ex. sub-beats 215 is tempo 125 on NTSC speed
(1)  522/     51C :                     
(1)  523/     51C :                     gemaSetBeats:
(1)  524/     51C : 6100 FE78           		bsr	sndReq_Enter
(1)  525/     520 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  526/     524 : 6100 FEC2           		bsr	sndReq_scmd
(1)  527/     528 : 3E00                		move.w	d0,d7
(1)  528/     52A : 6100 FED2           		bsr	sndReq_sword
(1)  529/     52E : 6000 FE9C           		bra 	sndReq_Exit
(1)  530/     532 :                     
     193/     532 :                     		include	"system/md/video.asm"
(1)    1/     532 :                     ; ===========================================================================
(1)    2/     532 :                     ; ----------------------------------------------------------------
(1)    3/     532 :                     ; Genesis VDP section
(1)    4/     532 :                     ; ----------------------------------------------------------------
(1)    5/     532 :                     
(1)    6/     532 :                     ; ====================================================================
(1)    7/     532 :                     ; --------------------------------------------------------
(1)    8/     532 :                     ; Settings
(1)    9/     532 :                     ; --------------------------------------------------------
(1)   10/     532 :                     
(1)   11/     532 : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/     532 : =$18                 MAX_MDMAPSPR		equ 24		; VDP Sprites with map data
(1)   13/     532 : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/     532 :                     
(1)   15/     532 : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/     532 : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/     532 : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/     532 : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/     532 : =$6000               DEF_PrintPal		equ $6000
(1)   20/     532 :                     
(1)   21/     532 : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/     532 :                     
(1)   23/     532 :                     ; ===================================================================
(1)   24/     532 :                     ; --------------------------------------------------------
(1)   25/     532 :                     ; Variables
(1)   26/     532 :                     ; --------------------------------------------------------
(1)   27/     532 :                     
(1)   28/     532 :                     ; VDPATT_PL0		equ $0000
(1)   29/     532 : =$2000               VDPATTR_PL1		equ $2000
(1)   30/     532 : =$4000               VDPATTR_PL2		equ $4000
(1)   31/     532 : =$6000               VDPATTR_PL3		equ $6000
(1)   32/     532 : =$8000               VDPATTR_HI		equ $8000
(1)   33/     532 :                     
(1)   34/     532 :                     ; ------------------------------------------------
(1)   35/     532 :                     ; Use these if you are not planning changing
(1)   36/     532 :                     ; the VRAM locations of the scrolling area(s)
(1)   37/     532 :                     ; ------------------------------------------------
(1)   38/     532 : =$C000               DEF_VRAM_FG		equ $C000
(1)   39/     532 : =$E000               DEF_VRAM_BG		equ $E000
(1)   40/     532 : =$D000               DEF_VRAM_WD		equ $D000
(1)   41/     532 : =$F800               DEF_VRAM_SPR		equ $F800
(1)   42/     532 : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   43/     532 :                     
(1)   44/     532 :                     ; ------------------------------------------------
(1)   45/     532 :                     ; H sizes for the current layer
(1)   46/     532 :                     ;
(1)   47/     532 :                     ; Note:
(1)   48/     532 :                     ; WINDOW's width changes between H32 and H40
(1)   49/     532 :                     ; resolution modes.
(1)   50/     532 :                     ; ------------------------------------------------
(1)   51/     532 : =$40                 DEF_HSIZE_32		equ $040
(1)   52/     532 : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   53/     532 : =$100                DEF_HSIZE_128		equ $100
(1)   54/     532 :                     
(1)   55/     532 :                     ; ------------------------------------------------
(1)   56/     532 :                     ; VDP registers
(1)   57/     532 :                     ; ------------------------------------------------
(1)   58/     532 :                     ; $80
(1)   59/     532 : =$2                  HVStop			equ $02
(1)   60/     532 : =$10                 HintEnbl		equ $10
(1)   61/     532 : =$1                  bitHVStop		equ 1
(1)   62/     532 : =$4                  bitHintEnbl		equ 4
(1)   63/     532 :                     ; $81
(1)   64/     532 : =$40                 DispEnbl 		equ $40
(1)   65/     532 : =$20                 VintEnbl 		equ $20
(1)   66/     532 : =$10                 DmaEnbl			equ $10
(1)   67/     532 : =$6                  bitDispEnbl		equ 6
(1)   68/     532 : =$5                  bitVintEnbl		equ 5
(1)   69/     532 : =$4                  bitDmaEnbl		equ 4
(1)   70/     532 : =$3                  bitV30			equ 3
(1)   71/     532 :                     
(1)   72/     532 :                     ; ------------------------------------------------
(1)   73/     532 :                     ; VDP VRAM bits
(1)   74/     532 :                     ; ------------------------------------------------
(1)   75/     532 :                     ; BYTE read:
(1)   76/     532 : =$7                  bitAttrPrio		equ 7
(1)   77/     532 : =$4                  bitAttrV		equ 4
(1)   78/     532 : =$3                  bitAttrH		equ 3
(1)   79/     532 :                     ; WORD read:
(1)   80/     532 : =$8000               AttrPrio		equ $8000
(1)   81/     532 : =$1000               AttrV			equ $1000
(1)   82/     532 : =$800                AttrH			equ $0800
(1)   83/     532 :                     
(1)   84/     532 :                     ; ------------------------------------------------
(1)   85/     532 :                     ; vdp_ctrl READ bits
(1)   86/     532 :                     ; Read as WORD
(1)   87/     532 :                     ; ------------------------------------------------
(1)   88/     532 : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   89/     532 : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   90/     532 : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   91/     532 : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   92/     532 : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   93/     532 : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   94/     532 : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   95/     532 : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   96/     532 : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   97/     532 : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)   98/     532 :                     
(1)   99/     532 :                     ; ====================================================================
(1)  100/     532 :                     ; ----------------------------------------------------------------
(1)  101/     532 :                     ; Structs
(1)  102/     532 :                     ; ----------------------------------------------------------------
(1)  103/     532 :                     
(1)  104/     532 :                     ; ------------------------------------------------
(1)  105/     532 :                     ; RAM_PalFadeList
(1)  106/       0 :                     palfd			struct
(1)  107/       0 :                     req			ds.b 1
(1)  108/       1 :                     delay			ds.b 1
(1)  109/       2 :                     start			ds.b 1
(1)  110/       3 :                     incr			ds.b 1
(1)  111/       4 :                     target			ds.b 1
(1)  112/       5 :                     timer			ds.b 1
(1)  113/       6 :                     num			ds.w 1
(1)  114/       8 :                     ; len		ds.l 0
(1)  115/     532 : =$8                  			endstruct
(1)  116/     532 :                     
(1)  117/     532 :                     ; ------------------------------------------------
(1)  118/     532 :                     ; RAM_MdMcd_Stamps
(1)  119/     532 :                     
(1)  120/       0 :                     mdstmp		struct
(1)  121/       0 :                     flags		ds.w 1		; Flags settings/status
(1)  122/       2 :                     vramMain	ds.w 1		; Main VRAM output *full*
(1)  123/       4 :                     vramSec		ds.w 1		; Secondary VRAM output *full*
(1)  124/       6 :                     vramSize	ds.w 1
(1)  125/       8 :                     vramLen		ds.w 1		; temporals
(1)  126/       A :                     vramIncr	ds.w 1		; ''
(1)  127/       C :                     stmpoutb	ds.w 1
(1)  128/       E :                     currOutFlip	ds.w 1
(1)  129/      10 :                     fdrop		ds.w 1
(1)  130/      12 :                     cellstorage	ds.l 1
(1)  131/      16 :                     dotIncr		ds.l 1
(1)  132/      1A :                     buffIncr	ds.l 1
(1)  133/      1E :                     ; len		ds.l 0
(1)  134/     532 : =$1E                 		endstruct
(1)  135/     532 :                     
(1)  136/     532 :                     ; ====================================================================
(1)  137/     532 :                     ; ----------------------------------------------------------------
(1)  138/     532 :                     ; RAM section
(1)  139/     532 :                     ; ----------------------------------------------------------------
(1)  140/     532 :                     
(1)  141/     532 : (MACRO)              			memory RAM_MdVideo
(1)  141/     532 : =$532                GLBL_LASTPC     := *
(1)  141/     532 :                                     dephase
(1)  141/FFFFFFFFFFFFC800 :                                     phase RAM_MDVIDEO
(1)  141/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)  142/FFFFFFFFFFFFC800 :                     	; Some 32X labels are in system/shared.asm
(1)  143/FFFFFFFFFFFFC800 :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  144/FFFFFFFFFFFFC840 :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  145/FFFFFFFFFFFFC9C0 :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  146/FFFFFFFFFFFFCC40 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  147/FFFFFFFFFFFFD000 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  148/FFFFFFFFFFFFD050 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  149/FFFFFFFFFFFFD550 :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  150/FFFFFFFFFFFFD5D0 :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  151/FFFFFFFFFFFFD650 :                     ; RAM_VidPrntList		ds.w 3*24			; Video_Print list: Address, Type
(1)  152/FFFFFFFFFFFFD650 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  153/FFFFFFFFFFFFD652 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  154/FFFFFFFFFFFFD654 :                     RAM_SprOffsetX		ds.w 1				; X spriteset position
(1)  155/FFFFFFFFFFFFD656 :                     RAM_SprOffsetY		ds.w 1				; Y spriteset position
(1)  156/FFFFFFFFFFFFD658 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  157/FFFFFFFFFFFFD65C :                     
(1)  158/FFFFFFFFFFFFD65C :                     	; *** Variables NOT cleared DURING SCREEN CHANGES:
(1)  159/FFFFFFFFFFFFD65C :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  160/FFFFFFFFFFFFD7DC :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  161/FFFFFFFFFFFFD7E0 :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  162/FFFFFFFFFFFFD7E2 :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  163/FFFFFFFFFFFFD7E4 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  164/FFFFFFFFFFFFD7E6 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  165/FFFFFFFFFFFFD7E8 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  166/FFFFFFFFFFFFD7EA :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  167/FFFFFFFFFFFFD7EC :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  168/FFFFFFFFFFFFD7EE :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  169/FFFFFFFFFFFFD7F0 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  170/FFFFFFFFFFFFD7F2 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  171/FFFFFFFFFFFFD7F4 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  172/FFFFFFFFFFFFD7F6 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  173/FFFFFFFFFFFFD7F8 :                     sizeof_mdvid		ds.l 0
(1)  174/FFFFFFFFFFFFD7FC : (MACRO)              			endmemory
(1)  174/    152E :                     .here:          dephase
(1)  174/    152E :                                     ds.b -(.here-GLBL_LASTORG)
(1)  174/     532 :                                     phase GLBL_LASTPC
(1)  175/     532 :                     
(1)  176/     532 :                     ; ====================================================================
(1)  177/     532 :                     ; ----------------------------------------------------------------
(1)  178/     532 :                     ; Initialize Genesis video
(1)  179/     532 :                     ;
(1)  180/     532 :                     ; Uses:
(1)  181/     532 :                     ; d5-d7/a5-a6
(1)  182/     532 :                     ; ----------------------------------------------------------------
(1)  183/     532 :                     
(1)  184/     532 :                     Video_Init:
(1)  185/     532 : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  186/     536 : 7C00                		moveq	#0,d6
(1)  187/     538 : 3E3C 0FF7           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  188/     53C :                     .clr_ram:
(1)  189/     53C : 1CC6                		move.b	d6,(a6)+
(1)  190/     53E : 51CF FFFC           		dbf	d7,.clr_ram
(1)  191/     542 : 4DF8 D65C           		lea	(RAM_VdpDmaList).w,a6			; Reset the DMA blast list
(1)  192/     546 : 4BFA 005E           		lea	.dma_entry(pc),a5
(1)  193/     54A : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  194/     54E :                     .copy_dma:
(1)  195/     54E : 2CD5                		move.l	(a5),(a6)+
(1)  196/     550 : 2CED 0004           		move.l	4(a5),(a6)+
(1)  197/     554 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  198/     558 : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  199/     55C : 51CF FFF0           		dbf	d7,.copy_dma
(1)  200/     560 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  201/     564 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  202/     568 :                     .clr_d:
(1)  203/     568 : 429E                		clr.l	(a6)+
(1)  204/     56A : 429E                		clr.l	(a6)+
(1)  205/     56C : 429E                		clr.l	(a6)+
(1)  206/     56E : 429E                		clr.l	(a6)+
(1)  207/     570 : 51CF FFF6           		dbf	d7,.clr_d
(1)  208/     574 :                     
(1)  209/     574 : 4278 D7E0           		clr.w	(RAM_IndxPalFade).w			; Reset all these indexes
(1)  210/     578 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1)  211/     57C : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  212/     580 :                     .clr_preq:
(1)  213/     580 : 429E                		clr.l	(a6)+
(1)  214/     582 : 429E                		clr.l	(a6)+
(1)  215/     584 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  225/     588 : 4CBA 000F 002A      		movem.w	.def_regset(pc),d0-d3
(1)  226/     58E : 48B8 000F D7F0      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  227/     594 : 23F8 D7F0 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
              59A : 0004             
(1)  228/     59C : 23F8 D7F4 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
              5A2 : 0004             
(1)  229/     5A4 : 6018                		bra	Video_Default
(1)  230/     5A6 :                     
(1)  231/     5A6 :                     ; --------------------------------------------------------
(1)  232/     5A6 :                     ; DMA blast base entry
(1)  233/     5A6 :                     .dma_entry:
(1)  234/     5A6 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  235/     5AA : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  236/     5B0 : 4000 0080           		dc.l $40000080 			; VDP write with DMA
(1)  237/     5B4 : 0000                		dc.w $0000			; Patch for the first 4 pixels (SCD/CD32X only)
(1)  238/     5B6 :                     		align 2
(1)  239/     5B6 :                     .def_regset:
(1)  240/     5B6 : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
              5BC : 8C00             
(1)  241/     5BE :                     		align 2
(1)  242/     5BE :                     
(1)  243/     5BE :                     ; --------------------------------------------------------
(1)  244/     5BE :                     ; Video_Default
(1)  245/     5BE :                     ; --------------------------------------------------------
(1)  246/     5BE :                     
(1)  247/     5BE :                     Video_Default:
(1)  257/     5BE : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l
              5C4 : 00C0 0004          
(1)  258/     5C8 : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02 (failsafe)
              5CE : 0004             
(1)  259/     5D0 : 31FC C000 D7E4      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  260/     5D6 : 31FC E000 D7E6      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  261/     5DC : 31FC D000 D7E8      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  262/     5E2 : 31FC F800 D7EA      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  263/     5E8 : 31FC FC00 D7EC      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  264/     5EE : 31FC 1000 D7EE      		move.w	#$1000,(RAM_VdpMapSize).w		; Map size for FG/BG
(1)  265/     5F4 : 6100 0444           		bsr	Video_UpdMapVram
(1)  266/     5F8 : 6100 0492           		bsr	Video_UpdSprHVram
(1)  267/     5FC : 7001                		moveq	#1,d0					; Size H64 V32
(1)  268/     5FE : 7200                		moveq	#0,d1
(1)  269/     600 : 6100 04C4           		bsr	Video_SetMapSize
(1)  270/     604 : 7001                		moveq	#1,d0					; Resolution 320x224
(1)  271/     606 : 7200                		moveq	#0,d1
(1)  272/     608 : 6000 03DC           		bra	Video_Resolution
(1)  273/     60C :                     
(1)  274/     60C :                     ; ====================================================================
(1)  275/     60C :                     ; --------------------------------------------------------
(1)  276/     60C :                     ; Video_Render
(1)  277/     60C :                     ;
(1)  278/     60C :                     ; Call this during VBlank to update the VDP visuals
(1)  279/     60C :                     ; and process the DMA BLAST list, also resets a
(1)  280/     60C :                     ; few variables.
(1)  281/     60C :                     ; (This is already called on System_Render)
(1)  282/     60C :                     ;
(1)  283/     60C :                     ; Uses:
(1)  284/     60C :                     ; ALL
(1)  285/     60C :                     ; --------------------------------------------------------
(1)  286/     60C :                     
(1)  287/     60C :                     Video_Render:
(1)  288/     60C : 6100 0362           		bsr	Video_DmaOn
(1)  289/     610 : 6100 10A6           		bsr	System_DmaEnter_RAM
(1)  290/     614 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  291/     61A : 3E38 D7EA           		move.w	(RAM_VdpVramSpr).w,d7
(1)  292/     61E : 3A38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  293/     622 : 3C07                		move.w	d7,d6
(1)  294/     624 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  295/     628 : 0047 4000           		ori.w	#$4000,d7
(1)  296/     62C : E55E                		rol.w	#2,d6
(1)  297/     62E : 0246 0003           		andi.w	#%11,d6
(1)  298/     632 : 8C7C 0080           		or.w	#$80,d6
(1)  299/     636 : 3805                		move.w	d5,d4
(1)  300/     638 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  301/     63C : 0045 4000           		ori.w	#$4000,d5
(1)  302/     640 : E55C                		rol.w	#2,d4
(1)  303/     642 : 0244 0003           		andi.w	#%11,d4
(1)  304/     646 : 887C 0080           		or.w	#$80,d4
(1)  305/     64A : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  306/     650 : 2CBC 96E8 9528      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  307/     656 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  308/     65A : 3C87                		move.w	d7,(a6)
(1)  309/     65C : 3F06                		move.w	d6,-(sp)
(1)  310/     65E : 3C9F                		move.w	(sp)+,(a6)
(1)  311/     660 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  312/     666 : 2CBC 96E6 9520      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  313/     66C : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  314/     670 : 3C85                		move.w	d5,(a6)
(1)  315/     672 : 3F04                		move.w	d4,-(sp)
(1)  316/     674 : 3C9F                		move.w	(sp)+,(a6)
(1)  317/     676 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  318/     67C : 2CBC 96E8 9500      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  319/     682 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  320/     686 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  321/     68A : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  322/     68E : 3C9F                		move.w	(sp)+,(a6)
(1)  323/     690 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  324/     696 : 2CBC 96EA 95A8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  325/     69C : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  326/     6A0 : 3CBC C000           		move.w	#$C000,(a6)
(1)  327/     6A4 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  328/     6A8 : 3C9F                		move.w	(sp)+,(a6)
(1)  329/     6AA : 6100 1010           		bsr	System_DmaExit_RAM
(1)  330/     6AE : 6100 02CC           		bsr	Video_DmaOff
(1)  331/     6B2 :                     
(1)  332/     6B2 :                     ; --------------------------------------------------------
(1)  333/     6B2 :                     ; Struct:
(1)  334/     6B2 :                     ; dc.w $94xx,$93xx		; Size
(1)  335/     6B2 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  336/     6B2 :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  337/     6B2 :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  338/     6B2 : 4A78 D652           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  339/     6B6 : 6642                		bne.s	.exit
(1)  340/     6B8 : 4A78 D650           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  341/     6BC : 673C                		beq.s	.exit
(1)  342/     6BE : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  343/     6C4 : 47F8 D65C           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  344/     6C8 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  345/     6CC : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  346/     6D0 : 3887                		move.w	d7,(a4)
(1)  347/     6D2 : 6100 0FAA           		bsr	System_DmaEnter_ROM
(1)  348/     6D6 : 4A78 D650           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  349/     6DA : 6714                		beq.s	.end
(1)  350/     6DC : 289B                		move.l	(a3)+,(a4)			; Size
(1)  351/     6DE : 289B                		move.l	(a3)+,(a4)			; Source
(1)  352/     6E0 : 389B                		move.w	(a3)+,(a4)
(1)  353/     6E2 :                     	; CD/CD32X
(1)  366/     6E2 : 389B                		move.w	(a3)+,(a4)			; Normal VDP control write
(1)  367/     6E4 : 389B                		move.w	(a3)+,(a4)			; *** CPU freezes ***
(1)  368/     6E6 : D6FC 0002           		adda	#2,a3
(1)  370/     6EA : 5378 D650           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  371/     6EE : 60E6                		bra.s	.next
(1)  372/     6F0 :                     .end:
(1)  373/     6F0 : 6100 0F90           		bsr	System_DmaExit_ROM
(1)  374/     6F4 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  375/     6F8 : 3887                		move.w	d7,(a4)
(1)  376/     6FA :                     .exit:
(1)  377/     6FA : 4E75                		rts
(1)  378/     6FC :                     
(1)  379/     6FC :                     ; ====================================================================
(1)  380/     6FC :                     ; --------------------------------------------------------
(1)  381/     6FC :                     ; Video_BuildSprites
(1)  382/     6FC :                     ;
(1)  383/     6FC :                     ; Build VDP Sprite pieces and maps
(1)  384/     6FC :                     ; --------------------------------------------------------
(1)  385/     6FC :                     
(1)  386/     6FC :                     Video_BuildSprites:
(1)  387/     6FC : 31FC 0001 D7E2      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  388/     702 : 4DF8 D050           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  389/     706 : 3C38 D7E2           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  390/     70A : BC7C 0050           		cmp.w	#80,d6
(1)  391/     70E : 6C00 017C           		bge	.stop_all
(1)  392/     712 : 3A06                		move.w	d6,d5
(1)  393/     714 : 5345                		subq.w	#1,d5
(1)  394/     716 : 6B04                		bmi	.first_spr
(1)  395/     718 : E74D                		lsl.w	#3,d5
(1)  396/     71A : DCC5                		adda	d5,a6
(1)  397/     71C :                     .first_spr:
(1)  398/     71C : 4BF8 C9C0           		lea	(RAM_SprPzList).w,a5
(1)  399/     720 : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  400/     724 :                     .next_pz:
(1)  401/     724 : 0C46 0050           		cmpi.w	#80,d6
(1)  402/     728 : 6E00 0162           		bgt	.stop_all
(1)  403/     72C : 0815 0007           		btst	#7,(a5)
(1)  404/     730 : 6722                		beq	.no_slot_s
(1)  405/     732 : 3015                		move.w	(a5),d0				; This slot is used?
(1)  406/     734 : 3200                		move.w	d0,d1
(1)  407/     736 : 0241 3C00           		andi.w	#$3C00,d1
(1)  408/     73A : E449                		lsr.w	#2,d1
(1)  409/     73C : D246                		add.w	d6,d1
(1)  410/     73E : 342D 0004           		move.w	4(a5),d2
(1)  411/     742 : 362D 0002           		move.w	2(a5),d3
(1)  412/     746 : 0240 03FF           		andi.w	#$03FF,d0
(1)  413/     74A : 3CC0                		move.w	d0,(a6)+
(1)  414/     74C : 3CC1                		move.w	d1,(a6)+
(1)  415/     74E : 3CC2                		move.w	d2,(a6)+
(1)  416/     750 : 3CC3                		move.w	d3,(a6)+
(1)  417/     752 : 5246                		addq.w	#1,d6
(1)  418/     754 :                     .no_slot_s:
(1)  419/     754 : DAFC 0008           		adda	#$08,a5
(1)  420/     758 : 51CF FFCA           		dbf	d7,.next_pz
(1)  421/     75C : 4BF8 C840           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  422/     760 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  423/     764 :                     .next:
(1)  424/     764 : 0815 0007           		btst	#7,(a5)
(1)  425/     768 : 6700 0118           		beq	.no_map
(1)  426/     76C : 2055                		move.l	(a5),a0
(1)  427/     76E : 4847                		swap	d7
(1)  428/     770 : 7000                		moveq	#0,d0
(1)  429/     772 : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  430/     776 : D040                		add.w	d0,d0
(1)  431/     778 : 3030 0000           		move.w	(a0,d0.w),d0
(1)  432/     77C : 41F0 0000           		lea	(a0,d0.w),a0
(1)  433/     780 : 3A18                		move.w	(a0)+,d5
(1)  434/     782 : 6700 00FE           		beq	.no_map
(1)  435/     786 : 5345                		subq.w	#1,d5
(1)  436/     788 :                     .mk_pz:
(1)  437/     788 : 0C46 0050           		cmpi.w	#80,d6
(1)  438/     78C : 6E00 00FE           		bgt	.stop_all
(1)  439/     790 : 4845                		swap	d5
(1)  440/     792 : 4846                		swap	d6
(1)  441/     794 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  442/     796 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  443/     798 : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  444/     79A : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  445/     7A0 : 6710                		beq.s	.ex_vram
(1)  446/     7A2 : 3801                		move.w	d1,d4
(1)  447/     7A4 : 0241 000C           		andi.w	#%1100,d1
(1)  448/     7A8 : 0244 0003           		andi.w	#%0011,d4
(1)  449/     7AC : E24C                		lsr.w	#1,d4
(1)  450/     7AE : 8244                		or.w	d4,d1
(1)  451/     7B0 : E24A                		lsr.w	#1,d2
(1)  452/     7B2 :                     .ex_vram:
(1)  453/     7B2 : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  454/     7B6 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  455/     7B8 : 4880                		ext.w	d0
(1)  456/     7BA : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  457/     7BE : 3805                		move.w	d5,d4
(1)  458/     7C0 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  459/     7C6 : 670E                		beq.s	.ex_vrams
(1)  460/     7C8 : 3805                		move.w	d5,d4
(1)  461/     7CA : 0244 F800           		andi.w	#$F800,d4
(1)  462/     7CE : 0245 07FF           		andi.w	#$07FF,d5
(1)  463/     7D2 : E24D                		lsr.w	#1,d5
(1)  464/     7D4 : 8A44                		or.w	d4,d5
(1)  465/     7D6 :                     .ex_vrams:
(1)  466/     7D6 : 3805                		move.w	d5,d4
(1)  467/     7D8 : 0244 1000           		andi.w	#$1000,d4
(1)  468/     7DC : 6710                		beq.s	.vram_v
(1)  469/     7DE : 4440                		neg.w	d0
(1)  470/     7E0 : 0440 0008           		subi.w	#8,d0
(1)  471/     7E4 : 3C01                		move.w	d1,d6
(1)  472/     7E6 : 0246 0003           		andi.w	#%0011,d6
(1)  473/     7EA : E74E                		lsl.w	#3,d6
(1)  474/     7EC : 9046                		sub.w	d6,d0
(1)  475/     7EE :                     .vram_v:
(1)  476/     7EE : 3805                		move.w	d5,d4
(1)  477/     7F0 : 0244 0800           		andi.w	#$0800,d4
(1)  478/     7F4 : 6710                		beq.s	.vram_h
(1)  479/     7F6 : 4443                		neg.w	d3
(1)  480/     7F8 : 0443 0008           		subi.w	#8,d3
(1)  481/     7FC : 3C01                		move.w	d1,d6
(1)  482/     7FE : 0246 000C           		andi.w	#%1100,d6
(1)  483/     802 : DC46                		add.w	d6,d6
(1)  484/     804 : 9646                		sub.w	d6,d3
(1)  485/     806 :                     .vram_h:
(1)  486/     806 : D445                		add.w	d5,d2
(1)  487/     808 : 4845                		swap	d5
(1)  488/     80A : 4846                		swap	d6
(1)  489/     80C : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  490/     810 : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  491/     814 : D078 D656           		add.w	(RAM_SprOffsetY).w,d0
(1)  492/     818 : 9678 D654           		sub.w	(RAM_SprOffsetX).w,d3
(1)  493/     81C : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  494/     820 : 6C5C                		bge.s	.no_pz
(1)  495/     822 : 3801                		move.w	d1,d4
(1)  496/     824 : 0244 000C           		andi.w	#%1100,d4
(1)  497/     828 : D844                		add.w	d4,d4
(1)  498/     82A : D87C 0008           		add.w	#8,d4
(1)  499/     82E : 3E03                		move.w	d3,d7
(1)  500/     830 : DE44                		add.w	d4,d7
(1)  501/     832 : 6B4A                		bmi.s	.no_pz
(1)  502/     834 : 383C 00F0           		move.w	#240,d4
(1)  503/     838 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  504/     83E : 6702                		beq.s	.ex_yext
(1)  505/     840 : D844                		add.w	d4,d4
(1)  506/     842 :                     .ex_yext:
(1)  507/     842 : B044                		cmp.w	d4,d0
(1)  508/     844 : 6C38                		bge.s	.no_pz
(1)  509/     846 : 3801                		move.w	d1,d4
(1)  510/     848 : 0244 0003           		andi.w	#%0011,d4
(1)  511/     84C : E74C                		lsl.w	#3,d4
(1)  512/     84E : D87C 0008           		add.w	#8,d4
(1)  513/     852 : 3E00                		move.w	d0,d7
(1)  514/     854 : DE44                		add.w	d4,d7
(1)  515/     856 : 6B26                		bmi.s	.no_pz
(1)  516/     858 : E149                		lsl.w	#8,d1			; Size + Link
(1)  517/     85A : 8246                		or.w	d6,d1
(1)  518/     85C : 0640 0080           		addi.w	#$80,d0
(1)  519/     860 : 3838 D7F6           		move.w	(RAM_VdpRegSetC).w,d4
(1)  520/     864 : 0804 0002           		btst	#2,d4
(1)  521/     868 : 6704                		beq.s	.dont_add
(1)  522/     86A : 0640 0080           		addi.w	#$80,d0
(1)  523/     86E :                     .dont_add:
(1)  524/     86E : 0643 0080           		addi.w	#$80,d3
(1)  525/     872 : 3CC0                		move.w	d0,(a6)+
(1)  526/     874 : 3CC1                		move.w	d1,(a6)+
(1)  527/     876 : 3CC2                		move.w	d2,(a6)+
(1)  528/     878 : 3CC3                		move.w	d3,(a6)+
(1)  529/     87A : DC7C 0001           		add.w	#1,d6
(1)  530/     87E :                     .no_pz:
(1)  531/     87E : 51CD FF08           		dbf	d5,.mk_pz
(1)  532/     882 :                     .no_map:
(1)  533/     882 : DAFC 0010           		adda	#$10,a5
(1)  534/     886 : 4847                		swap	d7
(1)  535/     888 :                     .no_slot:
(1)  536/     888 : 51CF FEDA           		dbf	d7,.next
(1)  537/     88C :                     .stop_all:
(1)  538/     88C : 614A                		bsr	vid_CheckLastSpr
(1)  539/     88E : 31C6 D7E2           		move.w	d6,(RAM_SprLinkNum).w
(1)  540/     892 :                     
(1)  541/     892 :                     ; --------------------------------------------------------
(1)  542/     892 :                     ; Reset slots
(1)  543/     892 :                     ; --------------------------------------------------------
(1)  544/     892 :                     
(1)  545/     892 :                     .freeze:
(1)  546/     892 : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1)  547/     896 : 7E4F                		moveq	#80-1,d7
(1)  548/     898 : 7C08                		moveq	#$08,d6
(1)  549/     89A :                     .chk_spr_r:
(1)  550/     89A : 1A16                		move.b	(a6),d5
(1)  551/     89C : 0805 0007           		btst	#7,d5
(1)  552/     8A0 : 670C                		beq.s	.no_slot_r
(1)  553/     8A2 : 0805 0006           		btst	#6,d5
(1)  554/     8A6 : 6706                		beq.s	.no_slot_r
(1)  555/     8A8 : 4296                		clr.l	(a6)
(1)  556/     8AA : 42AE 0004           		clr.l	4(a6)
(1)  557/     8AE :                     .no_slot_r:
(1)  558/     8AE : DCC6                		adda	d6,a6
(1)  559/     8B0 : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  560/     8B4 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  561/     8B8 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  562/     8BA : 7C10                		moveq	#$10,d6
(1)  563/     8BC :                     .chk_spr_mr:
(1)  564/     8BC : 1A16                		move.b	(a6),d5
(1)  565/     8BE : 0805 0007           		btst	#7,d5
(1)  566/     8C2 : 670C                		beq.s	.no_slot_mr
(1)  567/     8C4 : 0805 0006           		btst	#6,d5
(1)  568/     8C8 : 6706                		beq.s	.no_slot_mr
(1)  569/     8CA : 4296                		clr.l	(a6)
(1)  570/     8CC : 42AE 0004           		clr.l	4(a6)
(1)  571/     8D0 :                     .no_slot_mr:
(1)  572/     8D0 : DCC6                		adda	d6,a6
(1)  573/     8D2 : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  574/     8D6 : 4E75                		rts
(1)  575/     8D8 :                     
(1)  576/     8D8 :                     ; --------------------------------------------------------
(1)  577/     8D8 :                     ; d6 - Current link
(1)  578/     8D8 :                     
(1)  579/     8D8 :                     vid_CheckLastSpr:
(1)  580/     8D8 : 4DF8 D050           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  581/     8DC : 0C46 0001           		cmpi.w	#1,d6
(1)  582/     8E0 : 6710                		beq.s	.blnk_first
(1)  583/     8E2 : 0C46 0050           		cmpi.w	#80,d6
(1)  584/     8E6 : 6E10                		bgt.s	.last_one
(1)  585/     8E8 : 3E06                		move.w	d6,d7
(1)  586/     8EA : 0447 0001           		subi.w	#1,d7
(1)  587/     8EE : E74F                		lsl.w	#3,d7
(1)  588/     8F0 : DCC7                		adda	d7,a6
(1)  589/     8F2 :                     .blnk_first:
(1)  590/     8F2 : 429E                		clr.l	(a6)+
(1)  591/     8F4 : 429E                		clr.l	(a6)+
(1)  592/     8F6 : 6010                		bra.s	.spr_exit
(1)  593/     8F8 :                     .last_one:
(1)  594/     8F8 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  595/     8FC : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  596/     900 : 0247 0F00           		andi.w	#$0F00,d7
(1)  597/     904 : 3D47 0002           		move.w	d7,2(a6)
(1)  598/     908 :                     .spr_exit:
(1)  599/     908 : 4E75                		rts
(1)  600/     90A :                     
(1)  601/     90A :                     ; ====================================================================
(1)  602/     90A :                     ; --------------------------------------------------------
(1)  603/     90A :                     ; Subroutines
(1)  604/     90A :                     ; --------------------------------------------------------
(1)  605/     90A :                     
(1)  606/     90A :                     ; --------------------------------------------------------
(1)  607/     90A :                     ; Video_Clear
(1)  608/     90A :                     ;
(1)  609/     90A :                     ; Clears VDP VRAM and other RAM sections
(1)  610/     90A :                     ;
(1)  611/     90A :                     ; Breaks:
(1)  612/     90A :                     ; ALL
(1)  613/     90A :                     ; --------------------------------------------------------
(1)  614/     90A :                     
(1)  615/     90A :                     Video_Clear:
(1)  624/     90A : 7C00                		moveq	#0,d6
(1)  625/     90C : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  626/     910 : 3E3C 0E57           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  627/     914 :                     .clr_me:
(1)  628/     914 : 1CC6                		move.b	d6,(a6)+
(1)  629/     916 : 51CF FFFC           		dbf	d7,.clr_me
(1)  630/     91A : 303C 0000           		move.w	#0,d0
(1)  631/     91E : 323C 0000           		move.w	#0,d1
(1)  632/     922 : 343C FFC0           		move.w	#cell_vram($7FE),d2
(1)  633/     926 : 6100 02D6           		bsr	Video_Fill
(1)  634/     92A :                     
(1)  635/     92A :                     ; --------------------------------------------------------
(1)  636/     92A :                     ; Video_ClearScreen
(1)  637/     92A :                     ;
(1)  638/     92A :                     ; Clears ALL 3 map layers.
(1)  639/     92A :                     ; --------------------------------------------------------
(1)  640/     92A :                     
(1)  641/     92A :                     Video_ClearScreen:
(1)  642/     92A : 7000                		moveq	#0,d0
(1)  643/     92C : 3238 D7E4           		move.w	(RAM_VdpVramFG).w,d1
(1)  644/     930 : 3438 D7EE           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  645/     934 : 6100 02C8           		bsr	Video_Fill
(1)  646/     938 : 3238 D7E6           		move.w	(RAM_VdpVramBG).w,d1
(1)  647/     93C : 6100 02C0           		bsr	Video_Fill
(1)  648/     940 : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  649/     944 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  650/     948 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  651/     94C : 6702                		beq.s	.not_small
(1)  652/     94E : D442                		add.w	d2,d2			; Size $1000
(1)  653/     950 :                     .not_small:
(1)  654/     950 : 3238 D7E8           		move.w	(RAM_VdpVramWD).w,d1
(1)  655/     954 : 6000 02A8           		bra	Video_Fill
(1)  656/     958 :                     
(1)  657/     958 :                     ; --------------------------------------------------------
(1)  658/     958 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  659/     958 :                     ;
(1)  660/     958 :                     ; Enable/Disable VDP Display
(1)  661/     958 :                     ; --------------------------------------------------------
(1)  662/     958 :                     
(1)  663/     958 :                     Video_DisplayOn:
(1)  664/     958 : 3F07                		move.w	d7,-(sp)
(1)  665/     95A : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  666/     95E : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  667/     962 : 6022                		bra.s	vid_WrtReg01
(1)  668/     964 :                     Video_DisplayOff:
(1)  669/     964 : 3F07                		move.w	d7,-(sp)
(1)  670/     966 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  671/     96A : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  672/     96E : 6016                		bra.s	vid_WrtReg01
(1)  673/     970 :                     
(1)  674/     970 :                     ; --------------------------------------------------------
(1)  675/     970 :                     ; Video_DmaOn, Video_DmaOff
(1)  676/     970 :                     ;
(1)  677/     970 :                     ; Enable/Disable DMA
(1)  678/     970 :                     ; --------------------------------------------------------
(1)  679/     970 :                     
(1)  680/     970 :                     Video_DmaOn:
(1)  681/     970 : 3F07                		move.w	d7,-(sp)
(1)  682/     972 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  683/     976 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  684/     97A : 600A                		bra.s	vid_WrtReg01
(1)  685/     97C :                     Video_DmaOff:
(1)  686/     97C : 3F07                		move.w	d7,-(sp)
(1)  687/     97E : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  688/     982 : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  689/     986 :                     
(1)  690/     986 :                     ; ------------------------------------------------
(1)  691/     986 :                     
(1)  692/     986 :                     vid_WrtReg01:
(1)  693/     986 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  694/     98C : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  695/     990 : 3E1F                		move.w	(sp)+,d7
(1)  696/     992 : 4E75                		rts
(1)  697/     994 :                     
(1)  698/     994 :                     ; --------------------------------------------------------
(1)  699/     994 :                     ; Video_IntEnable
(1)  700/     994 :                     ;
(1)  701/     994 :                     ; Enable or Disable VBlank, HBlank and External
(1)  702/     994 :                     ; interrupts
(1)  703/     994 :                     ;
(1)  704/     994 :                     ; Input:
(1)  705/     994 :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  706/     994 :                     ;      | %00000EHV
(1)  707/     994 :                     ;      | E - External
(1)  708/     994 :                     ;      | H - HBlank
(1)  709/     994 :                     ;      | V - VBlank
(1)  710/     994 :                     ;
(1)  711/     994 :                     ; Notes:
(1)  712/     994 :                     ; Set your interrupt locations with System_SetIntJumps
(1)  713/     994 :                     ; --------------------------------------------------------
(1)  714/     994 :                     
(1)  715/     994 :                     Video_IntEnable:
(1)  716/     994 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  717/     998 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  718/     99C : 3C00                		move.w	d0,d6
(1)  719/     99E : 0246 0001           		andi.w	#1,d6			; %--V
(1)  720/     9A2 : EB4E                		lsl.w	#5,d6
(1)  721/     9A4 : 8E46                		or.w	d6,d7
(1)  722/     9A6 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  723/     9AA : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  724/     9B0 : 3E38 D7F0           		move.w	(RAM_VdpRegSet0).w,d7
(1)  725/     9B4 : 3C00                		move.w	d0,d6
(1)  726/     9B6 : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  727/     9BA : E74E                		lsl.w	#3,d6
(1)  728/     9BC : 8E46                		or.w	d6,d7
(1)  729/     9BE : 31C7 D7F0           		move.w	d7,(RAM_VdpRegSet0).w
(1)  730/     9C2 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  731/     9C8 : 3E38 D7F4           		move.w	(RAM_VdpRegSetB).w,d7
(1)  732/     9CC : 3C00                		move.w	d0,d6			; %E--
(1)  733/     9CE : 0246 0004           		andi.w	#%100,d6
(1)  734/     9D2 : DC46                		add.w	d6,d6
(1)  735/     9D4 : 8E46                		or.w	d6,d7
(1)  736/     9D6 : 31C7 D7F4           		move.w	d7,(RAM_VdpRegSetB).w
(1)  737/     9DA : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  738/     9E0 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  739/     9E4 : 4E75                		rts
(1)  740/     9E6 :                     
(1)  741/     9E6 :                     ; --------------------------------------------------------
(1)  742/     9E6 :                     ; Video_Resolution
(1)  743/     9E6 :                     ;
(1)  744/     9E6 :                     ; Set video resolution
(1)  745/     9E6 :                     ;
(1)  746/     9E6 :                     ; Input:
(1)  747/     9E6 :                     ; d0.w | $00 - Horizontal 256
(1)  748/     9E6 :                     ;      | $01 - Horizontal 320
(1)  749/     9E6 :                     ;
(1)  750/     9E6 :                     ; d1.w | $00 - Vertical 224
(1)  751/     9E6 :                     ;      | $01 - Vertical 240 (PAL ONLY)
(1)  752/     9E6 :                     ;      | $02 - Double resolution mode
(1)  753/     9E6 :                     ;      | $03 - INVALID
(1)  754/     9E6 :                     ; --------------------------------------------------------
(1)  755/     9E6 :                     
(1)  756/     9E6 :                     Video_Resolution:
(1)  757/     9E6 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  758/     9EA : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  759/     9EE : 0207 00F7           		andi.b	#%11110111,d7
(1)  760/     9F2 : 3C01                		move.w	d1,d6
(1)  761/     9F4 : CC7C 0001           		and.w	#1,d6
(1)  762/     9F8 : E74E                		lsl.w	#3,d6
(1)  763/     9FA : 8E46                		or.w	d6,d7
(1)  764/     9FC : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  765/     A02 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  766/     A06 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1)  767/     A0A : 0207 0078           		andi.b	#%01111000,d7
(1)  768/     A0E : 3C00                		move.w	d0,d6
(1)  769/     A10 : CC7C 0001           		and.w	#$01,d6
(1)  770/     A14 : 6704                		beq.s	.ex_bit
(1)  771/     A16 : 8C7C 0081           		or.w	#$81,d6
(1)  772/     A1A :                     .ex_bit:
(1)  773/     A1A : 8E46                		or.w	d6,d7
(1)  774/     A1C : 3C01                		move.w	d1,d6
(1)  775/     A1E : CC7C 0002           		and.w	#%010,d6
(1)  776/     A22 : 6704                		beq.s	.double
(1)  777/     A24 : 8C7C 0004           		or.w	#%100,d6
(1)  778/     A28 :                     .double:
(1)  779/     A28 : 8E46                		or.w	d6,d7
(1)  780/     A2A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  781/     A30 : 31C7 D7F6           		move.w	d7,(RAM_VdpRegSetC).w
(1)  782/     A34 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  783/     A38 : 4E75                		rts
(1)  784/     A3A :                     
(1)  785/     A3A :                     ; --------------------------------------------------------
(1)  786/     A3A :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  787/     A3A :                     ;
(1)  788/     A3A :                     ; Update VRAM locations for FG, BG, Window and
(1)  789/     A3A :                     ; the Horizontal scroll
(1)  790/     A3A :                     ; --------------------------------------------------------
(1)  791/     A3A :                     
(1)  792/     A3A :                     Video_UpdMapVram:
(1)  793/     A3A : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  794/     A3E : 3E3C 8200           		move.w	#$8200,d7
(1)  795/     A42 : 3C38 D7E4           		move.w	(RAM_VdpVramFG).w,d6
(1)  796/     A46 : E04E                		lsr.w	#8,d6
(1)  797/     A48 : E44E                		lsr.w	#2,d6
(1)  798/     A4A : 0246 0038           		andi.w	#%00111000,d6
(1)  799/     A4E : 8E46                		or.w	d6,d7
(1)  800/     A50 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  801/     A56 : 3E3C 8300           		move.w	#$8300,d7
(1)  802/     A5A : 3C38 D7E8           		move.w	(RAM_VdpVramWD).w,d6
(1)  803/     A5E : E04E                		lsr.w	#8,d6
(1)  804/     A60 : E44E                		lsr.w	#2,d6
(1)  805/     A62 : 0246 003E           		andi.w	#%00111110,d6
(1)  806/     A66 : 8E46                		or.w	d6,d7
(1)  807/     A68 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  808/     A6E : 3E3C 8400           		move.w	#$8400,d7
(1)  809/     A72 : 3C38 D7E6           		move.w	(RAM_VdpVramBG).w,d6
(1)  810/     A76 : E04E                		lsr.w	#8,d6
(1)  811/     A78 : EA4E                		lsr.w	#5,d6
(1)  812/     A7A : 0246 0007           		andi.w	#%00000111,d6
(1)  813/     A7E : 8E46                		or.w	d6,d7
(1)  814/     A80 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  815/     A86 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  816/     A8A : 4E75                		rts
(1)  817/     A8C :                     
(1)  818/     A8C :                     Video_UpdSprHVram:
(1)  819/     A8C : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  820/     A90 : 3E3C 8500           		move.w	#$8500,d7
(1)  821/     A94 : 3C38 D7EA           		move.w	(RAM_VdpVramSpr).w,d6
(1)  822/     A98 : E04E                		lsr.w	#8,d6
(1)  823/     A9A : E24E                		lsr.w	#1,d6
(1)  824/     A9C : 0246 007F           		andi.w	#%01111111,d6
(1)  825/     AA0 : 8E46                		or.w	d6,d7
(1)  826/     AA2 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  827/     AA8 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  828/     AAC : 3C38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  829/     AB0 : E04E                		lsr.w	#8,d6
(1)  830/     AB2 : E44E                		lsr.w	#2,d6
(1)  831/     AB4 : 0246 003F           		andi.w	#%00111111,d6
(1)  832/     AB8 : 8E46                		or.w	d6,d7
(1)  833/     ABA : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  834/     AC0 : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  835/     AC4 : 4E75                		rts
(1)  836/     AC6 :                     
(1)  837/     AC6 :                     ; --------------------------------------------------------
(1)  838/     AC6 :                     ; Video_SetMapSize
(1)  839/     AC6 :                     ;
(1)  840/     AC6 :                     ; Set MAP size(s) to FG and BG
(1)  841/     AC6 :                     ;
(1)  842/     AC6 :                     ; Input:
(1)  843/     AC6 :                     ; d0.w | Width: %00 - H32
(1)  844/     AC6 :                     ;      |        %01 - H40
(1)  845/     AC6 :                     ;      |        %11 - H128
(1)  846/     AC6 :                     ;
(1)  847/     AC6 :                     ; d1.w | Height: %00 - V32
(1)  848/     AC6 :                     ;      |         %01 - V40
(1)  849/     AC6 :                     ;      |         %11 - V128
(1)  850/     AC6 :                     ;
(1)  851/     AC6 :                     ; Notes:
(1)  852/     AC6 :                     ; Maximum size for a single layer size
(1)  853/     AC6 :                     ; is $1000
(1)  854/     AC6 :                     ; --------------------------------------------------------
(1)  855/     AC6 :                     
(1)  856/     AC6 :                     Video_SetMapSize:
(1)  857/     AC6 : 48A7 0700           		movem.w	d5-d7,-(sp)
(1)  858/     ACA : 3E3C 9000           		move.w	#$9000,d7
(1)  859/     ACE : 3C00                		move.w	d0,d6
(1)  860/     AD0 : 3A01                		move.w	d1,d5
(1)  861/     AD2 : 0246 0003           		andi.w	#%11,d6
(1)  862/     AD6 : 0245 0003           		andi.w	#%11,d5
(1)  863/     ADA : E94D                		lsl.w	#4,d5
(1)  864/     ADC : 8C45                		or.w	d5,d6
(1)  865/     ADE : 8E46                		or.w	d6,d7
(1)  866/     AE0 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  867/     AE6 : 4C9F 00E0           		movem.w	(sp)+,d5-d7
(1)  868/     AEA : 4E75                		rts
(1)  869/     AEC :                     
(1)  870/     AEC :                     ; --------------------------------------------------------
(1)  871/     AEC :                     ; Video_LoadArt
(1)  872/     AEC :                     ;
(1)  873/     AEC :                     ; Loads VDP graphics using DMA
(1)  874/     AEC :                     ;
(1)  875/     AEC :                     ; Input:
(1)  876/     AEC :                     ; d0.l | Graphics data (NOT a0)
(1)  877/     AEC :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1)  878/     AEC :                     ; d2.w | Size:          cell_vram(size)
(1)  879/     AEC :                     ;
(1)  880/     AEC :                     ; Notes:
(1)  881/     AEC :                     ; - For a faster load: call this during VBlank or
(1)  882/     AEC :                     ;   disable VDP Display temporally.
(1)  883/     AEC :                     ;
(1)  884/     AEC :                     ; * 32X Cartridge ONLY:
(1)  885/     AEC :                     ; - This sets RV bit, make sure your code is
(1)  886/     AEC :                     ;   running on RAM (already doing here) and the
(1)  887/     AEC :                     ;   SH2 is not reading from it's ROM area CS1
(1)  888/     AEC :                     ; --------------------------------------------------------
(1)  889/     AEC :                     
(1)  890/     AEC :                     Video_LoadArt:
(1)  891/     AEC : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  892/     AF0 : 2E00                		move.l	d0,d7
(1)  893/     AF2 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  894/     AF8 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  895/     AFE : 6736                		beq.s	.normal
(1)  896/     B00 : 2A00                		move.l	d0,d5
(1)  897/     B02 : DA42                		add.w	d2,d5
(1)  898/     B04 : 6430                		bcc.s	.normal
(1)  899/     B06 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  900/     B08 : 3C01                		move.w	d1,d6
(1)  901/     B0A : 2E05                		move.l	d5,d7		; Top
(1)  902/     B0C : 0687 0001 0000      		addi.l	#$010000,d7
(1)  903/     B12 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  904/     B18 : 9E80                		sub.l	d0,d7
(1)  905/     B1A : 6128                		bsr.s	.mk_set
(1)  906/     B1C : 2A00                		move.l	d0,d5		; Bottom
(1)  907/     B1E : 0685 0001 0000      		addi.l	#$010000,d5
(1)  908/     B24 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  909/     B2A : 2C05                		move.l	d5,d6
(1)  910/     B2C : 9C80                		sub.l	d0,d6
(1)  911/     B2E : 3E02                		move.w	d2,d7
(1)  912/     B30 : 9E46                		sub.w	d6,d7
(1)  913/     B32 : DC41                		add.w	d1,d6
(1)  914/     B34 : 6006                		bra.s	.last_set
(1)  915/     B36 :                     .normal:
(1)  916/     B36 : 2A00                		move.l	d0,d5
(1)  917/     B38 : 3C01                		move.w	d1,d6
(1)  918/     B3A : 3E02                		move.w	d2,d7
(1)  919/     B3C :                     .last_set:
(1)  920/     B3C : 6106                		bsr.s	.mk_set
(1)  921/     B3E : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  922/     B42 : 4E75                		rts
(1)  923/     B44 :                     
(1)  924/     B44 :                     ; d7 - size
(1)  925/     B44 :                     ; d6 - vram
(1)  926/     B44 :                     ; d5 - data
(1)  927/     B44 :                     .mk_set:
(1)  928/     B44 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  929/     B4A : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  930/     B50 : 6734                		beq.s	.bad_size
(1)  931/     B52 : 4846                		swap	d6
(1)  932/     B54 : 4845                		swap	d5
(1)  933/     B56 : 3C05                		move.w	d5,d6
(1)  934/     B58 : 4845                		swap	d5
(1)  943/     B5A : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  944/     B60 : 2F07                		move.l	d7,-(sp)		; <--
(1)  945/     B62 : 6100 FE0C           		bsr	Video_DmaOn
(1)  946/     B66 : 2E1F                		move.l	(sp)+,d7
(1)  947/     B68 : 0246 00FF           		andi.w	#$FF,d6
(1)  948/     B6C : BC3C 00FF           		cmp.b	#$FF,d6
(1)  949/     B70 : 6716                		beq.s	.ram_write
(1)  950/     B72 : 4846                		swap	d6
(1)  951/     B74 : 6126                		bsr.s	.shared_setup
(1)  952/     B76 : 6100 0B06           		bsr	System_DmaEnter_ROM
(1)  953/     B7A : 3C86                		move.w	d6,(a6)			; First write
(1)  954/     B7C : 3C87                		move.w	d7,(a6)			; Second write
(1)  955/     B7E : 6100 0B02           		bsr	System_DmaExit_ROM
(1)  956/     B82 : 6100 FDF8           		bsr	Video_DmaOff
(1)  957/     B86 :                     	; Word-RAM patch
(1)  978/     B86 :                     .bad_size:
(1)  979/     B86 : 4E75                		rts
(1)  980/     B88 :                     
(1)  981/     B88 :                     ; --------------------------------------------------------
(1)  982/     B88 :                     
(1)  983/     B88 :                     .ram_write:
(1)  984/     B88 : 4846                		swap	d6
(1)  985/     B8A : 6110                		bsr.s	.shared_setup
(1)  986/     B8C : 6100 0B2A           		bsr	System_DmaEnter_RAM
(1)  987/     B90 : 3C86                		move.w	d6,(a6)			; First write
(1)  988/     B92 : 3C87                		move.w	d7,(a6)			; Second write
(1)  989/     B94 : 6100 0B26           		bsr	System_DmaExit_RAM
(1)  990/     B98 : 6000 FDE2           		bra	Video_DmaOff
(1)  991/     B9C :                     
(1)  992/     B9C :                     ; --------------------------------------------------------
(1)  993/     B9C :                     
(1)  994/     B9C :                     .shared_setup:
(1)  995/     B9C : EF8F                		lsl.l	#7,d7
(1)  996/     B9E : E04F                		lsr.w	#8,d7
(1)  997/     BA0 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  998/     BA6 : 2C87                		move.l	d7,(a6)
(1)  999/     BA8 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1000/     BAA : 2E3C 9600 9500       		move.l	#$96009500,d7
(1) 1001/     BB0 : 1E05                 		move.b	d5,d7
(1) 1002/     BB2 : E08D                 		lsr.l	#8,d5
(1) 1003/     BB4 : 4847                 		swap	d7
(1) 1004/     BB6 : 1E05                 		move.b	d5,d7
(1) 1005/     BB8 : 2C87                 		move.l	d7,(a6)
(1) 1006/     BBA : 3E3C 9700            		move.w	#$9700,d7
(1) 1007/     BBE : E08D                 		lsr.l	#8,d5
(1) 1008/     BC0 : 1E05                 		move.b	d5,d7
(1) 1009/     BC2 : 3C87                 		move.w	d7,(a6)
(1) 1010/     BC4 : 3E06                		move.w	d6,d7			; Destination
(1) 1011/     BC6 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1012/     BCC : 0046 4000           		ori.w	#$4000,d6
(1) 1013/     BD0 : E04F                		lsr.w	#8,d7
(1) 1014/     BD2 : EC4F                		lsr.w	#6,d7
(1) 1015/     BD4 : 0247 0003           		andi.w	#%11,d7
(1) 1016/     BD8 : 0047 0080           		ori.w	#$80,d7
(1) 1017/     BDC : 4E75                		rts
(1) 1018/     BDE :                     
(1) 1019/     BDE :                     ; --------------------------------------------------------
(1) 1020/     BDE :                     ; Video_LoadArt_List
(1) 1021/     BDE :                     ;
(1) 1022/     BDE :                     ; Loads VDP graphics on bulk
(1) 1023/     BDE :                     ;
(1) 1024/     BDE :                     ; Input:
(1) 1025/     BDE :                     ; a0 | List of graphics to load:
(1) 1026/     BDE :                     ;        dc.w numof_entries
(1) 1027/     BDE :                     ;        dc.l ART_DATA
(1) 1028/     BDE :                     ;        dc.w cell_vram(vram_pos)
(1) 1029/     BDE :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_vram(size)
(1) 1030/     BDE :                     ;        ; ...more entries
(1) 1031/     BDE :                     ;
(1) 1032/     BDE :                     ; Note:
(1) 1033/     BDE :                     ; CPU heavy.
(1) 1034/     BDE :                     ; --------------------------------------------------------
(1) 1035/     BDE :                     
(1) 1036/     BDE :                     Video_LoadArt_List:
(1) 1037/     BDE : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1038/     BE2 : 3E18                		move.w	(a0)+,d7
(1) 1039/     BE4 : 6712                		beq.s	.invalid
(1) 1040/     BE6 : 6B10                		bmi.s	.invalid
(1) 1041/     BE8 : 5347                		subq.w	#1,d7
(1) 1042/     BEA :                     .next_one:
(1) 1043/     BEA : 2018                		move.l	(a0)+,d0
(1) 1044/     BEC : 3218                		move.w	(a0)+,d1
(1) 1045/     BEE : 3418                		move.w	(a0)+,d2
(1) 1046/     BF0 : 6100 FEFA           		bsr	Video_LoadArt
(1) 1047/     BF4 : 51CF FFF4           		dbf	d7,.next_one
(1) 1048/     BF8 :                     .invalid:
(1) 1049/     BF8 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1050/     BFC : 4E75                		rts
(1) 1051/     BFE :                     
(1) 1052/     BFE :                     ; --------------------------------------------------------
(1) 1053/     BFE :                     ; Video_Fill
(1) 1054/     BFE :                     ;
(1) 1055/     BFE :                     ; Fill data to VRAM
(1) 1056/     BFE :                     ;
(1) 1057/     BFE :                     ; Input:
(1) 1058/     BFE :                     ; d0.b | BYTE to fill
(1) 1059/     BFE :                     ; d1.w | VRAM destination: cell_vram(dest)
(1) 1060/     BFE :                     ; d2.w | Size:             cell_vram(size)
(1) 1061/     BFE :                     ;
(1) 1062/     BFE :                     ; Notes:
(1) 1063/     BFE :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1064/     BFE :                     ;   invalid.
(1) 1065/     BFE :                     ; --------------------------------------------------------
(1) 1066/     BFE :                     
(1) 1067/     BFE :                     ; Video_Fill_Incr:
(1) 1068/     BFE :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1069/     BFE :                     ; 		move.w	d3,d6
(1) 1070/     BFE :                     ; 		bra.s	vid_FillGo
(1) 1071/     BFE :                     Video_Fill:
(1) 1072/     BFE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1073/     C02 : 3C3C 0001           		move.w	#1,d6
(1) 1074/     C06 :                     vid_FillGo:
(1) 1075/     C06 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1076/     C0C : 3E16                .dmaw:		move.w	(a6),d7
(1) 1077/     C0E : 0807 0001           		btst	#bitDma,d7
(1) 1078/     C12 : 66F8                		bne.s	.dmaw
(1) 1079/     C14 : 6100 FD5A           		bsr	Video_DmaOn
(1) 1080/     C18 : 0246 00FF           		andi.w	#$FF,d6
(1) 1081/     C1C : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1082/     C20 : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1083/     C22 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1084/     C24 : 0447 0001           		subi.w	#1,d7
(1) 1085/     C28 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1086/     C2E : 1C07                		move.b	d7,d6
(1) 1087/     C30 : 4846                		swap	d6
(1) 1088/     C32 : E04F                		lsr.w	#8,d7
(1) 1089/     C34 : 1C07                		move.b	d7,d6
(1) 1090/     C36 : 4846                		swap	d6
(1) 1091/     C38 : 2C86                		move.l	d6,(a6)
(1) 1092/     C3A : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1093/     C3E : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1094/     C40 : 3C01                		move.w	d1,d6
(1) 1095/     C42 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1096/     C46 : 0046 4000           		ori.w	#$4000,d6
(1) 1097/     C4A : 4846                		swap	d6
(1) 1098/     C4C : 3C07                		move.w	d7,d6
(1) 1099/     C4E : E04E                		lsr.w	#8,d6
(1) 1100/     C50 : EC4E                		lsr.w	#6,d6
(1) 1101/     C52 : 0246 0003           		andi.w	#%11,d6
(1) 1102/     C56 : 0046 0080           		ori.w	#$80,d6
(1) 1103/     C5A : 2C86                		move.l	d6,(a6)
(1) 1104/     C5C : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1105/     C60 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1106/     C62 : 0807 0001           		btst	#bitDma,d7
(1) 1107/     C66 : 66F8                		bne.s	.dma_w
(1) 1108/     C68 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1109/     C6C : 6100 FD0E           		bsr	Video_DmaOff
(1) 1110/     C70 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1111/     C74 : 4E75                		rts
(1) 1112/     C76 :                     
(1) 1113/     C76 :                     ; --------------------------------------------------------
(1) 1114/     C76 :                     ; Video_Copy
(1) 1115/     C76 :                     ;
(1) 1116/     C76 :                     ; Copy VRAM data to another location inside VRAM
(1) 1117/     C76 :                     ;
(1) 1118/     C76 :                     ; Input:
(1) 1119/     C76 :                     ; d0.w | VRAM Source: cell_vram(src)
(1) 1120/     C76 :                     ; d1.w | VRAM Destination: cell_vram(dest)
(1) 1121/     C76 :                     ; d2.w | Size
(1) 1122/     C76 :                     ; --------------------------------------------------------
(1) 1123/     C76 :                     
(1) 1124/     C76 :                     Video_Copy:
(1) 1125/     C76 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1126/     C7A : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1127/     C80 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1128/     C82 : 0807 0001           		btst	#bitDma,d7
(1) 1129/     C86 : 66F8                		bne.s	.dmaw
(1) 1130/     C88 : 6100 FCE6           		bsr	Video_DmaOn
(1) 1131/     C8C : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1132/     C90 : 3E02                		move.w	d2,d7			; SIZE
(1) 1133/     C92 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1134/     C98 : 1C07                		move.b	d7,d6
(1) 1135/     C9A : 4846                		swap	d6
(1) 1136/     C9C : E04F                		lsr.w	#8,d7
(1) 1137/     C9E : 1C07                		move.b	d7,d6
(1) 1138/     CA0 : 4846                		swap	d6
(1) 1139/     CA2 : 2C86                		move.l	d6,(a6)
(1) 1140/     CA4 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1141/     CAA : 3E00                		move.w	d0,d7
(1) 1142/     CAC : 1C07                		move.b	d7,d6
(1) 1143/     CAE : 4846                		swap	d6
(1) 1144/     CB0 : E04F                		lsr.w	#8,d7
(1) 1145/     CB2 : 1C07                		move.b	d7,d6
(1) 1146/     CB4 : 2C86                		move.l	d6,(a6)
(1) 1147/     CB6 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1148/     CBA : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1149/     CBC : 3C07                		move.w	d7,d6
(1) 1150/     CBE : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1151/     CC2 : 0046 4000           		ori.w	#$4000,d6
(1) 1152/     CC6 : 4846                		swap	d6
(1) 1153/     CC8 : 3C07                		move.w	d7,d6
(1) 1154/     CCA : E04E                		lsr.w	#8,d6
(1) 1155/     CCC : EC4E                		lsr.w	#6,d6
(1) 1156/     CCE : 0246 0003           		andi.w	#%11,d6
(1) 1157/     CD2 : 0046 00C0           		ori.w	#$C0,d6
(1) 1158/     CD6 : 2C86                		move.l	d6,(a6)
(1) 1159/     CD8 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1160/     CDC : 3E16                .dma_w:		move.w	(a6),d7
(1) 1161/     CDE : 0807 0001           		btst	#bitDma,d7
(1) 1162/     CE2 : 66F8                		bne.s	.dma_w
(1) 1163/     CE4 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1164/     CE8 : 6100 FC92           		bsr	Video_DmaOff
(1) 1165/     CEC : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1166/     CF0 : 4E75                		rts
(1) 1167/     CF2 :                     
(1) 1168/     CF2 :                     ; --------------------------------------------------------
(1) 1169/     CF2 :                     ; Video_MakeDmaEntry
(1) 1170/     CF2 :                     ;
(1) 1171/     CF2 :                     ; Makes a new entry to the DMA BLAST list
(1) 1172/     CF2 :                     ; to be processed on the next VBlank
(1) 1173/     CF2 :                     ;
(1) 1174/     CF2 :                     ; Input:
(1) 1175/     CF2 :                     ; d0.l | Graphics data location
(1) 1176/     CF2 :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1) 1177/     CF2 :                     ; d2.w | Size
(1) 1178/     CF2 :                     ;
(1) 1179/     CF2 :                     ; Notes:
(1) 1180/     CF2 :                     ; - Call this during DISPLAY only
(1) 1181/     CF2 :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1182/     CF2 :                     ;
(1) 1183/     CF2 :                     ; * SCD/CD32X ONLY:
(1) 1184/     CF2 :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1185/     CF2 :                     ;   if not reading from WORD-RAM
(1) 1186/     CF2 :                     ; --------------------------------------------------------
(1) 1187/     CF2 :                     
(1) 1188/     CF2 :                     Video_MakeDmaEntry:
(1) 1189/     CF2 : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1190/     CF6 : 2E00                		move.l	d0,d7
(1) 1191/     CF8 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1192/     CFE : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1193/     D04 : 6736                		beq.s	.normal
(1) 1194/     D06 : 2A00                		move.l	d0,d5
(1) 1195/     D08 : DA42                		add.w	d2,d5
(1) 1196/     D0A : 6430                		bcc.s	.normal
(1) 1197/     D0C : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1198/     D0E : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1199/     D10 : 2E05                		move.l	d5,d7
(1) 1200/     D12 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1201/     D18 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1202/     D1E : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1203/     D20 : 6128                		bsr.s	.mk_set
(1) 1204/     D22 : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1205/     D24 : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1206/     D2A : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1207/     D30 : 2C05                		move.l	d5,d6
(1) 1208/     D32 : 9C80                		sub.l	d0,d6
(1) 1209/     D34 : 3E02                		move.w	d2,d7
(1) 1210/     D36 : 9E46                		sub.w	d6,d7
(1) 1211/     D38 : DC41                		add.w	d1,d6
(1) 1212/     D3A : 6006                		bra.s	.last_set
(1) 1213/     D3C :                     .normal:
(1) 1214/     D3C : 2A00                		move.l	d0,d5
(1) 1215/     D3E : 3C01                		move.w	d1,d6
(1) 1216/     D40 : 3E02                		move.w	d2,d7
(1) 1217/     D42 :                     .last_set:
(1) 1218/     D42 : 6106                		bsr.s	.mk_set
(1) 1219/     D44 : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1220/     D48 : 4E75                		rts
(1) 1221/     D4A :                     
(1) 1222/     D4A :                     ; d7 - size
(1) 1223/     D4A :                     ; d6 - vram
(1) 1224/     D4A :                     ; d5 - data
(1) 1225/     D4A :                     .mk_set:
(1) 1226/     D4A : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1227/     D50 : 4847                		swap	d7
(1) 1228/     D52 : 3E38 D650           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1229/     D56 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1230/     D5A : 6C5A                		bge	.ran_out
(1) 1231/     D5C : E94F                		lsl.w	#4,d7			; Size $10
(1) 1232/     D5E : 4DF8 D65C           		lea	(RAM_VdpDmaList).w,a6
(1) 1233/     D62 : DCC7                		adda	d7,a6
(1) 1234/     D64 : 4847                		swap	d7
(1) 1235/     D66 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1236/     D6C : 6748                		beq.s	.ran_out		; If == 0, bad
(1) 1237/     D6E : 4A47                		tst.w	d7
(1) 1238/     D70 : 6B44                		bmi.s	.ran_out		; If negative, bad
(1) 1239/     D72 : 31FC 0001 D652      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1240/     D78 : 5278 D650           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1241/     D7C : E24F                		lsr.w	#1,d7
(1) 1242/     D7E : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1252/     D82 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1253/     D84 : 2E05                  		move.l	d5,d7
(1) 1254/     D86 : 4847                  		swap	d7
(1) 1255/     D88 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1256/     D8C : 1D47 0009            		move.b	d7,9(a6)
(1) 1257/     D90 : 3E06                		move.w	d6,d7			; Destination
(1) 1258/     D92 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1259/     D98 : 0046 4000           		ori.w	#$4000,d6
(1) 1260/     D9C : E04F                		lsr.w	#8,d7
(1) 1261/     D9E : EC4F                		lsr.w	#6,d7
(1) 1262/     DA0 : 0247 0003           		andi.w	#%11,d7
(1) 1263/     DA4 : 0047 0080           		ori.w	#$80,d7
(1) 1264/     DA8 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1265/     DAC : 3D47 000C           		move.w	d7,$C(a6)
(1) 1273/     DB0 : 31FC 0000 D652      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1274/     DB6 :                     .ran_out:
(1) 1275/     DB6 : 4E75                		rts
(1) 1276/     DB8 :                     
(1) 1277/     DB8 :                     ; ====================================================================
(1) 1278/     DB8 :                     ; --------------------------------------------------------
(1) 1279/     DB8 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1280/     DB8 :                     ;
(1) 1281/     DB8 :                     ; Write map data to VDP
(1) 1282/     DB8 :                     ;
(1) 1283/     DB8 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1284/     DB8 :                     ; _LoadMapV: Top to Bottom / Left to Right
(1) 1285/     DB8 :                     ;
(1) 1286/     DB8 :                     ; Input:
(1) 1287/     DB8 :                     ; a0   | Map data
(1) 1288/     DB8 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1289/     DB8 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1290/     DB8 :                     ; d2.l | Screen Width/VRAM location:
(1) 1291/     DB8 :                     ;        splitw(sw_size,vram_loc)
(1) 1292/     DB8 :                     ; d3.w | VRAM-cell increment
(1) 1293/     DB8 :                     ;
(1) 1294/     DB8 :                     ; Notes:
(1) 1295/     DB8 :                     ; - Data starts from 0, Map data $FFFF(-1) is
(1) 1296/     DB8 :                     ;   used to place the BLANK tile, see SET_NullVram.
(1) 1297/     DB8 :                     ; * SCD/CD32X ONLY:
(1) 1298/     DB8 :                     ; - For making the dot-screen map see
(1) 1299/     DB8 :                     ;   Video_MdMcd_StampDotMap
(1) 1300/     DB8 :                     ; --------------------------------------------------------
(1) 1301/     DB8 :                     
(1) 1302/     DB8 :                     Video_LoadMap:
(1) 1303/     DB8 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1304/     DBC : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1305/     DC2 :                     
(1) 1306/     DC2 : 2C02                		move.l	d2,d6
(1) 1307/     DC4 : 4846                		swap	d6
(1) 1308/     DC6 : 3A00                		move.w	d0,d5
(1) 1309/     DC8 : CAC6                		mulu.w	d6,d5
(1) 1310/     DCA : 2800                		move.l	d0,d4
(1) 1311/     DCC : 4844                		swap	d4
(1) 1312/     DCE : D844                		add.w	d4,d4
(1) 1313/     DD0 : DA44                		add.w	d4,d5
(1) 1314/     DD2 : 3E02                		move.w	d2,d7
(1) 1315/     DD4 : DE45                		add.w	d5,d7
(1) 1316/     DD6 : 7A00                		moveq	#0,d5
(1) 1317/     DD8 : 3A07                		move.w	d7,d5
(1) 1318/     DDA : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1319/     DDE : 8E7C 4000           		or.w	#$4000,d7
(1) 1320/     DE2 : E55D                		rol.w	#2,d5
(1) 1321/     DE4 : 0245 0003           		andi.w	#%11,d5
(1) 1322/     DE8 : 4845                		swap	d5
(1) 1323/     DEA : 2A48                		move.l	a0,a5
(1) 1324/     DEC : 3801                		move.w	d1,d4
(1) 1325/     DEE : 5344                		subq.w	#1,d4
(1) 1326/     DF0 : 6B36                		bmi.s	.bad_size
(1) 1327/     DF2 :                     .y_loop:
(1) 1328/     DF2 : 2844                		move.l	d4,a4
(1) 1329/     DF4 : 4845                		swap	d5
(1) 1330/     DF6 : 3D47 0004           		move.w	d7,4(a6)
(1) 1331/     DFA : 3D45 0004           		move.w	d5,4(a6)
(1) 1332/     DFE : 4845                		swap	d5
(1) 1333/     E00 : 2801                		move.l	d1,d4
(1) 1334/     E02 : 4844                		swap	d4
(1) 1335/     E04 : 5344                		subq.w	#1,d4
(1) 1336/     E06 :                     .x_loop:
(1) 1337/     E06 : 4844                		swap	d4
(1) 1338/     E08 : 381D                		move.w	(a5)+,d4
(1) 1339/     E0A : B87C FFFF           		cmp.w	#-1,d4
(1) 1340/     E0E : 6606                		bne.s	.non_blank
(1) 1341/     E10 : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1342/     E14 : 6002                		bra.s	.mk_cell
(1) 1343/     E16 :                     .non_blank:
(1) 1344/     E16 : D843                		add.w	d3,d4
(1) 1345/     E18 :                     .mk_cell:
(1) 1346/     E18 : 3C84                		move.w	d4,(a6)
(1) 1347/     E1A : 4844                		swap	d4
(1) 1348/     E1C : 51CC FFE8           		dbf	d4,.x_loop
(1) 1349/     E20 : DE46                		add.w	d6,d7
(1) 1350/     E22 : 280C                		move.l	a4,d4
(1) 1351/     E24 : 51CC FFCC           		dbf	d4,.y_loop
(1) 1352/     E28 :                     .bad_size:
(1) 1353/     E28 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1354/     E2C : 4E75                		rts
(1) 1355/     E2E :                     ; ------------------------------------------------
(1) 1356/     E2E :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1357/     E2E :                     ; d2.l | Screen Width/VRAM location:
(1) 1358/     E2E :                     ; d3.w | VRAM-cell increment
(1) 1359/     E2E :                     
(1) 1360/     E2E :                     Video_LoadMapV:
(1) 1361/     E2E : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1362/     E32 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1363/     E38 : 2C02                		move.l	d2,d6
(1) 1364/     E3A : 4846                		swap	d6
(1) 1365/     E3C : 3A00                		move.w	d0,d5
(1) 1366/     E3E : CAC6                		mulu.w	d6,d5
(1) 1367/     E40 : 2800                		move.l	d0,d4
(1) 1368/     E42 : 4844                		swap	d4
(1) 1369/     E44 : D844                		add.w	d4,d4
(1) 1370/     E46 : DA44                		add.w	d4,d5
(1) 1371/     E48 : 3E02                		move.w	d2,d7
(1) 1372/     E4A : DE45                		add.w	d5,d7
(1) 1373/     E4C : 7A00                		moveq	#0,d5
(1) 1374/     E4E : 3A07                		move.w	d7,d5
(1) 1375/     E50 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1376/     E54 : 8E7C 4000           		or.w	#$4000,d7
(1) 1377/     E58 : E55D                		rol.w	#2,d5
(1) 1378/     E5A : 0245 0003           		andi.w	#%11,d5
(1) 1379/     E5E : 4845                		swap	d5
(1) 1380/     E60 : 2A48                		move.l	a0,a5
(1) 1381/     E62 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1382/     E68 : 664C                		bne.s	.dble_mode
(1) 1383/     E6A : 2801                		move.l	d1,d4
(1) 1384/     E6C : 4844                		swap	d4
(1) 1385/     E6E : 5344                		subq.w	#1,d4
(1) 1386/     E70 : 6B3E                		bmi.s	.bad_size
(1) 1387/     E72 :                     .x_loop:
(1) 1388/     E72 : 2844                		move.l	d4,a4
(1) 1389/     E74 : 3801                		move.w	d1,d4
(1) 1390/     E76 : 5344                		subq.w	#1,d4
(1) 1391/     E78 :                     .y_loop:
(1) 1392/     E78 : 4844                		swap	d4
(1) 1393/     E7A : 3807                		move.w	d7,d4
(1) 1394/     E7C : D845                		add.w	d5,d4
(1) 1395/     E7E : 4845                		swap	d5
(1) 1396/     E80 : 3D44 0004           		move.w	d4,4(a6)
(1) 1397/     E84 : 3D45 0004           		move.w	d5,4(a6)
(1) 1398/     E88 : 4845                		swap	d5
(1) 1399/     E8A : 381D                		move.w	(a5)+,d4
(1) 1400/     E8C : B87C FFFF           		cmp.w	#-1,d4
(1) 1401/     E90 : 6606                		bne.s	.non_blank
(1) 1402/     E92 : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1403/     E96 : 6002                		bra.s	.mk_cell
(1) 1404/     E98 :                     .non_blank:
(1) 1405/     E98 : D843                		add.w	d3,d4
(1) 1406/     E9A :                     .mk_cell:
(1) 1407/     E9A : 3C84                		move.w	d4,(a6)
(1) 1408/     E9C : DA46                		add.w	d6,d5
(1) 1409/     E9E : 4844                		swap	d4
(1) 1410/     EA0 : 51CC FFD6           		dbf	d4,.y_loop
(1) 1411/     EA4 : DE7C 0002           		add.w	#2,d7
(1) 1412/     EA8 : 4245                		clr.w	d5
(1) 1413/     EAA : 280C                		move.l	a4,d4
(1) 1414/     EAC : 51CC FFC4           		dbf	d4,.x_loop
(1) 1415/     EB0 :                     .bad_size:
(1) 1416/     EB0 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1417/     EB4 : 4E75                		rts
(1) 1418/     EB6 :                     
(1) 1419/     EB6 :                     ; ------------------------------------------------
(1) 1420/     EB6 :                     
(1) 1421/     EB6 :                     .dble_mode:
(1) 1422/     EB6 : 2F01                		move.l	d1,-(sp)
(1) 1423/     EB8 :                     
(1) 1424/     EB8 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1425/     EBA : 3803                		move.w	d3,d4
(1) 1426/     EBC : 0244 F800           		andi.w	#$F800,d4
(1) 1427/     EC0 : 0243 07FF           		andi.w	#$7FF,d3
(1) 1428/     EC4 : E24B                		lsr.w	#1,d3
(1) 1429/     EC6 : 8644                		or.w	d4,d3
(1) 1430/     EC8 :                     
(1) 1431/     EC8 : 2801                		move.l	d1,d4
(1) 1432/     ECA : 4844                		swap	d4
(1) 1433/     ECC : 5344                		subq.w	#1,d4
(1) 1434/     ECE : 6B48                		bmi.s	.bad_size_d
(1) 1435/     ED0 :                     .x_loop_d:
(1) 1436/     ED0 : 2844                		move.l	d4,a4
(1) 1437/     ED2 : 3801                		move.w	d1,d4
(1) 1438/     ED4 : 5344                		subq.w	#1,d4
(1) 1439/     ED6 :                     .y_loop_d:
(1) 1440/     ED6 : 4844                		swap	d4
(1) 1441/     ED8 : 3807                		move.w	d7,d4
(1) 1442/     EDA : D845                		add.w	d5,d4
(1) 1443/     EDC : 4845                		swap	d5
(1) 1444/     EDE : 3D44 0004           		move.w	d4,4(a6)
(1) 1445/     EE2 : 3D45 0004           		move.w	d5,4(a6)
(1) 1446/     EE6 : 4845                		swap	d5
(1) 1447/     EE8 : 381D                		move.w	(a5)+,d4
(1) 1448/     EEA : DAFC 0002           		adda	#2,a5
(1) 1449/     EEE : B87C FFFF           		cmp.w	#-1,d4
(1) 1450/     EF2 : 6606                		bne.s	.non_blank_d
(1) 1451/     EF4 : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1452/     EF8 : 6008                		bra.s	.mk_cell_d
(1) 1453/     EFA :                     .non_blank_d:
(1) 1454/     EFA : 0244 07FF           		andi.w	#$7FF,d4
(1) 1455/     EFE : E24C                		lsr.w	#1,d4
(1) 1456/     F00 : D843                		add.w	d3,d4
(1) 1457/     F02 :                     .mk_cell_d:
(1) 1458/     F02 : 3C84                		move.w	d4,(a6)
(1) 1459/     F04 : DA46                		add.w	d6,d5
(1) 1460/     F06 : 4844                		swap	d4
(1) 1461/     F08 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1462/     F0C : DE7C 0002           		add.w	#2,d7
(1) 1463/     F10 : 4245                		clr.w	d5
(1) 1464/     F12 : 280C                		move.l	a4,d4
(1) 1465/     F14 : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1466/     F18 :                     .bad_size_d:
(1) 1467/     F18 : 221F                		move.l	(sp)+,d1
(1) 1468/     F1A : 6094                		bra	.bad_size
(1) 1469/     F1C :                     
(1) 1470/     F1C :                     ; ====================================================================
(1) 1471/     F1C :                     ; ----------------------------------------------------------------
(1) 1472/     F1C :                     ; Palette fading section
(1) 1473/     F1C :                     ; ----------------------------------------------------------------
(1) 1474/     F1C :                     
(1) 1475/     F1C :                     ; --------------------------------------------------------
(1) 1476/     F1C :                     ; Video_RunFade
(1) 1477/     F1C :                     ;
(1) 1478/     F1C :                     ; Process Palette changes (fade and effects)
(1) 1479/     F1C :                     ; --------------------------------------------------------
(1) 1480/     F1C :                     
(1) 1481/     F1C :                     Video_RunFade:
(1) 1482/     F1C : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1483/     F20 :                     .next_req:
(1) 1484/     F20 : 1016                		move.b	palfd_req(a6),d0
(1) 1485/     F22 : 6744                		beq.s	.no_req
(1) 1486/     F24 : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1487/     F28 : 6A38                		bpl.s	.busy_timer
(1) 1488/     F2A : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1489/     F30 : 4BF8 D550           		lea	(RAM_Palette).w,a5
(1) 1490/     F34 : 49F8 D5D0           		lea	(RAM_PaletteFade).w,a4
(1) 1491/     F38 : 7E00                		moveq	#0,d7
(1) 1492/     F3A : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1493/     F3E : DE47                		add.w	d7,d7
(1) 1494/     F40 : DAC7                		adda	d7,a5
(1) 1495/     F42 : D8C7                		adda	d7,a4
(1) 1496/     F44 : 7C00                		moveq	#0,d6
(1) 1497/     F46 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1498/     F4A : 6716                		beq.s	.busy_timer
(1) 1499/     F4C : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1500/     F50 : DC46                		add.w	d6,d6		; * 2
(1) 1501/     F52 : 5347                		subq.w	#1,d7
(1) 1502/     F54 : 0240 00FF           		andi.w	#$FF,d0
(1) 1503/     F58 : D040                		add.w	d0,d0
(1) 1504/     F5A : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1505/     F5E : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1506/     F62 :                     .busy_timer:
(1) 1507/     F62 : DCFC 0008           		adda	#palfd_len,a6
(1) 1508/     F66 : 60B8                		bra.s	.next_req
(1) 1509/     F68 :                     .no_req:
(1) 1510/     F68 : 4278 D7E0           		clr.w	(RAM_IndxPalFade).w
(1) 1511/     F6C : 4E75                		rts
(1) 1512/     F6E :                     
(1) 1513/     F6E :                     ; ------------------------------------------------
(1) 1514/     F6E :                     
(1) 1515/     F6E :                     .fade_list:
(1) 1516/     F6E : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1517/     F70 : 0018                		dc.w .fade_out-.fade_list
(1) 1518/     F72 : 0088                		dc.w .fade_in-.fade_list
(1) 1519/     F74 : 0010                		dc.w .nothing-.fade_list
(1) 1520/     F76 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1521/     F78 : 0010                		dc.w .nothing-.fade_list
(1) 1522/     F7A : 0010                		dc.w .nothing-.fade_list
(1) 1523/     F7C : 0010                		dc.w .nothing-.fade_list
(1) 1524/     F7E :                     
(1) 1525/     F7E :                     ; ----------------------------------------------------
(1) 1526/     F7E :                     ; Fade request $00: Null/exit.
(1) 1527/     F7E :                     ; ----------------------------------------------------
(1) 1528/     F7E :                     
(1) 1529/     F7E :                     .nothing:
(1) 1530/     F7E :                     .pfade_del:
(1) 1531/     F7E : 4216                		clr.b	palfd_req(a6)
(1) 1532/     F80 : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1533/     F84 : 4E75                		rts
(1) 1534/     F86 :                     
(1) 1535/     F86 :                     ; ----------------------------------------------------
(1) 1536/     F86 :                     ; Fade request $01: fade-out to black
(1) 1537/     F86 :                     ; Quick.
(1) 1538/     F86 :                     ;
(1) 1539/     F86 :                     ; d7 - Num colors
(1) 1540/     F86 :                     ; d6 - Increment*2
(1) 1541/     F86 :                     ; ----------------------------------------------------
(1) 1542/     F86 :                     
(1) 1543/     F86 :                     .fade_out:
(1) 1544/     F86 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1545/     F8A : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1546/     F8E : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1547/     F92 : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1548/     F94 :                     .next_color:
(1) 1549/     F94 : 3015                		move.w	(a5),d0
(1) 1550/     F96 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1551/     F98 :                     	rept 3
(1) 1552/     F98 :                     		move.w	d0,d1
(1) 1553/     F98 :                     		and.w	d5,d1			; Filter TARGET
(1) 1554/     F98 :                     		beq.s	.no_chng
(1) 1555/     F98 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1556/     F98 :                     		sub.w	d6,d1
(1) 1557/     F98 :                     		bpl.s	.blck_alrdy
(1) 1558/     F98 :                     		clr.w	d1
(1) 1559/     F98 :                     .blck_alrdy:
(1) 1560/     F98 :                     		addq.w	#1,d3			; Color changed
(1) 1561/     F98 :                     .no_chng:
(1) 1562/     F98 :                     		or.w	d1,d0
(1) 1563/     F98 :                     		rol.w	#4,d6			; next << color
(1) 1564/     F98 :                     		rol.w	#4,d5
(1) 1565/     F98 :                     		rol.w	#4,d4
(1) 1566/     F98 :                     	endm
(1) 1552/     F98 : 3200                		move.w	d0,d1
(1) 1553/     F9A : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     F9C : 670A                		beq.s	.no_chng
(1) 1555/     F9E : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     FA0 : 9246                		sub.w	d6,d1
(1) 1557/     FA2 : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     FA4 : 4241                		clr.w	d1
(1) 1559/     FA6 :                     .blck_alrdy:
(1) 1560/     FA6 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     FA8 :                     .no_chng:
(1) 1562/     FA8 : 8041                		or.w	d1,d0
(1) 1563/     FAA : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     FAC : E95D                		rol.w	#4,d5
(1) 1565/     FAE : E95C                		rol.w	#4,d4
(1) 1552/     FB0 : 3200                		move.w	d0,d1
(1) 1553/     FB2 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     FB4 : 670A                		beq.s	.no_chng
(1) 1555/     FB6 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     FB8 : 9246                		sub.w	d6,d1
(1) 1557/     FBA : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     FBC : 4241                		clr.w	d1
(1) 1559/     FBE :                     .blck_alrdy:
(1) 1560/     FBE : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     FC0 :                     .no_chng:
(1) 1562/     FC0 : 8041                		or.w	d1,d0
(1) 1563/     FC2 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     FC4 : E95D                		rol.w	#4,d5
(1) 1565/     FC6 : E95C                		rol.w	#4,d4
(1) 1552/     FC8 : 3200                		move.w	d0,d1
(1) 1553/     FCA : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     FCC : 670A                		beq.s	.no_chng
(1) 1555/     FCE : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     FD0 : 9246                		sub.w	d6,d1
(1) 1557/     FD2 : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     FD4 : 4241                		clr.w	d1
(1) 1559/     FD6 :                     .blck_alrdy:
(1) 1560/     FD6 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     FD8 :                     .no_chng:
(1) 1562/     FD8 : 8041                		or.w	d1,d0
(1) 1563/     FDA : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     FDC : E95D                		rol.w	#4,d5
(1) 1565/     FDE : E95C                		rol.w	#4,d4
(1) 1567/     FE0 :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1568/     FE0 : E95E                		rol.w	#4,d6
(1) 1569/     FE2 : E95D                		rol.w	#4,d5
(1) 1570/     FE4 : E95C                		rol.w	#4,d4
(1) 1571/     FE6 : 3A80                		move.w	d0,(a5)
(1) 1572/     FE8 :                     .all_black:
(1) 1573/     FE8 : DAFC 0002           		adda	#2,a5
(1) 1574/     FEC : 51CF FFA6           		dbf	d7,.next_color
(1) 1575/     FF0 : 4A43                		tst.w	d3
(1) 1576/     FF2 : 678A                		beq	.pfade_del
(1) 1577/     FF4 :                     .fdout_nend:
(1) 1578/     FF4 : 4E75                		rts
(1) 1579/     FF6 :                     
(1) 1580/     FF6 :                     ; ----------------------------------------------------
(1) 1581/     FF6 :                     ; Fade request $02
(1) 1582/     FF6 :                     ; Fade-in
(1) 1583/     FF6 :                     ; ----------------------------------------------------
(1) 1584/     FF6 :                     
(1) 1585/     FF6 :                     .fade_in:
(1) 1586/     FF6 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1587/     FFA : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1588/     FFE : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1589/    1002 :                     .next_in:
(1) 1590/    1002 : 4847                		swap	d7
(1) 1591/    1004 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1592/    1006 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1593/    1008 : C044                		and.w	d4,d0
(1) 1594/    100A : C444                		and.w	d4,d2
(1) 1595/    100C : B042                		cmp.w	d2,d0
(1) 1596/    100E : 6766                		beq.s	.same_in
(1) 1597/    1010 :                     	rept 3
(1) 1598/    1010 :                     		move.w	d0,d1
(1) 1599/    1010 :                     		move.w	d4,d3
(1) 1600/    1010 :                     		eor.w	d5,d3
(1) 1601/    1010 :                     		and.w	d3,d0
(1) 1602/    1010 :                     		move.w	d2,d3
(1) 1603/    1010 :                     		and.w	d5,d1		; filter CURRENT color
(1) 1604/    1010 :                     		and.w	d5,d3		; filter TARGET color
(1) 1605/    1010 :                     
(1) 1606/    1010 :                     		add.w	d6,d1		; ADD to current
(1) 1607/    1010 :                     		cmp.w	d3,d1
(1) 1608/    1010 :                     		bcs.s	.max_out
(1) 1609/    1010 :                     		move.w	d2,d1
(1) 1610/    1010 :                     		and.w	d5,d1
(1) 1611/    1010 :                     .max_out:
(1) 1612/    1010 :                     		addq.w	#1,d7
(1) 1613/    1010 :                     		or.w	d1,d0
(1) 1614/    1010 :                     		rol.w	#4,d6		; next << color
(1) 1615/    1010 :                     		rol.w	#4,d5
(1) 1616/    1010 :                     	endm
(1) 1598/    1010 : 3200                		move.w	d0,d1
(1) 1599/    1012 : 3604                		move.w	d4,d3
(1) 1600/    1014 : BB43                		eor.w	d5,d3
(1) 1601/    1016 : C043                		and.w	d3,d0
(1) 1602/    1018 : 3602                		move.w	d2,d3
(1) 1603/    101A : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/    101C : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/    101E :                     
(1) 1606/    101E : D246                		add.w	d6,d1		; ADD to current
(1) 1607/    1020 : B243                		cmp.w	d3,d1
(1) 1608/    1022 : 6504                		bcs.s	.max_out
(1) 1609/    1024 : 3202                		move.w	d2,d1
(1) 1610/    1026 : C245                		and.w	d5,d1
(1) 1611/    1028 :                     .max_out:
(1) 1612/    1028 : 5247                		addq.w	#1,d7
(1) 1613/    102A : 8041                		or.w	d1,d0
(1) 1614/    102C : E95E                		rol.w	#4,d6		; next << color
(1) 1615/    102E : E95D                		rol.w	#4,d5
(1) 1598/    1030 : 3200                		move.w	d0,d1
(1) 1599/    1032 : 3604                		move.w	d4,d3
(1) 1600/    1034 : BB43                		eor.w	d5,d3
(1) 1601/    1036 : C043                		and.w	d3,d0
(1) 1602/    1038 : 3602                		move.w	d2,d3
(1) 1603/    103A : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/    103C : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/    103E :                     
(1) 1606/    103E : D246                		add.w	d6,d1		; ADD to current
(1) 1607/    1040 : B243                		cmp.w	d3,d1
(1) 1608/    1042 : 6504                		bcs.s	.max_out
(1) 1609/    1044 : 3202                		move.w	d2,d1
(1) 1610/    1046 : C245                		and.w	d5,d1
(1) 1611/    1048 :                     .max_out:
(1) 1612/    1048 : 5247                		addq.w	#1,d7
(1) 1613/    104A : 8041                		or.w	d1,d0
(1) 1614/    104C : E95E                		rol.w	#4,d6		; next << color
(1) 1615/    104E : E95D                		rol.w	#4,d5
(1) 1598/    1050 : 3200                		move.w	d0,d1
(1) 1599/    1052 : 3604                		move.w	d4,d3
(1) 1600/    1054 : BB43                		eor.w	d5,d3
(1) 1601/    1056 : C043                		and.w	d3,d0
(1) 1602/    1058 : 3602                		move.w	d2,d3
(1) 1603/    105A : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/    105C : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/    105E :                     
(1) 1606/    105E : D246                		add.w	d6,d1		; ADD to current
(1) 1607/    1060 : B243                		cmp.w	d3,d1
(1) 1608/    1062 : 6504                		bcs.s	.max_out
(1) 1609/    1064 : 3202                		move.w	d2,d1
(1) 1610/    1066 : C245                		and.w	d5,d1
(1) 1611/    1068 :                     .max_out:
(1) 1612/    1068 : 5247                		addq.w	#1,d7
(1) 1613/    106A : 8041                		or.w	d1,d0
(1) 1614/    106C : E95E                		rol.w	#4,d6		; next << color
(1) 1615/    106E : E95D                		rol.w	#4,d5
(1) 1617/    1070 : E95E                		rol.w	#4,d6
(1) 1618/    1072 : E95D                		rol.w	#4,d5
(1) 1619/    1074 : 3A80                		move.w	d0,(a5)
(1) 1620/    1076 :                     .same_in:
(1) 1621/    1076 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1622/    107A : D8FC 0002           		adda	#2,a4
(1) 1623/    107E : 4847                		swap	d7
(1) 1624/    1080 : 51CF FF80           		dbf	d7,.next_in
(1) 1625/    1084 : 4847                		swap	d7
(1) 1626/    1086 : 4A47                		tst.w	d7
(1) 1627/    1088 : 6700 FEF4           		beq	.pfade_del
(1) 1628/    108C :                     .fdin_nend:
(1) 1629/    108C : 4E75                		rts
(1) 1630/    108E :                     
(1) 1631/    108E :                     ; --------------------------------------------------------
(1) 1632/    108E :                     ; Video_WaitFade
(1) 1633/    108E :                     ;
(1) 1634/    108E :                     ; CPU-saving version of System_Render when
(1) 1635/    108E :                     ; waiting for a fade-in/fade-out
(1) 1636/    108E :                     ;
(1) 1637/    108E :                     ; THIS IS REQUIRED FOR 32X as
(1) 1638/    108E :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1639/    108E :                     ; --------------------------------------------------------
(1) 1640/    108E :                     
(1) 1641/    108E :                     Video_WaitFade:
(1) 1642/    108E :                     .loop:
(1) 1643/    108E : 6100 05B4           		bsr	System_Render
(1) 1644/    1092 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1648/    1096 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1649/    109A : 7C00                		moveq	#0,d6
(1) 1650/    109C :                     .next_one:
(1) 1651/    109C : 8C16                		or.b	palfd_req(a6),d6
(1) 1652/    109E : DCFC 0008           		adda	#palfd_len,a6
(1) 1657/    10A2 : 51CF FFF8           		dbf	d7,.next_one
(1) 1658/    10A6 : 4A06                		tst.b	d6
(1) 1659/    10A8 : 66E4                		bne.s	.loop
(1) 1660/    10AA : 4E75                		rts
(1) 1661/    10AC :                     
(1) 1662/    10AC :                     ; --------------------------------------------------------
(1) 1663/    10AC :                     ; Video_FadeIn_Full
(1) 1664/    10AC :                     ;
(1) 1665/    10AC :                     ; Overwrites first entry on each's PalFadeList
(1) 1666/    10AC :                     ; --------------------------------------------------------
(1) 1667/    10AC :                     
(1) 1668/    10AC :                     Video_FadeIn_Full:
(1) 1675/    10AC : 7002                		moveq	#2,d0
(1) 1676/    10AE : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1677/    10B4 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1678/    10BA : 6116                		bsr	Video_MakeFade
(1) 1679/    10BC : 60D0                		bra	Video_WaitFade
(1) 1680/    10BE :                     
(1) 1681/    10BE :                     ; --------------------------------------------------------
(1) 1682/    10BE :                     ; Video_FadeIn_Full
(1) 1683/    10BE :                     ;
(1) 1684/    10BE :                     ; Overwrites first entry on each's PalFadeList
(1) 1685/    10BE :                     ; --------------------------------------------------------
(1) 1686/    10BE :                     
(1) 1687/    10BE :                     Video_FadeOut_Full:
(1) 1694/    10BE : 7001                		moveq	#1,d0
(1) 1695/    10C0 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1696/    10C6 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1697/    10CC : 6104                		bsr	Video_MakeFade
(1) 1698/    10CE : 60BE                		bra	Video_WaitFade
(1) 1699/    10D0 :                     
(1) 1700/    10D0 :                     ; ============================================================
(1) 1701/    10D0 :                     ; --------------------------------------------------------
(1) 1702/    10D0 :                     ; Subroutines
(1) 1703/    10D0 :                     ; --------------------------------------------------------
(1) 1704/    10D0 :                     
(1) 1705/    10D0 :                     ; --------------------------------------------------------
(1) 1706/    10D0 :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1707/    10D0 :                     ;
(1) 1708/    10D0 :                     ; Make palette Fading (or other) request, for
(1) 1709/    10D0 :                     ; both VDP and SVDP
(1) 1710/    10D0 :                     ;
(1) 1711/    10D0 :                     ; Input:
(1) 1712/    10D0 :                     ; d0.w | Task number:
(1) 1713/    10D0 :                     ;        0 - Fade-out
(1) 1714/    10D0 :                     ;        1 - Fade-in
(1) 1715/    10D0 :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1716/    10D0 :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1717/    10D0 :                     ; --------------------------------------------------------
(1) 1718/    10D0 :                     
(1) 1719/    10D0 :                     Video_MdMars_MakeFade:
(1) 1728/    10D0 : 4E75                		rts
(1) 1729/    10D2 :                     Video_MakeFade:
(1) 1730/    10D2 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1731/    10D6 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1732/    10DA : 3E38 D7E0           		move.w	(RAM_IndxPalFade).w,d7
(1) 1733/    10DE : 5278 D7E0           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1734/    10E2 : 6106                		bsr	vidMkFade_Go
(1) 1735/    10E4 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1736/    10E8 : 4E75                		rts
(1) 1737/    10EA :                     vidMkFade_Go:
(1) 1738/    10EA : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1739/    10F0 : E74F                		lsl.w	#3,d7			; index * 8
(1) 1740/    10F2 : DCC7                		adda	d7,a6
(1) 1741/    10F4 : 2E01                		move.l	d1,d7
(1) 1742/    10F6 : 2C02                		move.l	d2,d6
(1) 1743/    10F8 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1744/    10FA : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1745/    10FE : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1746/    1102 : 4846                		swap	d6
(1) 1747/    1104 : 4847                		swap	d7
(1) 1748/    1106 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1749/    110A : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1750/    110E : 4E75                		rts
(1) 1751/    1110 :                     
(1) 1752/    1110 :                     ; --------------------------------------------------------
(1) 1753/    1110 :                     ; Video_LoadPal, Video_FadePal
(1) 1754/    1110 :                     ;
(1) 1755/    1110 :                     ; Load VDP palette data, either current or for fading.
(1) 1756/    1110 :                     ;
(1) 1757/    1110 :                     ; Input:
(1) 1758/    1110 :                     ; a0   | Palette data
(1) 1759/    1110 :                     ; d0.w | Starting color index
(1) 1760/    1110 :                     ; d1.w | Number of colors
(1) 1761/    1110 :                     ; --------------------------------------------------------
(1) 1762/    1110 :                     
(1) 1763/    1110 :                     Video_FadePal:
(1) 1764/    1110 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1765/    1114 : 4DF8 D5D0           		lea	(RAM_PaletteFade).w,a6
(1) 1766/    1118 : 6008                		bra.s	vidMd_Pal
(1) 1767/    111A :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1768/    111A :                     ; 		rts
(1) 1769/    111A :                     Video_LoadPal:
(1) 1770/    111A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1771/    111E : 4DF8 D550           		lea	(RAM_Palette).w,a6
(1) 1772/    1122 :                     ; 		bsr.s	vidMd_Pal
(1) 1773/    1122 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1774/    1122 :                     ; 		rts
(1) 1775/    1122 :                     
(1) 1776/    1122 :                     ; --------------------------------------------------------
(1) 1777/    1122 :                     vidMd_Pal:
(1) 1778/    1122 : 2A48                		move.l	a0,a5
(1) 1779/    1124 : 7E00                		moveq	#0,d7
(1) 1780/    1126 : 3E00                		move.w	d0,d7
(1) 1781/    1128 : DE47                		add.w	d7,d7
(1) 1782/    112A : DCC7                		adda	d7,a6
(1) 1783/    112C : 3E01                		move.w	d1,d7
(1) 1784/    112E : 5347                		subq.w	#1,d7
(1) 1785/    1130 : 6B0E                		bmi.s	.bad
(1) 1786/    1132 : 3C02                		move.w	d2,d6
(1) 1787/    1134 : 0246 0001           		andi.w	#1,d6
(1) 1788/    1138 : E25E                		ror.w	#1,d6
(1) 1789/    113A :                     .loop:
(1) 1790/    113A : 3CDD                		move.w	(a5)+,(a6)+
(1) 1791/    113C : 51CF FFFC           		dbf	d7,.loop
(1) 1792/    1140 :                     .bad:
(1) 1793/    1140 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1794/    1144 : 4E75                		rts
(1) 1795/    1146 :                     
(1) 1796/    1146 :                     ; --------------------------------------------------------
(1) 1797/    1146 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1798/    1146 :                     ;
(1) 1799/    1146 :                     ; Loads palettes on bulk with a list
(1) 1800/    1146 :                     ;
(1) 1801/    1146 :                     ; Input:
(1) 1802/    1146 :                     ; a0 | List of graphics to load:
(1) 1803/    1146 :                     ;        dc.w numof_entries
(1) 1804/    1146 :                     ;        dc.l palette_data
(1) 1805/    1146 :                     ;        dc.w start_at
(1) 1806/    1146 :                     ;        dc.w numof_colors
(1) 1807/    1146 :                     ;        ; ...more entries
(1) 1808/    1146 :                     ; --------------------------------------------------------
(1) 1809/    1146 :                     
(1) 1810/    1146 :                     Video_LoadPal_List:
(1) 1811/    1146 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1812/    114A : 2A48                		move.l	a0,a5
(1) 1813/    114C : 3E1D                		move.w	(a5)+,d7
(1) 1814/    114E : 6710                		beq.s	.invalid
(1) 1815/    1150 : 6B0E                		bmi.s	.invalid
(1) 1816/    1152 : 5347                		subq.w	#1,d7
(1) 1817/    1154 :                     .next_one:
(1) 1818/    1154 : 205D                		move.l	(a5)+,a0
(1) 1819/    1156 : 301D                		move.w	(a5)+,d0
(1) 1820/    1158 : 321D                		move.w	(a5)+,d1
(1) 1821/    115A : 61BE                		bsr	Video_LoadPal
(1) 1822/    115C : 51CF FFF6           		dbf	d7,.next_one
(1) 1823/    1160 :                     .invalid:
(1) 1824/    1160 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1825/    1164 : 4E75                		rts
(1) 1826/    1166 :                     
(1) 1827/    1166 :                     Video_FadePal_List:
(1) 1828/    1166 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1829/    116A : 2A48                		move.l	a0,a5
(1) 1830/    116C : 3E1D                		move.w	(a5)+,d7
(1) 1831/    116E : 6710                		beq.s	.invalid
(1) 1832/    1170 : 6B0E                		bmi.s	.invalid
(1) 1833/    1172 : 5347                		subq.w	#1,d7
(1) 1834/    1174 :                     .next_one:
(1) 1835/    1174 : 205D                		move.l	(a5)+,a0
(1) 1836/    1176 : 301D                		move.w	(a5)+,d0
(1) 1837/    1178 : 321D                		move.w	(a5)+,d1
(1) 1838/    117A : 6194                		bsr	Video_FadePal
(1) 1839/    117C : 51CF FFF6           		dbf	d7,.next_one
(1) 1840/    1180 :                     .invalid:
(1) 1841/    1180 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1842/    1184 : 4E75                		rts
(1) 1843/    1186 :                     
(1) 1844/    1186 :                     ; ====================================================================
(1) 1845/    1186 :                     ; ----------------------------------------------------------------
(1) 1846/    1186 :                     ; Text PRINT system.
(1) 1847/    1186 :                     ; ----------------------------------------------------------------
(1) 1848/    1186 :                     
(1) 1849/    1186 :                     ; --------------------------------------------------------
(1) 1850/    1186 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1851/    1186 :                     ;
(1) 1852/    1186 :                     ; Initializes the default Graphics and Palette
(1) 1853/    1186 :                     ; for the font.
(1) 1854/    1186 :                     ;
(1) 1855/    1186 :                     ; Input:
(1) 1856/    1186 :                     ; d0.l | Graphics data
(1) 1857/    1186 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1858/    1186 :                     ; d1.w | VRAM output location to load and use
(1) 1859/    1186 :                     ;        the ASCII text including attribute
(1) 1860/    1186 :                     ;        settings (Palette and Priority)
(1) 1861/    1186 :                     ;        Defualt values are:
(1) 1862/    1186 :                     ;        DEF_PrintVram for 8x8 and
(1) 1863/    1186 :                     ;        DEF_PrintVramW for 8x16
(1) 1864/    1186 :                     ;
(1) 1865/    1186 :                     ; Breaks:
(1) 1866/    1186 :                     ; d0-d3
(1) 1867/    1186 :                     ;
(1) 1868/    1186 :                     ; Notes:
(1) 1869/    1186 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1870/    1186 :                     ; - Write your palette manually after this
(1) 1871/    1186 :                     ; --------------------------------------------------------
(1) 1872/    1186 :                     
(1) 1873/    1186 :                     Video_PrintInitW:
(1) 1874/    1186 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1875/    118A : 6004                		bra.s	vidPrint_Init
(1) 1876/    118C :                     Video_PrintInit:
(1) 1877/    118C : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1878/    1190 :                     vidPrint_Init:
(1) 1879/    1190 : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1880/    1192 : 6000 F958           		bra	Video_LoadArt
(1) 1881/    1196 :                     
(1) 1882/    1196 :                     ; --------------------------------------------------------
(1) 1883/    1196 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1884/    1196 :                     ;
(1) 1885/    1196 :                     ; Loads default palette for the font
(1) 1886/    1196 :                     ; --------------------------------------------------------
(1) 1887/    1196 :                     
(1) 1888/    1196 :                     Video_PrintDefPal_Fade:
(1) 1889/    1196 : 2F0E                		move.l	a6,-(sp)
(1) 1890/    1198 : 4DF8 D630           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1891/    119C : 6006                		bra.s	vid_FontDefPal
(1) 1892/    119E :                     Video_PrintDefPal:
(1) 1893/    119E : 2F0E                		move.l	a6,-(sp)
(1) 1894/    11A0 : 4DF8 D5B0           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1895/    11A4 :                     vid_FontDefPal:
(1) 1896/    11A4 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1897/    11A8 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1898/    11AC : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1899/    11B0 : 2C5F                		move.l	(sp)+,a6
(1) 1900/    11B2 : 4E75                		rts
(1) 1901/    11B4 :                     
(1) 1902/    11B4 :                     ; --------------------------------------------------------
(1) 1903/    11B4 :                     ; Video_Print, Video_PrintW
(1) 1904/    11B4 :                     ;
(1) 1905/    11B4 :                     ; Prints a text string, VDP side.
(1) 1906/    11B4 :                     ;
(1) 1907/    11B4 :                     ; Input:
(1) 1908/    11B4 :                     ; a0   | String data
(1) 1909/    11B4 :                     ; d0.w | X position
(1) 1910/    11B4 :                     ; d1.w | Y position
(1) 1911/    11B4 :                     ; d2.w | Font VRAM location
(1) 1912/    11B4 :                     ; d3.l | Screen width / Screen VRAM location:
(1) 1913/    11B4 :                     ;        splitw(width,vram_out)
(1) 1914/    11B4 :                     ;
(1) 1915/    11B4 :                     ; * Font VRAM location
(1) 1916/    11B4 :                     ; Default 8x8:  DEF_PrintVram
(1) 1917/    11B4 :                     ; Default 8x16: DEF_PrintVramW
(1) 1918/    11B4 :                     ;
(1) 1919/    11B4 :                     ; * Screen VRAM
(1) 1920/    11B4 :                     ; Foreground: DEF_VRAM_FG
(1) 1921/    11B4 :                     ; Background: DEF_VRAM_BG
(1) 1922/    11B4 :                     ; Window:     DEF_VRAM_WD
(1) 1923/    11B4 :                     ;
(1) 1924/    11B4 :                     ; * Screen Width
(1) 1925/    11B4 :                     ; $040 (DEF_HSIZE_32)
(1) 1926/    11B4 :                     ; $080 (DEF_HSIZE_64)
(1) 1927/    11B4 :                     ; $100 (DEF_HSIZE_128)
(1) 1928/    11B4 :                     ;
(1) 1929/    11B4 :                     ; Notes:
(1) 1930/    11B4 :                     ; - Initialize your graphics and VRAM location
(1) 1931/    11B4 :                     ;   with Video_PrintInit
(1) 1932/    11B4 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1933/    11B4 :                     ;   mode.
(1) 1934/    11B4 :                     ; --------------------------------------------------------
(1) 1935/    11B4 :                     
(1) 1936/    11B4 :                     ; dc.l pstr(type,ram_location)
(1) 1937/    11B4 :                     ;
(1) 1938/    11B4 :                     ; type:
(1) 1939/    11B4 :                     ; 0 - Byte
(1) 1940/    11B4 :                     ; 1 - Word
(1) 1941/    11B4 :                     ; 2 - 24-bit
(1) 1942/    11B4 :                     ; 3 - Long
(1) 1943/    11B4 :                     
(1) 1944/    11B4 :                     Video_Print:
(1) 1945/    11B4 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1946/    11B8 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1947/    11BE : 3E03                		move.w	d3,d7
(1) 1948/    11C0 : 3A00                		move.w	d0,d5
(1) 1949/    11C2 : DA45                		add.w	d5,d5
(1) 1950/    11C4 : 3801                		move.w	d1,d4
(1) 1951/    11C6 : 4843                		swap	d3
(1) 1952/    11C8 : C8C3                		mulu.w	d3,d4
(1) 1953/    11CA : DA44                		add.w	d4,d5
(1) 1954/    11CC : DE45                		add.w	d5,d7
(1) 1955/    11CE : 3C03                		move.w	d3,d6
(1) 1956/    11D0 : 4843                		swap	d3
(1) 1957/    11D2 : 7A00                		moveq	#0,d5
(1) 1958/    11D4 : 3A07                		move.w	d7,d5
(1) 1959/    11D6 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1960/    11DA : 8E7C 4000           		or.w	#$4000,d7
(1) 1961/    11DE : E55D                		rol.w	#2,d5
(1) 1962/    11E0 : 0245 0003           		andi.w	#%11,d5
(1) 1963/    11E4 : 4845                		swap	d5
(1) 1964/    11E6 : 2A48                		move.l	a0,a5
(1) 1965/    11E8 :                     .loop:
(1) 1966/    11E8 : 3806                		move.w	d6,d4
(1) 1967/    11EA : 5344                		subq.w	#1,d4
(1) 1968/    11EC : CA44                		and.w	d4,d5
(1) 1969/    11EE :                     
(1) 1970/    11EE : 3807                		move.w	d7,d4
(1) 1971/    11F0 : D845                		add.w	d5,d4
(1) 1972/    11F2 : 4845                		swap	d5
(1) 1973/    11F4 : 3D44 0004           		move.w	d4,4(a6)
(1) 1974/    11F8 : 3D45 0004           		move.w	d5,4(a6)
(1) 1975/    11FC : 4845                		swap	d5
(1) 1976/    11FE :                     .q_loop:
(1) 1977/    11FE : 181D                		move.b	(a5)+,d4
(1) 1978/    1200 : 671E                		beq.s	.exit
(1) 1979/    1202 : 6B22                		bmi.s	.special
(1) 1980/    1204 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1981/    1208 : 6710                		beq.s	.next
(1) 1982/    120A :                     ; ------------------------------------------------
(1) 1983/    120A :                     ; Normal text
(1) 1984/    120A : 0244 00FF           		andi.w	#$FF,d4
(1) 1985/    120E :                     ; 		add.w	(RAM_SetPrntVram).w,d4
(1) 1986/    120E : D842                		add.w	d2,d4
(1) 1987/    1210 : 0444 0020           		subi.w	#$20,d4
(1) 1988/    1214 : 3C84                		move.w	d4,(a6)
(1) 1989/    1216 : 5445                		addq.w	#2,d5
(1) 1990/    1218 : 60E4                		bra.s	.q_loop
(1) 1991/    121A :                     .next:
(1) 1992/    121A : 4245                		clr.w	d5
(1) 1993/    121C : DE46                		add.w	d6,d7			; Next line
(1) 1994/    121E : 60C8                		bra.s	.loop
(1) 1995/    1220 :                     .exit:
(1) 1996/    1220 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1997/    1224 : 4E75                		rts
(1) 1998/    1226 :                     ; ------------------------------------------------
(1) 1999/    1226 :                     ; Show value
(1) 2000/    1226 :                     ; d4 - $80|flags
(1) 2001/    1226 :                     .special:
(1) 2002/    1226 : 4846                		swap	d6
(1) 2003/    1228 : 1C04                		move.b	d4,d6
(1) 2004/    122A : E19C                		rol.l	#8,d4
(1) 2005/    122C : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2006/    122E : E19C                		rol.l	#8,d4
(1) 2007/    1230 : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2008/    1232 : E19C                		rol.l	#8,d4
(1) 2009/    1234 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2010/    1236 : 2844                		move.l	d4,a4
(1) 2011/    1238 : 0246 0003           		andi.w	#%11,d6
(1) 2012/    123C : 4847                		swap	d7
(1) 2013/    123E : 3E3C 0000           		move.w	#1-1,d7
(1) 2014/    1242 : BC3C 0003           		cmp.b	#$03,d6
(1) 2015/    1246 : 6724                		beq.s	.show_long
(1) 2016/    1248 : BC3C 0002           		cmp.b	#$02,d6
(1) 2017/    124C : 6716                		beq.s	.show_24
(1) 2018/    124E : BC3C 0001           		cmp.b	#$01,d6
(1) 2019/    1252 : 6708                		beq.s	.show_word
(1) 2020/    1254 :                     .show_byte:
(1) 2021/    1254 : 1814                		move.b	(a4),d4
(1) 2022/    1256 : 4844                		swap	d4
(1) 2023/    1258 : E19C                		rol.l	#8,d4
(1) 2024/    125A : 6014                		bra.s	.mk_value
(1) 2025/    125C :                     .show_word:
(1) 2026/    125C : 3814                		move.w	(a4),d4
(1) 2027/    125E : 4844                		swap	d4
(1) 2028/    1260 : 5247                		addq.w	#1,d7
(1) 2029/    1262 : 600C                		bra.s	.mk_value
(1) 2030/    1264 :                     .show_24:
(1) 2031/    1264 : 2814                		move.l	(a4),d4
(1) 2032/    1266 : E19C                		rol.l	#8,d4
(1) 2033/    1268 : 5447                		addq.w	#2,d7
(1) 2034/    126A : 6004                		bra.s	.mk_value
(1) 2035/    126C :                     .show_long:
(1) 2036/    126C : 2814                		move.l	(a4),d4
(1) 2037/    126E : 5647                		addq.w	#3,d7
(1) 2038/    1270 :                     .mk_value:
(1) 2039/    1270 : E99C                		rol.l	#4,d4
(1) 2040/    1272 : 6110                		bsr.s	.show_nibbl
(1) 2041/    1274 : E99C                		rol.l	#4,d4
(1) 2042/    1276 : 610C                		bsr.s	.show_nibbl
(1) 2043/    1278 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2044/    127C : 4846                		swap	d6
(1) 2045/    127E : 4847                		swap	d7
(1) 2046/    1280 : 6000 FF66           		bra	.loop
(1) 2047/    1284 :                     .show_nibbl:
(1) 2048/    1284 : 2846                		move.l	d6,a4
(1) 2049/    1286 : 1C04                		move.b	d4,d6
(1) 2050/    1288 : 0246 000F           		andi.w	#$0F,d6
(1) 2051/    128C : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2052/    1290 : 6502                		bcs.s	.hex_incr
(1) 2053/    1292 : 5E46                		addq.w	#7,d6
(1) 2054/    1294 : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2055/    1298 :                     ; 		add.w	(RAM_SetPrntVram).w,d6
(1) 2056/    1298 : DC42                		add.w	d2,d6
(1) 2057/    129A : 0446 0020           		subi.w	#$20,d6
(1) 2058/    129E : 3C86                		move.w	d6,(a6)
(1) 2059/    12A0 : 5445                		addq.w	#2,d5
(1) 2060/    12A2 : 2C0C                		move.l	a4,d6
(1) 2061/    12A4 : 4E75                		rts
(1) 2062/    12A6 :                     
(1) 2063/    12A6 :                     ; --------------------------------------------------------
(1) 2064/    12A6 :                     ; 8x16 version
(1) 2065/    12A6 :                     ; --------------------------------------------------------
(1) 2066/    12A6 :                     
(1) 2067/    12A6 :                     Video_PrintW:
(1) 2068/    12A6 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2069/    12AA : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2070/    12B0 :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2071/    12B0 : 3C02                		move.w	d2,d6
(1) 2072/    12B2 : 0446 0040           		subi.w	#$20*2,d6
(1) 2073/    12B6 : 3A38 D7F6           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2074/    12BA : 0805 0002           		btst	#2,d5
(1) 2075/    12BE : 670E                		beq.s	.no_dble_y
(1) 2076/    12C0 : 3E06                		move.w	d6,d7
(1) 2077/    12C2 : 0247 F800           		andi.w	#$F800,d7
(1) 2078/    12C6 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2079/    12CA : E24E                		lsr.w	#1,d6
(1) 2080/    12CC : 8C47                		or.w	d7,d6
(1) 2081/    12CE :                     .no_dble_y:
(1) 2082/    12CE : 4846                		swap	d6
(1) 2083/    12D0 : 3E03                		move.w	d3,d7
(1) 2084/    12D2 : 3A00                		move.w	d0,d5
(1) 2085/    12D4 : DA45                		add.w	d5,d5
(1) 2086/    12D6 : 3801                		move.w	d1,d4
(1) 2087/    12D8 : 4843                		swap	d3
(1) 2088/    12DA : C8C3                		mulu.w	d3,d4
(1) 2089/    12DC : DA44                		add.w	d4,d5
(1) 2090/    12DE : DE45                		add.w	d5,d7
(1) 2091/    12E0 : 3C03                		move.w	d3,d6
(1) 2092/    12E2 : 4843                		swap	d3
(1) 2093/    12E4 :                     
(1) 2094/    12E4 : 7A00                		moveq	#0,d5
(1) 2095/    12E6 : 3A07                		move.w	d7,d5
(1) 2096/    12E8 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2097/    12EC : 8E7C 4000           		or.w	#$4000,d7
(1) 2098/    12F0 : E55D                		rol.w	#2,d5
(1) 2099/    12F2 : 0245 0003           		andi.w	#%11,d5
(1) 2100/    12F6 : 4845                		swap	d5
(1) 2101/    12F8 : 2A48                		move.l	a0,a5
(1) 2102/    12FA :                     	; d7 -      TEMP       | VDP write left
(1) 2103/    12FA :                     	; d6 -      TEMP       | Y next-line size
(1) 2104/    12FA :                     	; d5 - VDP write right | X current pos
(1) 2105/    12FA :                     	; d4 -                 | TEMP
(1) 2106/    12FA :                     .loop:
(1) 2107/    12FA : 3806                		move.w	d6,d4
(1) 2108/    12FC : 5344                		subq.w	#1,d4
(1) 2109/    12FE : CA44                		and.w	d4,d5
(1) 2110/    1300 : 181D                		move.b	(a5)+,d4
(1) 2111/    1302 : 6776                		beq.s	.exit
(1) 2112/    1304 : 6B7A                		bmi.s	.special
(1) 2113/    1306 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2114/    130A : 6766                		beq.s	.next
(1) 2115/    130C :                     ; ------------------------------------------------
(1) 2116/    130C :                     ; Normal text
(1) 2117/    130C : 0244 00FF           		andi.w	#$FF,d4
(1) 2118/    1310 : 4847                		swap	d7
(1) 2119/    1312 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2120/    1316 : 0807 0002           		btst	#2,d7
(1) 2121/    131A : 671E                		beq.s	.ver_normal
(1) 2122/    131C : 4846                		swap	d6
(1) 2123/    131E : D846                		add.w	d6,d4
(1) 2124/    1320 : 4846                		swap	d6
(1) 2125/    1322 : 4844                		swap	d4
(1) 2126/    1324 : 4847                		swap	d7
(1) 2127/    1326 : 3807                		move.w	d7,d4
(1) 2128/    1328 : D845                		add.w	d5,d4
(1) 2129/    132A : 4845                		swap	d5
(1) 2130/    132C : 3D44 0004           		move.w	d4,4(a6)
(1) 2131/    1330 : 3D45 0004           		move.w	d5,4(a6)
(1) 2132/    1334 : 4844                		swap	d4
(1) 2133/    1336 : 3C84                		move.w	d4,(a6)
(1) 2134/    1338 : 6032                		bra.s	.ver_cont
(1) 2135/    133A :                     .ver_normal:
(1) 2136/    133A : D844                		add.w	d4,d4
(1) 2137/    133C : 4846                		swap	d6
(1) 2138/    133E : D846                		add.w	d6,d4
(1) 2139/    1340 : 4846                		swap	d6
(1) 2140/    1342 : 4844                		swap	d4
(1) 2141/    1344 : 4847                		swap	d7
(1) 2142/    1346 : 3807                		move.w	d7,d4
(1) 2143/    1348 : D845                		add.w	d5,d4
(1) 2144/    134A : 4845                		swap	d5
(1) 2145/    134C : 3D44 0004           		move.w	d4,4(a6)
(1) 2146/    1350 : 3D45 0004           		move.w	d5,4(a6)
(1) 2147/    1354 : 4844                		swap	d4
(1) 2148/    1356 : 3C84                		move.w	d4,(a6)
(1) 2149/    1358 : 5244                		addq.w	#1,d4
(1) 2150/    135A : 4844                		swap	d4
(1) 2151/    135C : D846                		add.w	d6,d4
(1) 2152/    135E : 3D44 0004           		move.w	d4,4(a6)
(1) 2153/    1362 : 3D45 0004           		move.w	d5,4(a6)
(1) 2154/    1366 : 4844                		swap	d4
(1) 2155/    1368 : 3C84                		move.w	d4,(a6)
(1) 2156/    136A : 4844                		swap	d4
(1) 2157/    136C :                     
(1) 2158/    136C :                     .ver_cont:
(1) 2159/    136C : 4845                		swap	d5
(1) 2160/    136E : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2161/    1370 : 6088                		bra.s	.loop
(1) 2162/    1372 :                     .next:
(1) 2163/    1372 : 4245                		clr.w	d5		; Clear X pos
(1) 2164/    1374 : DE46                		add.w	d6,d7		; Next Y line
(1) 2165/    1376 : DE46                		add.w	d6,d7		; twice
(1) 2166/    1378 : 6080                		bra	.loop
(1) 2167/    137A :                     .exit:
(1) 2168/    137A : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2169/    137E : 4E75                		rts
(1) 2170/    1380 :                     ; ------------------------------------------------
(1) 2171/    1380 :                     ; Show value
(1) 2172/    1380 :                     ; d4 - $80|flags
(1) 2173/    1380 :                     .special:
(1) 2174/    1380 : 2646                		move.l	d6,a3
(1) 2175/    1382 : 1C04                		move.b	d4,d6
(1) 2176/    1384 : E19C                		rol.l	#8,d4
(1) 2177/    1386 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2178/    1388 : E19C                		rol.l	#8,d4
(1) 2179/    138A : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2180/    138C : E19C                		rol.l	#8,d4
(1) 2181/    138E : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2182/    1390 : 2844                		move.l	d4,a4
(1) 2183/    1392 : 0246 0003           		andi.w	#%11,d6
(1) 2184/    1396 : 4847                		swap	d7
(1) 2185/    1398 : 3E3C 0000           		move.w	#1-1,d7
(1) 2186/    139C : BC3C 0003           		cmp.b	#$03,d6
(1) 2187/    13A0 : 6724                		beq.s	.show_long
(1) 2188/    13A2 : BC3C 0002           		cmp.b	#$02,d6
(1) 2189/    13A6 : 6716                		beq.s	.show_24
(1) 2190/    13A8 : BC3C 0001           		cmp.b	#$01,d6
(1) 2191/    13AC : 6708                		beq.s	.show_word
(1) 2192/    13AE :                     .show_byte:
(1) 2193/    13AE : 1814                		move.b	(a4),d4
(1) 2194/    13B0 : 4844                		swap	d4
(1) 2195/    13B2 : E19C                		rol.l	#8,d4
(1) 2196/    13B4 : 6014                		bra.s	.mk_value_in
(1) 2197/    13B6 :                     .show_word:
(1) 2198/    13B6 : 3814                		move.w	(a4),d4
(1) 2199/    13B8 : 4844                		swap	d4
(1) 2200/    13BA : 5247                		addq.w	#1,d7
(1) 2201/    13BC : 600C                		bra.s	.mk_value_in
(1) 2202/    13BE :                     .show_24:
(1) 2203/    13BE : 2814                		move.l	(a4),d4
(1) 2204/    13C0 : E19C                		rol.l	#8,d4
(1) 2205/    13C2 : 5447                		addq.w	#2,d7
(1) 2206/    13C4 : 6004                		bra.s	.mk_value_in
(1) 2207/    13C6 :                     .show_long:
(1) 2208/    13C6 : 2814                		move.l	(a4),d4
(1) 2209/    13C8 : 5647                		addq.w	#3,d7
(1) 2210/    13CA :                     .mk_value_in:
(1) 2211/    13CA : 2C0B                		move.l	a3,d6
(1) 2212/    13CC :                     
(1) 2213/    13CC :                     
(1) 2214/    13CC :                     	; d4 - value
(1) 2215/    13CC : 4846                		swap	d6
(1) 2216/    13CE :                     .mk_value:
(1) 2217/    13CE : E99C                		rol.l	#4,d4
(1) 2218/    13D0 : 6110                		bsr.s	.show_nibbl
(1) 2219/    13D2 : E99C                		rol.l	#4,d4
(1) 2220/    13D4 : 610C                		bsr.s	.show_nibbl
(1) 2221/    13D6 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2222/    13DA : 4846                		swap	d6
(1) 2223/    13DC : 4847                		swap	d7
(1) 2224/    13DE : 6000 FF1A           		bra	.loop
(1) 2225/    13E2 :                     
(1) 2226/    13E2 :                     	; d6 - Y next-line size | TEMP
(1) 2227/    13E2 :                     .show_nibbl:
(1) 2228/    13E2 : 2846                		move.l	d6,a4
(1) 2229/    13E4 : 2644                		move.l	d4,a3
(1) 2230/    13E6 : 3C38 D7F6           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2231/    13EA : 0806 0002           		btst	#2,d6
(1) 2232/    13EE : 6730                		beq.s	.nibbl_norm
(1) 2233/    13F0 :                     
(1) 2234/    13F0 :                     	; TODO CHECAR ESTO
(1) 2235/    13F0 : 616C                		bsr.s	.get_preval
(1) 2236/    13F2 : 0446 0020           		subi.w	#$20,d6
(1) 2237/    13F6 : 4847                		swap	d7
(1) 2238/    13F8 :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2239/    13F8 : 3802                		move.w	d2,d4
(1) 2240/    13FA : 0244 07FF           		andi.w	#$7FF,d4
(1) 2241/    13FE : E24C                		lsr.w	#1,d4
(1) 2242/    1400 : DC44                		add.w	d4,d6
(1) 2243/    1402 :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2244/    1402 : 3802                		move.w	d2,d4
(1) 2245/    1404 : 0244 F800           		andi.w	#$F800,d4
(1) 2246/    1408 : 8C44                		or.w	d4,d6
(1) 2247/    140A : 3807                		move.w	d7,d4
(1) 2248/    140C : 4847                		swap	d7
(1) 2249/    140E : D845                		add.w	d5,d4
(1) 2250/    1410 : 4845                		swap	d5
(1) 2251/    1412 : 3D44 0004           		move.w	d4,4(a6)
(1) 2252/    1416 : 3D45 0004           		move.w	d5,4(a6)
(1) 2253/    141A : 4845                		swap	d5
(1) 2254/    141C : 3C86                		move.w	d6,(a6)
(1) 2255/    141E : 6036                		bra.s	.nibbl_cont
(1) 2256/    1420 :                     
(1) 2257/    1420 :                     .nibbl_norm:
(1) 2258/    1420 : 613C                		bsr.s	.get_preval
(1) 2259/    1422 : 0446 0020           		subi.w	#$20,d6
(1) 2260/    1426 : DC46                		add.w	d6,d6
(1) 2261/    1428 : DC42                		add.w	d2,d6
(1) 2262/    142A : 4847                		swap	d7
(1) 2263/    142C : 3807                		move.w	d7,d4
(1) 2264/    142E : 4847                		swap	d7
(1) 2265/    1430 : D845                		add.w	d5,d4
(1) 2266/    1432 : 4845                		swap	d5
(1) 2267/    1434 : 3D44 0004           		move.w	d4,4(a6)
(1) 2268/    1438 : 3D45 0004           		move.w	d5,4(a6)
(1) 2269/    143C : 4845                		swap	d5
(1) 2270/    143E : 3C86                		move.w	d6,(a6)
(1) 2271/    1440 : 5246                		addq.w	#1,d6
(1) 2272/    1442 : 4846                		swap	d6
(1) 2273/    1444 : D846                		add.w	d6,d4
(1) 2274/    1446 : 4846                		swap	d6
(1) 2275/    1448 : 4845                		swap	d5
(1) 2276/    144A : 3D44 0004           		move.w	d4,4(a6)
(1) 2277/    144E : 3D45 0004           		move.w	d5,4(a6)
(1) 2278/    1452 : 4845                		swap	d5
(1) 2279/    1454 : 3C86                		move.w	d6,(a6)
(1) 2280/    1456 :                     .nibbl_cont:
(1) 2281/    1456 : 5445                		addq.w	#2,d5
(1) 2282/    1458 : 2C0C                		move.l	a4,d6
(1) 2283/    145A : 280B                		move.l	a3,d4
(1) 2284/    145C : 4E75                		rts
(1) 2285/    145E :                     
(1) 2286/    145E :                     .get_preval:
(1) 2287/    145E : 1C04                		move.b	d4,d6
(1) 2288/    1460 : 0246 000F           		andi.w	#$0F,d6
(1) 2289/    1464 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2290/    1468 : 6502                		bcs.s	.hex_incr
(1) 2291/    146A : 5E46                		addq.w	#7,d6
(1) 2292/    146C :                     .hex_incr:
(1) 2293/    146C : DC7C 0030           		add.w	#"0",d6
(1) 2294/    1470 : 4E75                		rts
(1) 2295/    1472 :                     
(1) 2296/    1472 :                     ; ------------------------------------------------
(1) 2297/    1472 :                     ; Input:
(1) 2298/    1472 :                     ; d2.w | Layer:
(1) 2299/    1472 :                     ;        0 - Foreground
(1) 2300/    1472 :                     ;        1 - Background
(1) 2301/    1472 :                     ;        2 - WINDOW
(1) 2302/    1472 :                     ;
(1) 2303/    1472 :                     ; Returns:
(1) 2304/    1472 :                     ; d7 - VRAM location
(1) 2305/    1472 :                     ; d6 - Y jump size
(1) 2306/    1472 :                     ; ------------------------------------------------
(1) 2307/    1472 :                     
(1) 2308/    1472 :                     ; vidSub_PickLayer:
(1) 2309/    1472 :                     ; 		move.w	d2,d7
(1) 2310/    1472 :                     ; 		lsl.w	#2,d7
(1) 2311/    1472 :                     ; 		lea	(RAM_VdpRegs+$02).w,a5
(1) 2312/    1472 :                     ; 		lea	.filter_data(pc),a4
(1) 2313/    1472 :                     ; 		adda	d7,a4
(1) 2314/    1472 :                     ; 		moveq	#0,d7
(1) 2315/    1472 :                     ; 		moveq	#0,d5
(1) 2316/    1472 :                     ; 		move.b	(a4),d7
(1) 2317/    1472 :                     ; 		adda	d7,a5
(1) 2318/    1472 :                     ; 		move.b	1(a4),d6
(1) 2319/    1472 :                     ; 		move.b	2(a4),d5
(1) 2320/    1472 :                     ; 		move.b	(a5),d7		; d7 - Reg
(1) 2321/    1472 :                     ; 		and.b	d6,d7		; filter
(1) 2322/    1472 :                     ; 		lsl.w	d5,d7		; shift left
(1) 2323/    1472 :                     ; 		move.w	#$40,d6
(1) 2324/    1472 :                     ; 		move.b	(RAM_VdpRegs+$10).w,d6
(1) 2325/    1472 :                     ; 		andi.w	#%00000011,d6
(1) 2326/    1472 :                     ; 		add.w	d6,d6
(1) 2327/    1472 :                     ; 		move.w	.jump_sizes(pc,d6.w),d6
(1) 2328/    1472 :                     ; 		rts
(1) 2329/    1472 :                     ; .filter_data:
(1) 2330/    1472 :                     ; 		dc.b $00		; Reg slot
(1) 2331/    1472 :                     ; 		dc.b %00111000		; Filter bits
(1) 2332/    1472 :                     ; 		dc.b 10,0		; shift left, 0
(1) 2333/    1472 :                     ; 		dc.b $02
(1) 2334/    1472 :                     ; 		dc.b %00000111
(1) 2335/    1472 :                     ; 		dc.b 13,0
(1) 2336/    1472 :                     ; 		dc.b $01
(1) 2337/    1472 :                     ; 		dc.b %00111110
(1) 2338/    1472 :                     ; 		dc.b 10,0
(1) 2339/    1472 :                     ; .jump_sizes:	dc.w $040
(1) 2340/    1472 :                     ; 		dc.w $080
(1) 2341/    1472 :                     ; 		dc.w $080
(1) 2342/    1472 :                     ; 		dc.w $100
(1) 2343/    1472 :                     
(1) 2344/    1472 :                     ; ====================================================================
(1) 2345/    1472 :                     ; ----------------------------------------------------------------
(1) 2346/    1472 :                     ; VDP Sprites
(1) 2347/    1472 :                     ; ----------------------------------------------------------------
(1) 2348/    1472 :                     
(1) 2349/    1472 :                     ; --------------------------------------------------------
(1) 2350/    1472 :                     ; Video_SetSpr, Video_MakeSpr
(1) 2351/    1472 :                     ;
(1) 2352/    1472 :                     ; Sets or Makes a VDP Sprite piece
(1) 2353/    1472 :                     ;
(1) 2354/    1472 :                     ; Input:
(1) 2355/    1472 :                     ; a0   | Slot (0-80)
(1) 2356/    1472 :                     ; d0.w | X pos
(1) 2357/    1472 :                     ; d1.w | Y pos
(1) 2358/    1472 :                     ; d2.w | VRAM
(1) 2359/    1472 :                     ; d3.w | Size
(1) 2360/    1472 :                     ;
(1) 2361/    1472 :                     ; Returns:
(1) 2362/    1472 :                     ; bcc | OK
(1) 2363/    1472 :                     ; bcs | Ran out of slots (not sprites)
(1) 2364/    1472 :                     ; --------------------------------------------------------
(1) 2365/    1472 :                     
(1) 2366/    1472 :                     Video_SetSpr:
(1) 2367/    1472 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2368/    1476 : 2E08                		move.l	a0,d7
(1) 2369/    1478 : 7C00                		moveq	#0,d6
(1) 2370/    147A : 6020                		bra	vidMdSpr_MkSpr
(1) 2371/    147C :                     Video_MakeSpr:
(1) 2372/    147C : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2373/    1480 : 7E00                		moveq	#0,d7
(1) 2374/    1482 : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1) 2375/    1486 : 7C4F                		moveq	#80-1,d6
(1) 2376/    1488 :                     .chk_free:
(1) 2377/    1488 : 0816 0007           		btst	#7,(a6)
(1) 2378/    148C : 670C                		beq.s	.mk_spr
(1) 2379/    148E : 5247                		addq.w	#1,d7
(1) 2380/    1490 : DCFC 0008           		adda	#8,a6
(1) 2381/    1494 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2382/    1498 : 605C                		bra.s	vidMd_CError
(1) 2383/    149A :                     .mk_spr:
(1) 2384/    149A : 7C40                		moveq	#$40,d6
(1) 2385/    149C :                     vidMdSpr_MkSpr:
(1) 2386/    149C : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2387/    14A2 : BE7C 0050           		cmp.w	#80,d7
(1) 2388/    14A6 : 6C4E                		bge.s	vidMd_CError
(1) 2389/    14A8 : E74F                		lsl.w	#3,d7
(1) 2390/    14AA : 0687 FFFF C9C0      		addi.l	#RAM_SprPzList,d7
(1) 2391/    14B0 : 2C47                		move.l	d7,a6
(1) 2392/    14B2 : 4846                		swap	d6
(1) 2393/    14B4 : 3E01                		move.w	d1,d7			; Y pos
(1) 2394/    14B6 : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2395/    14BA : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2396/    14C0 : 6704                		beq.s	.dont_add
(1) 2397/    14C2 : 0647 0080           		addi.w	#$80,d7
(1) 2398/    14C6 :                     .dont_add:
(1) 2399/    14C6 : 0247 03FF           		andi.w	#$3FF,d7
(1) 2400/    14CA : 3C03                		move.w	d3,d6
(1) 2401/    14CC : 0246 000F           		andi.w	#%1111,d6
(1) 2402/    14D0 : E14E                		lsl.w	#8,d6
(1) 2403/    14D2 : E54E                		lsl.w	#2,d6
(1) 2404/    14D4 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2405/    14D6 : 4846                		swap	d6
(1) 2406/    14D8 : E14E                		lsl.w	#8,d6
(1) 2407/    14DA : 8E7C 8000           		or.w	#$8000,d7
(1) 2408/    14DE : 8E46                		or.w	d6,d7
(1) 2409/    14E0 : 3CC7                		move.w	d7,(a6)+
(1) 2410/    14E2 : 3E00                		move.w	d0,d7
(1) 2411/    14E4 : 0647 0080           		addi.w	#$80,d7
(1) 2412/    14E8 : 3CC7                		move.w	d7,(a6)+
(1) 2413/    14EA : 3CC2                		move.w	d2,(a6)+
(1) 2414/    14EC : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2415/    14F0 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2416/    14F4 : 4E75                		rts
(1) 2417/    14F6 :                     ; Carry error
(1) 2418/    14F6 :                     vidMd_CError:
(1) 2419/    14F6 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2420/    14FA : 003C 0001           		or	#1,ccr			; Return Error
(1) 2421/    14FE :                     vidMd_CFreeze:
(1) 2422/    14FE : 4E75                		rts
(1) 2423/    1500 :                     
(1) 2424/    1500 :                     ; --------------------------------------------------------
(1) 2425/    1500 :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2426/    1500 :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2427/    1500 :                     ;
(1) 2428/    1500 :                     ; Sets or Makes a VDP Sprite with map data
(1) 2429/    1500 :                     ;
(1) 2430/    1500 :                     ; Input:
(1) 2431/    1500 :                     ; a0   | Slot (0-80)
(1) 2432/    1500 :                     ; a1   | Map data
(1) 2433/    1500 :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2434/    1500 :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2435/    1500 :                     ; d0.w | X position
(1) 2436/    1500 :                     ; d1.w | Y position
(1) 2437/    1500 :                     ; d2.w | VRAM output location
(1) 2438/    1500 :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2439/    1500 :                     ;        cell vram is ignored.
(1) 2440/    1500 :                     ; d3.w | Frame number
(1) 2441/    1500 :                     ;
(1) 2442/    1500 :                     ; Returns:
(1) 2443/    1500 :                     ; bcc | OK
(1) 2444/    1500 :                     ; bcs | Ran out of slots (not sprites)
(1) 2445/    1500 :                     ; --------------------------------------------------------
(1) 2446/    1500 :                     
(1) 2447/    1500 :                     Video_SetSprMap_DMA:
(1) 2448/    1500 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2449/    1504 : 6104                		bsr	Video_SetSprMap
(1) 2450/    1506 : 651E                		bcs.s	vid_MkDmaCarry
(1) 2451/    1508 : 6012                		bra	vid_MkDmaNext
(1) 2452/    150A :                     Video_SetSprMap:
(1) 2453/    150A : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2454/    150E : 2E08                		move.l	a0,d7
(1) 2455/    1510 : 7C00                		moveq	#0,d6
(1) 2456/    1512 : 6036                		bra	vidMdSpr_MkSprMap
(1) 2457/    1514 :                     Video_MakeSprMap_DMA:
(1) 2458/    1514 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2459/    1518 : 6112                		bsr	Video_MakeSprMap
(1) 2460/    151A : 650A                		bcs.s	vid_MkDmaCarry
(1) 2461/    151C :                     vid_MkDmaNext:
(1) 2462/    151C : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2463/    151E : 224B                		move.l	a3,a1
(1) 2464/    1520 : 3003                		move.w	d3,d0
(1) 2465/    1522 : 3202                		move.w	d2,d1
(1) 2466/    1524 : 6160                		bsr	vid_MkMapDma
(1) 2467/    1526 :                     vid_MkDmaCarry:
(1) 2468/    1526 : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2469/    152A : 4E75                		rts
(1) 2470/    152C :                     
(1) 2471/    152C :                     Video_MakeSprMap:
(1) 2472/    152C : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2473/    1530 : 7E00                		moveq	#0,d7
(1) 2474/    1532 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1) 2475/    1536 : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2476/    1538 :                     .chk_free:
(1) 2477/    1538 : 4A16                		tst.b	(a6)
(1) 2478/    153A : 670C                		beq.s	.mk_spr
(1) 2479/    153C : 5247                		addq.w	#1,d7
(1) 2480/    153E : DCFC 0010           		adda	#$10,a6
(1) 2481/    1542 : 51CE FFF4           		dbf	d6,.chk_free
(1) 2482/    1546 : 60AE                		bra	vidMd_CError
(1) 2483/    1548 :                     .mk_spr:
(1) 2484/    1548 : 7C40                		moveq	#$40,d6
(1) 2485/    154A :                     vidMdSpr_MkSprMap:
(1) 2486/    154A : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2487/    1550 : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2488/    1554 : 6CA0                		bge	vidMd_CError
(1) 2489/    1556 : E98F                		lsl.l	#4,d7
(1) 2490/    1558 : 0687 FFFF C840      		addi.l	#RAM_SprMapList,d7
(1) 2491/    155E : 2C47                		move.l	d7,a6
(1) 2492/    1560 : 2E09                		move.l	a1,d7
(1) 2493/    1562 : 8C7C 0080           		or.w	#$80,d6
(1) 2494/    1566 : 4846                		swap	d6
(1) 2495/    1568 : E18E                		lsl.l	#8,d6
(1) 2496/    156A : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2497/    1570 : 8E86                		or.l	d6,d7
(1) 2498/    1572 : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2499/    1574 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2500/    1576 : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2501/    1578 : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2502/    157A : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2503/    157C : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2504/    1580 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2505/    1584 : 4E75                		rts
(1) 2506/    1586 :                     
(1) 2507/    1586 :                     ; --------------------------------------------------------
(1) 2508/    1586 :                     ; Input:
(1) 2509/    1586 :                     ; a0   | DMA map data
(1) 2510/    1586 :                     ; a1   | Graphics data
(1) 2511/    1586 :                     ; d0.w | Current frame in DMA list
(1) 2512/    1586 :                     ; d1.w | VRAM position
(1) 2513/    1586 :                     ;
(1) 2514/    1586 :                     ; USES:
(1) 2515/    1586 :                     ; a6
(1) 2516/    1586 :                     vid_MkMapDma:
(1) 2517/    1586 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2518/    158A : 7800                		moveq	#0,d4
(1) 2519/    158C : 0240 00FF           		andi.w	#$FF,d0
(1) 2520/    1590 : D040                 		add.w	d0,d0
(1) 2521/    1592 : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2522/    1596 : D0C4                 		adda	d4,a0
(1) 2523/    1598 : 3818                 		move.w	(a0)+,d4
(1) 2524/    159A : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2525/    159C : 6B32                 		bmi.s	.no_dma
(1) 2526/    159E : 5344                 		subq.w	#1,d4
(1) 2527/    15A0 : 0241 07FF           		andi.w	#$07FF,d1
(1) 2528/    15A4 : EB49                		lsl.w	#5,d1
(1) 2529/    15A6 :                     .next_pz:
(1) 2530/    15A6 : 4844                		swap	d4
(1) 2531/    15A8 : 3818                		move.w	(a0)+,d4
(1) 2532/    15AA : 3404                		move.w	d4,d2
(1) 2533/    15AC : EE4A                		lsr.w	#7,d2
(1) 2534/    15AE : 0242 01E0           		andi.w	#$1E0,d2
(1) 2535/    15B2 : D47C 0020           		add.w	#$20,d2
(1) 2536/    15B6 : 7000                		moveq	#0,d0
(1) 2537/    15B8 : 3004                		move.w	d4,d0
(1) 2538/    15BA : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2539/    15BE : EB48                		lsl.w	#5,d0
(1) 2540/    15C0 : D089                		add.l	a1,d0
(1) 2541/    15C2 : 6100 F72E           		bsr	Video_MakeDmaEntry
(1) 2542/    15C6 : D242                		add.w	d2,d1
(1) 2543/    15C8 : 4844                		swap	d4
(1) 2544/    15CA : 51CC FFDA           		dbf	d4,.next_pz
(1) 2545/    15CE : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2546/    15D0 :                     .no_dma:
(1) 2547/    15D0 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2548/    15D4 : 4E75                		rts
(1) 2549/    15D6 :                     
(1) 2550/    15D6 :                     ; ====================================================================
(1) 2551/    15D6 :                     ; ----------------------------------------------------------------
(1) 2552/    15D6 :                     ; Video routines for SEGA CD
(1) 2553/    15D6 :                     ; ----------------------------------------------------------------
(1) 2554/    15D6 :                     
(1) 3070/    15D6 :                     
(1) 3071/    15D6 :                     ; ====================================================================
(1) 3072/    15D6 :                     ; ----------------------------------------------------------------
(1) 3073/    15D6 :                     ; Video routines for 32X
(1) 3074/    15D6 :                     ; ----------------------------------------------------------------
(1) 3075/    15D6 :                     
(1) 3808/    15D6 :                     
     194/    15D6 :                     		include	"system/md/system.asm"
(1)    1/    15D6 :                     ; ===========================================================================
(1)    2/    15D6 :                     ; ----------------------------------------------------------------
(1)    3/    15D6 :                     ; Genesis system routines
(1)    4/    15D6 :                     ;
(1)    5/    15D6 :                     ; including SCD, 32X and PICO.
(1)    6/    15D6 :                     ; ----------------------------------------------------------------
(1)    7/    15D6 :                     
(1)    8/    15D6 :                     ; ====================================================================
(1)    9/    15D6 :                     ; --------------------------------------------------------
(1)   10/    15D6 :                     ; Settings
(1)   11/    15D6 :                     ; --------------------------------------------------------
(1)   12/    15D6 :                     
(1)   13/    15D6 : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects/scripts
(1)   14/    15D6 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/    15D6 :                     
(1)   16/    15D6 :                     ; ===================================================================
(1)   17/    15D6 :                     ; --------------------------------------------------------
(1)   18/    15D6 :                     ; Variables
(1)   19/    15D6 :                     ; --------------------------------------------------------
(1)   20/    15D6 :                     
(1)   21/    15D6 :                     ; ------------------------------------------------
(1)   22/    15D6 :                     ; Controller buffer data
(1)   23/    15D6 :                     ;
(1)   24/    15D6 :                     ; MUST call System_Input during VBlank
(1)   25/    15D6 :                     ; ------------------------------------------------
(1)   26/    15D6 :                     
(1)   27/    15D6 :                     ; ------------------------------------------------
(1)   28/    15D6 :                     ; pad_id
(1)   29/    15D6 :                     ;
(1)   30/    15D6 :                     ; JoyID_MD:
(1)   31/    15D6 :                     ; Read pad_ver separately to check if controller
(1)   32/    15D6 :                     ; is 3button(0) or 6button(1)
(1)   33/    15D6 :                     ; ------------------------------------------------
(1)   34/    15D6 :                     
(1)   35/    15D6 : =$3                  JoyID_Mouse	equ $03
(1)   36/    15D6 : =$D                  JoyID_MD	equ $0D
(1)   37/    15D6 : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/    15D6 :                     
(1)   39/    15D6 :                     ; ------------------------------------------------
(1)   40/    15D6 :                     ; Genesis controller
(1)   41/    15D6 :                     ;
(1)   42/    15D6 :                     ; Read these as WORD
(1)   43/    15D6 :                     ; ------------------------------------------------
(1)   44/    15D6 :                     
(1)   45/    15D6 :                     ; on_hold, on_press
(1)   46/    15D6 : =$1                  JoyUp		equ $0001
(1)   47/    15D6 : =$2                  JoyDown		equ $0002
(1)   48/    15D6 : =$4                  JoyLeft		equ $0004
(1)   49/    15D6 : =$8                  JoyRight	equ $0008
(1)   50/    15D6 : =$10                 JoyB		equ $0010
(1)   51/    15D6 : =$20                 JoyC		equ $0020
(1)   52/    15D6 : =$40                 JoyA		equ $0040
(1)   53/    15D6 : =$80                 JoyStart	equ $0080
(1)   54/    15D6 : =$100                JoyZ		equ $0100
(1)   55/    15D6 : =$200                JoyY		equ $0200
(1)   56/    15D6 : =$400                JoyX		equ $0400
(1)   57/    15D6 : =$800                JoyMode		equ $0800
(1)   58/    15D6 : =$0                  bitJoyUp	equ 0
(1)   59/    15D6 : =$1                  bitJoyDown	equ 1
(1)   60/    15D6 : =$2                  bitJoyLeft	equ 2
(1)   61/    15D6 : =$3                  bitJoyRight	equ 3
(1)   62/    15D6 : =$4                  bitJoyB		equ 4
(1)   63/    15D6 : =$5                  bitJoyC		equ 5
(1)   64/    15D6 : =$6                  bitJoyA		equ 6
(1)   65/    15D6 : =$7                  bitJoyStart	equ 7
(1)   66/    15D6 : =$8                  bitJoyZ		equ 8
(1)   67/    15D6 : =$9                  bitJoyY		equ 9
(1)   68/    15D6 : =$A                  bitJoyX		equ 10
(1)   69/    15D6 : =$B                  bitJoyMode	equ 11
(1)   70/    15D6 :                     
(1)   71/    15D6 :                     ; ------------------------------------------------
(1)   72/    15D6 :                     ; Mega Mouse ONLY
(1)   73/    15D6 :                     ;
(1)   74/    15D6 :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/    15D6 :                     ; NOT screen position.
(1)   76/    15D6 :                     ; ------------------------------------------------
(1)   77/    15D6 :                     
(1)   78/    15D6 : =$1                  ClickR		equ $0001
(1)   79/    15D6 : =$2                  ClickL		equ $0002
(1)   80/    15D6 : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/    15D6 : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/    15D6 : =$0                  bitClickL	equ 0
(1)   83/    15D6 : =$1                  bitClickR	equ 1
(1)   84/    15D6 : =$2                  bitClickM	equ 2
(1)   85/    15D6 : =$3                  bitClickS	equ 3
(1)   86/    15D6 :                     
(1)   87/    15D6 :                     ; ------------------------------------------------
(1)   88/    15D6 :                     ; Sega PICO
(1)   89/    15D6 :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/    15D6 :                     ; For reading the pen position use
(1)   91/    15D6 :                     ; mouse_x and mouse_y
(1)   92/    15D6 :                     ; ------------------------------------------------
(1)   93/    15D6 :                     
(1)   94/    15D6 : =$10                 JoyRED		equ $0010
(1)   95/    15D6 : =$80                 JoyPEN		equ $0080
(1)   96/    15D6 : =$4                  bitJoyRED	equ 4
(1)   97/    15D6 : =$7                  bitJoyPEN	equ 7
(1)   98/    15D6 :                     
(1)   99/    15D6 :                     ; ====================================================================
(1)  100/    15D6 :                     ; ----------------------------------------------------------------
(1)  101/    15D6 :                     ; Structs
(1)  102/    15D6 :                     ; ----------------------------------------------------------------
(1)  103/    15D6 :                     
(1)  104/    15D6 :                     ; ------------------------------------------------
(1)  105/    15D6 :                     ; RAM_InputData
(1)  106/    15D6 :                     
(1)  107/    15D6 :                     ; *** MANUAL VARIABLES ***
(1)  108/    15D6 : =$0                  pad_id			equ $00;ds.b 1			; Controller ID
(1)  109/    15D6 : =$1                  pad_ver			equ $01;ds.b 1			; Controller type/revision
(1)  110/    15D6 : =$2                  on_hold			equ $02;ds.w 1			; User HOLD bits
(1)  111/    15D6 : =$4                  on_press		equ $04;ds.w 1			; User PRESSED bits
(1)  112/    15D6 : =$6                  on_release		equ $06;ds.w 1			; User RELEASED bits
(1)  113/    15D6 : =$8                  mouse_x			equ $08;ds.w 1			; Mouse/Pen X speed
(1)  114/    15D6 : =$A                  mouse_y			equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  115/    15D6 : =$C                  ext_3			equ $0C;ds.w 1
(1)  116/    15D6 : =$E                  ext_4			equ $0E;ds.w 1
(1)  117/    15D6 : =$10                 sizeof_input		equ $10
(1)  118/    15D6 :                     
(1)  119/    15D6 :                     ; ------------------------------------------------
(1)  120/    15D6 :                     ; RAM_Objects
(1)  121/    15D6 :                     ;
(1)  122/    15D6 :                     ; Size must end as even
(1)  123/    15D6 :                     ; ------------------------------------------------
(1)  124/    15D6 :                     
(1)  125/       0 :                     obj			struct
(1)  126/       0 :                     code			ds.l 1		; Object code, If 0 == blank slot
(1)  127/       4 :                     x			ds.l 1		; Object X Position $xxxx.0000
(1)  128/       8 :                     y			ds.l 1		; Object Y Position $yyyy.0000
(1)  129/       C :                     z			ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  130/      10 :                     size_x			ds.w 1		; Object size Left/Right
(1)  131/      12 :                     size_y			ds.w 1		; Object size Up/Down
(1)  132/      14 :                     size_z			ds.w 1		; Object size Zback/Zfront starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  133/      16 :                     x_spd			ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  134/      18 :                     y_spd			ds.w 1		; Object Y Speed $yy.00 ''
(1)  135/      1A :                     z_spd			ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  136/      1C :                     index			ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  137/      1D :                     subid			ds.b 1		; Object Sub-ID for custom placement settings
(1)  138/      1E :                     status			ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  139/      1F :                     attr			ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  140/      20 :                     					; ** object_Animate ONLY:
(1)  141/      20 :                     frame			ds.w 1		; ** Current frame, object_Animate outputs here
(1)  142/      22 :                     anim_num		ds.w 1		; ** Animation number to use
(1)  143/      24 :                     anim_indx		ds.w 1		; ** Animation script index
(1)  144/      26 :                     anim_icur		ds.b 1		; ** Current animation id
(1)  145/      27 :                     anim_spd		ds.b 1		; ** Animation delay set on animation script
(1)  146/      28 :                     ram			ds.b $40	; Object's own RAM
(1)  147/      68 :                     ; obj_len		ds.l 0
(1)  148/    15D6 : =$68                 			endstruct
(1)  149/    15D6 :                     
(1)  150/    15D6 :                     ; ====================================================================
(1)  151/    15D6 :                     ; ----------------------------------------------------------------
(1)  152/    15D6 :                     ; RAM section
(1)  153/    15D6 :                     ; ----------------------------------------------------------------
(1)  154/    15D6 :                     
(1)  155/    15D6 : (MACRO)              			memory RAM_MdSystem
(1)  155/    15D6 : =$15D6               GLBL_LASTPC     := *
(1)  155/    15D6 :                                     dephase
(1)  155/FFFFFFFFFFFFD7F8 :                                     phase RAM_MDSYSTEM
(1)  155/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
(1)  156/FFFFFFFFFFFFD7F8 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  157/FFFFFFFFFFFFD8F8 :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  158/FFFFFFFFFFFFD938 :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  159/FFFFFFFFFFFFE978 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  160/FFFFFFFFFFFFE97C :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  161/FFFFFFFFFFFFE980 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFE986 :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFE98C :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFE992 :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFE994 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFE996 :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFE998 :                     RAM_McdExit		ds.w 1
(1)  168/FFFFFFFFFFFFE99A :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)  169/    277E :                     .here:          dephase
(1)  169/    277E :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/    15D6 :                                     phase GLBL_LASTPC
(1)  170/    15D6 :                     
(1)  171/    15D6 :                     ; ====================================================================
(1)  172/    15D6 :                     ; ----------------------------------------------------------------
(1)  173/    15D6 :                     ; Label aliases
(1)  174/    15D6 :                     ; ----------------------------------------------------------------
(1)  175/    15D6 :                     
(1)  176/    15D6 : =$FFFFFFFFFFFFD8F8   Controller_1		equ RAM_InputData
(1)  177/    15D6 : =$FFFFFFFFFFFFD908   Controller_2		equ RAM_InputData+sizeof_input
(1)  178/    15D6 :                     
(1)  179/    15D6 :                     ; ====================================================================
(1)  180/    15D6 :                     ; --------------------------------------------------------
(1)  181/    15D6 :                     ; Init System
(1)  182/    15D6 :                     ; 
(1)  183/    15D6 :                     ; Uses:
(1)  184/    15D6 :                     ; a0-a2,d0-d1
(1)  185/    15D6 :                     ; --------------------------------------------------------
(1)  186/    15D6 :                     
(1)  187/    15D6 :                     System_Init:
(1)  188/    15D6 : 007C 0700           		or.w	#$0700,sr
(1)  190/    15DA : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
             15E0 : 1100             
(1)  191/    15E2 :                     .wait:
(1)  192/    15E2 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
             15E8 : 1100             
(1)  193/    15EA : 66F6                		bne.s	.wait
(1)  194/    15EC : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  195/    15EE : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  196/    15F4 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  197/    15FA : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  198/    1600 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
             1606 : 1100             
(1)  200/    1608 : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode for the Interrupt jumps
(1)  201/    160C : 31C0 E980            		move.w	d0,(RAM_VBlankJump).w
(1)  202/    1610 : 31C0 E986           		move.w	d0,(RAM_HBlankJump).w
(1)  203/    1614 : 31C0 E98C           		move.w	d0,(RAM_ExternalJump).w
(1)  204/    1618 : 203C 0000 195E      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  205/    161E : 223C 0000 1960      		move.l	#HInt_Default,d1
(1)  206/    1624 : 243C 0000 1962      		move.l	#ExtInt_Default,d2
(1)  207/    162A : 6100 0552           		bsr	System_SetIntJumps
(1)  208/    162E : 41F8 D8F8           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  209/    1632 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  210/    1636 : 7000                		moveq	#0,d0
(1)  211/    1638 :                     .clrinput:
(1)  212/    1638 : 30C0                		move.w	d0,(a0)+
(1)  213/    163A : 51C9 FFFC           		dbf	d1,.clrinput
(1)  214/    163E : 027C F8FF           		andi.w	#$F8FF,sr
(1)  215/    1642 : 4E75                		rts
(1)  216/    1644 :                     
(1)  217/    1644 :                     ; ====================================================================
(1)  218/    1644 :                     ; --------------------------------------------------------
(1)  219/    1644 :                     ; System_Render
(1)  220/    1644 :                     ;
(1)  221/    1644 :                     ; This will:
(1)  222/    1644 :                     ; - Drop a frame if we got late on VBlank
(1)  223/    1644 :                     ; - Process Palette fading buffers
(1)  224/    1644 :                     ;   (Video_MdMars_RunFade, CPU-INTENSIVE IF PROCESSING
(1)  225/    1644 :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  226/    1644 :                     ; - Check the sound driver for any changes/requests
(1)  227/    1644 :                     ;   from Z80 (Sound_Update, several times)
(1)  228/    1644 :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  229/    1644 :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  230/    1644 :                     ;
(1)  231/    1644 :                     ; During VBlank:
(1)  232/    1644 :                     ; - Read the Input data, (System_Input)
(1)  233/    1644 :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  234/    1644 :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  235/    1644 :                     ;   (Video_Render)
(1)  236/    1644 :                     ;
(1)  237/    1644 :                     ; Notes:
(1)  238/    1644 :                     ; - If VDP Display is disabled all of this
(1)  239/    1644 :                     ;   will be skipped.
(1)  240/    1644 :                     ; --------------------------------------------------------
(1)  241/    1644 :                     
(1)  242/    1644 :                     System_Render:
(1)  243/    1644 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  244/    1648 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  245/    164C : 671A                		beq	.forgot_disp
(1)  246/    164E : 6100 F8CC           		bsr	Video_RunFade			; Process VDP palette fade
(1)  247/    1652 :                     .wait_early:
(1)  248/    1652 : 616C                		bsr	Sound_Update			; Update sound on wait
(1)  249/    1654 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  250/    165A : 0807 0003           		btst	#bitVBlk,d7
(1)  251/    165E : 66F2                		bne.s	.wait_early
(1)  252/    1660 :                     	; ----------------------------------------
(1)  253/    1660 :                     	; 32X/CD32X
(1)  286/    1660 :                     ; ----------------------------------------
(1)  287/    1660 : 6108                		bsr	.wait_vblank			; <-- Genesis normal VBlank wait
(1)  288/    1662 :                     ; ----------------------------------------
(1)  294/    1662 :                     .from_late:
(1)  302/    1662 : 52B8 D7DC           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  303/    1666 : 6158                		bsr	Sound_Update
(1)  304/    1668 :                     .forgot_disp:
(1)  305/    1668 : 4E75                		rts
(1)  306/    166A :                     ; ----------------------------------------
(1)  307/    166A :                     ; Wait until beam reaches VBlank
(1)  308/    166A :                     ; ----------------------------------------
(1)  309/    166A :                     
(1)  310/    166A : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  311/    166C : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  312/    1672 : 0807 0003           		btst	#bitVBlk,d7
(1)  313/    1676 : 67F2                		beq.s	.wait_vblank
(1)  314/    1678 : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  315/    167A : 6000 EF90           		bra	Video_Render			; Render VDP Visuals
(1)  316/    167E :                     
(1)  317/    167E :                     ; ====================================================================
(1)  318/    167E :                     ; --------------------------------------------------------
(1)  319/    167E :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  320/    167E :                     ; from ROM or RAM
(1)  321/    167E :                     ;
(1)  322/    167E :                     ; Call these labels BEFORE and AFTER your
(1)  323/    167E :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  324/    167E :                     ; FILL or COPY.
(1)  325/    167E :                     ;
(1)  326/    167E :                     ; This is where you put your Sound driver's Z80 stop
(1)  327/    167E :                     ; or pause calls here, SAVE THE REGISTERS THAT YOU
(1)  328/    167E :                     ; GONNA USE TO STACK.
(1)  329/    167E :                     ; --------------------------------------------------------
(1)  330/    167E :                     
(1)  331/    167E :                     ; --------------------------------------------------------
(1)  332/    167E :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  333/    167E :                     System_DmaEnter_ROM:
(1)  334/    167E : 6138                		bsr	System_DmaEnter_RAM
(1)  342/    1680 : 4E75                		rts
(1)  343/    1682 :                     
(1)  344/    1682 :                     System_DmaExit_ROM:
(1)  352/    1682 : 6038                		bra	System_DmaExit_RAM
(1)  353/    1684 :                     
(1)  354/    1684 :                     ; ------------------------------------------------
(1)  355/    1684 :                     
(1)  356/    1684 :                     sys_MarsSlvCmd:
(1)  357/    1684 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  358/    168A : 66F8                		bne.s	sys_MarsSlvCmd
(1)  359/    168C : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  360/    1692 : 8E06                		or.b	d6,d7
(1)  361/    1694 : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  362/    1698 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  363/    169E : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
             16A4 : 5103             
(1)  364/    16A6 : 4E71                		nop
(1)  365/    16A8 : 4E71                		nop
(1)  366/    16AA :                     .wait_exit:
(1)  367/    16AA : 4E71                		nop
(1)  368/    16AC : 4E71                		nop
(1)  369/    16AE : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  370/    16B4 : 66F4                		bne.s	.wait_exit
(1)  371/    16B6 : 4E75                		rts
(1)  372/    16B8 :                     
(1)  373/    16B8 :                     ; --------------------------------------------------------
(1)  374/    16B8 :                     ; *** EXTERNAL JUMPS ***
(1)  375/    16B8 :                     ; --------------------------------------------------------
(1)  376/    16B8 :                     
(1)  377/    16B8 :                     System_DmaEnter_RAM:
(1)  378/    16B8 : 6000 ED56           		bra	gemaDmaPause
(1)  379/    16BC :                     System_DmaExit_RAM:
(1)  380/    16BC : 6000 ED70           		bra	gemaDmaResume
(1)  381/    16C0 :                     
(1)  382/    16C0 :                     ; ====================================================================
(1)  383/    16C0 :                     ; --------------------------------------------------------
(1)  384/    16C0 :                     ; Update sound/sycronize with the Z80
(1)  385/    16C0 :                     ; --------------------------------------------------------
(1)  386/    16C0 :                     
(1)  387/    16C0 :                     Sound_Update:
(1)  388/    16C0 : 6000 EC62           		bra	gemaUpdate
(1)  389/    16C4 :                     
(1)  390/    16C4 :                     ; ====================================================================
(1)  391/    16C4 :                     ; --------------------------------------------------------
(1)  392/    16C4 :                     ; Init sound driver
(1)  393/    16C4 :                     ; --------------------------------------------------------
(1)  394/    16C4 :                     
(1)  395/    16C4 :                     Sound_Init:
(1)  396/    16C4 : 6000 EBD8           		bra	gemaInit
(1)  397/    16C8 :                     
(1)  398/    16C8 :                     ; ====================================================================
(1)  399/    16C8 :                     ; --------------------------------------------------------
(1)  400/    16C8 :                     ; System_Input
(1)  401/    16C8 :                     ;
(1)  402/    16C8 :                     ; Reads data from the Controller ports
(1)  403/    16C8 :                     ;
(1)  404/    16C8 :                     ; Call this during VBlank only once per frame,
(1)  405/    16C8 :                     ; System_Render already calls this.
(1)  406/    16C8 :                     ;
(1)  407/    16C8 :                     ; Uses:
(1)  408/    16C8 :                     ; d5-d7,a5-a6
(1)  409/    16C8 :                     ; --------------------------------------------------------
(1)  410/    16C8 :                     
(1)  411/    16C8 :                     ; ----------------------------------------
(1)  412/    16C8 :                     ; PICO input is hard-coded to
(1)  413/    16C8 :                     ; Controller_1
(1)  414/    16C8 :                     ;
(1)  415/    16C8 :                     ; on_hold/on_press:
(1)  416/    16C8 :                     ; %P00BRLDU
(1)  417/    16C8 :                     ; UDLR - Arrows
(1)  418/    16C8 :                     ;    B - BIG button red (JoyB)
(1)  419/    16C8 :                     ;    P - Pen press/click (JoyStart)
(1)  420/    16C8 :                     ;
(1)  421/    16C8 :                     ; mouse_x/mouse_y:
(1)  422/    16C8 :                     ; Pen X/Y position
(1)  423/    16C8 :                     ; ----------------------------------------
(1)  424/    16C8 :                     
(1)  425/    16C8 :                     System_Input:
(1)  472/    16C8 :                     
(1)  473/    16C8 :                     	; ----------------------------------------
(1)  474/    16C8 :                     	; Normal Genesis controls
(1)  475/    16C8 : 4DF8 D8F8           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  476/    16CC : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  477/    16D2 : 6108                		bsr.s	.this_one
(1)  478/    16D4 : DAFC 0002           		adda	#2,a5
(1)  479/    16D8 : DCFC 0010           		adda	#sizeof_input,a6
(1)  480/    16DC :                     
(1)  481/    16DC :                     ; ----------------------------------------
(1)  482/    16DC :                     ; Read port
(1)  483/    16DC :                     ;
(1)  484/    16DC :                     ; a5 - Current port
(1)  485/    16DC :                     ; a6 - Output data
(1)  486/    16DC :                     ; ----------------------------------------
(1)  487/    16DC :                     
(1)  488/    16DC :                     .this_one:
(1)  489/    16DC : 611C                		bsr	.pick_id
(1)  490/    16DE : 1C87                		move.b	d7,pad_id(a6)
(1)  491/    16E0 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  492/    16E4 : 670E                		beq.s	.exit
(1)  493/    16E6 : 0247 000F           		andi.w	#$0F,d7
(1)  494/    16EA : DE47                		add.w	d7,d7
(1)  495/    16EC : 3C3B 703C           		move.w	.list(pc,d7.w),d6
(1)  496/    16F0 : 4EFB 6038           		jmp	.list(pc,d6.w)
(1)  497/    16F4 :                     .exit:
(1)  498/    16F4 : 422E 0001           		clr.b	pad_ver(a6)
(1)  499/    16F8 : 4E75                		rts
(1)  500/    16FA :                     
(1)  501/    16FA :                     ; ----------------------------------------
(1)  502/    16FA :                     ; Grab ID
(1)  503/    16FA :                     ; ----------------------------------------
(1)  504/    16FA :                     
(1)  505/    16FA :                     .pick_id:
(1)  506/    16FA : 7E00                		moveq	#0,d7
(1)  507/    16FC : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  508/    1700 : 4E71                		nop
(1)  509/    1702 : 4E71                		nop
(1)  510/    1704 : 610A                		bsr	.read
(1)  511/    1706 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  512/    170A : 4E71                		nop
(1)  513/    170C : 4E71                		nop
(1)  514/    170E : DE47                		add.w	d7,d7
(1)  515/    1710 :                     .read:
(1)  516/    1710 : 1A15                		move.b	(a5),d5
(1)  517/    1712 : 1C05                		move.b	d5,d6
(1)  518/    1714 : 0206 000C           		andi.b	#%1100,d6
(1)  519/    1718 : 6702                		beq.s	.step_1
(1)  520/    171A : 5247                		addq.w	#1,d7
(1)  521/    171C :                     .step_1:
(1)  522/    171C : DE47                		add.w	d7,d7
(1)  523/    171E : 1C05                		move.b	d5,d6
(1)  524/    1720 : 0246 0003           		andi.w	#%0011,d6
(1)  525/    1724 : 6702                		beq.s	.step_2
(1)  526/    1726 : 5247                		addq.w	#1,d7
(1)  527/    1728 :                     .step_2:
(1)  528/    1728 : 4E75                		rts
(1)  529/    172A :                     
(1)  530/    172A :                     ; ----------------------------------------
(1)  531/    172A :                     ; Grab ID
(1)  532/    172A :                     ; ----------------------------------------
(1)  533/    172A :                     
(1)  534/    172A :                     .list:
(1)  535/    172A : FFCA                		dc.w .exit-.list	; $00
(1)  536/    172C : FFCA                		dc.w .exit-.list
(1)  537/    172E : FFCA                		dc.w .exit-.list
(1)  538/    1730 : 0020                		dc.w .id_03-.list	; $03 - Mega Mouse
(1)  539/    1732 : FFCA                		dc.w .exit-.list	; $04
(1)  540/    1734 : FFCA                		dc.w .exit-.list
(1)  541/    1736 : FFCA                		dc.w .exit-.list
(1)  542/    1738 : FFCA                		dc.w .exit-.list
(1)  543/    173A : FFCA                		dc.w .exit-.list	; $08
(1)  544/    173C : FFCA                		dc.w .exit-.list
(1)  545/    173E : FFCA                		dc.w .exit-.list
(1)  546/    1740 : FFCA                		dc.w .exit-.list
(1)  547/    1742 : FFCA                		dc.w .exit-.list	; $0C
(1)  548/    1744 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  549/    1746 : FFCA                		dc.w .exit-.list
(1)  550/    1748 : FFCA                		dc.w .exit-.list	; $0F - No controller / Master System controller (Buttons 1 and 2)
(1)  551/    174A :                     
(1)  552/    174A :                     ; ----------------------------------------
(1)  553/    174A :                     ; ID $03
(1)  554/    174A :                     ;
(1)  555/    174A :                     ; Mega Mouse
(1)  556/    174A :                     ; ----------------------------------------
(1)  557/    174A :                     
(1)  558/    174A :                     ; *** NOT TESTED ON HARDWARE ***
(1)  559/    174A :                     ; *** NO RELEASED BITS ***
(1)  560/    174A :                     
(1)  561/    174A :                     .id_03:
(1)  562/    174A : 1ABC 0020           		move.b	#$20,(a5)
(1)  563/    174E : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  564/    1754 : 0815 0004           		btst	#4,(a5)
(1)  565/    1758 : 6700 0094           		beq.w	.invalid
(1)  566/    175C : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  567/    1760 : 4E71                		nop
(1)  568/    1762 : 4E71                		nop
(1)  569/    1764 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  570/    1768 : 4E71                		nop
(1)  571/    176A : 4E71                		nop
(1)  572/    176C : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  573/    1770 : 4E71                		nop
(1)  574/    1772 : 4E71                		nop
(1)  575/    1774 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  576/    1776 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  577/    177A : 4E71                		nop
(1)  578/    177C : 4E71                		nop
(1)  579/    177E : 1E15                		move.b	(a5),d7
(1)  580/    1780 : 0247 000F            		andi.w	#%1111,d7
(1)  581/    1784 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  582/    1788 : BF46                		eor.w	d7,d6
(1)  583/    178A : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  584/    178E : CC47                		and.w	d7,d6
(1)  585/    1790 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  586/    1794 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  587/    1798 : 4E71                		nop
(1)  588/    179A : 4E71                		nop
(1)  589/    179C : 1E15                		move.b	(a5),d7
(1)  590/    179E : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  591/    17A2 : 0247 000F           		andi.w	#%1111,d7
(1)  592/    17A6 : E94F                		lsl.w	#4,d7
(1)  593/    17A8 : 4E71                		nop
(1)  594/    17AA : 1C15                		move.b	(a5),d6
(1)  595/    17AC : 0246 000F           		andi.w	#%1111,d6
(1)  596/    17B0 : 8E46                		or.w	d6,d7
(1)  597/    17B2 : 0805 0000           		btst    #0,d5
(1)  598/    17B6 : 6704                		beq.s	.x_neg
(1)  599/    17B8 : 4407                		neg.b	d7
(1)  600/    17BA : 4447                		neg.w	d7
(1)  601/    17BC :                     .x_neg:
(1)  602/    17BC : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  603/    17C0 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  604/    17C4 : 4E71                		nop
(1)  605/    17C6 : 4E71                		nop
(1)  606/    17C8 : 1E15                		move.b	(a5),d7
(1)  607/    17CA : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  608/    17CE : 0247 000F           		andi.w	#%1111,d7
(1)  609/    17D2 : E94F                		lsl.w	#4,d7
(1)  610/    17D4 : 4E71                		nop
(1)  611/    17D6 : 1C15                		move.b	(a5),d6
(1)  612/    17D8 : 0246 000F           		andi.w	#%1111,d6
(1)  613/    17DC : 8E46                		or.w	d6,d7
(1)  614/    17DE : 0805 0001           		btst    #1,d5
(1)  615/    17E2 : 6704                		beq.s	.y_neg
(1)  616/    17E4 : 4407                		neg.b	d7
(1)  617/    17E6 : 4447                		neg.w	d7
(1)  618/    17E8 :                     .y_neg:
(1)  619/    17E8 : 4447                		neg.w	d7		; Reverse Y
(1)  620/    17EA : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  621/    17EE :                     
(1)  622/    17EE :                     .invalid:
(1)  623/    17EE : 1ABC 0060           		move.b	#$60,(a5)
(1)  624/    17F2 : 4E75                		rts
(1)  625/    17F4 :                     
(1)  626/    17F4 :                     ; ----------------------------------------
(1)  627/    17F4 :                     ; ID $0D
(1)  628/    17F4 :                     ;
(1)  629/    17F4 :                     ; Normal controller: 3 button or 6 button.
(1)  630/    17F4 :                     ; ----------------------------------------
(1)  631/    17F4 :                     
(1)  632/    17F4 :                     .id_0D:
(1)  633/    17F4 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  634/    17F8 : 4E71                		nop
(1)  635/    17FA : 4E71                		nop
(1)  636/    17FC : 1A15                		move.b	(a5),d5
(1)  637/    17FE : 0245 003F           		andi.w	#%00111111,d5
(1)  638/    1802 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  639/    1806 : 4E71                		nop
(1)  640/    1808 : 4E71                		nop
(1)  641/    180A : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  642/    180C : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  643/    180E : 0247 00C0           		andi.w	#%11000000,d7
(1)  644/    1812 : 8E45                		or.w	d5,d7
(1)  645/    1814 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  646/    1818 : 4647                		not.w	d7
(1)  647/    181A : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  648/    181E : 1805                		move.b	d5,d4
(1)  649/    1820 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  650/    1824 : BF05                		eor.b	d7,d5
(1)  651/    1826 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  652/    182A : CA07                		and.b	d7,d5
(1)  653/    182C : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  654/    1830 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  655/    1834 : 1A07                		move.b	d7,d5
(1)  656/    1836 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  657/    1838 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  658/    183C : B905                		eor.b	d4,d5
(1)  659/    183E : CA04                		and.b	d4,d5
(1)  660/    1840 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  661/    1842 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  662/    1846 : 1D45 0007           		move.b	d5,on_release+1(a6)
(1)  663/    184A : 0246 000F           		andi.w	#$F,d6
(1)  664/    184E : E44E                		lsr.w	#2,d6
(1)  665/    1850 : 0246 0001           		andi.w	#1,d6
(1)  666/    1854 : 6724                		beq.s	.oldpad
(1)  667/    1856 : 4607                		not.b	d7
(1)  668/    1858 : 0247 000F            		andi.w	#%1111,d7
(1)  669/    185C : 1C07                 		move.b	d7,d6
(1)  670/    185E : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  671/    1862 : BB06                		eor.b	d5,d6
(1)  672/    1864 : CC05                		and.b	d5,d6
(1)  673/    1866 : 1D46 0006           		move.b	d6,on_release(a6)
(1)  674/    186A : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  675/    186E : BF05                		eor.b	d7,d5
(1)  676/    1870 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  677/    1874 : CA07                		and.b	d7,d5
(1)  678/    1876 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  679/    187A :                     .oldpad:
(1)  680/    187A : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  681/    187E : 4E75                		rts
(1)  683/    1880 :                     
(1)  684/    1880 :                     ; ============================================================
(1)  685/    1880 :                     ; --------------------------------------------------------
(1)  686/    1880 :                     ; System_SramInit
(1)  687/    1880 :                     ;
(1)  688/    1880 :                     ; Enable SRAM/BRAM support
(1)  689/    1880 :                     ;
(1)  690/    1880 :                     ; Input:
(1)  691/    1880 :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  692/    1880 :                     ;      dc.b "SAVE_NAME__",0
(1)  693/    1880 :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  694/    1880 :                     ;                            ; protection)
(1)  695/    1880 :                     ;      dc.w flags:
(1)  696/    1880 :                     ;            0 | Normal
(1)  697/    1880 :                     ;           -1 | Save protection
(1)  698/    1880 :                     ;
(1)  699/    1880 :                     ;
(1)  700/    1880 :                     ; Notes:
(1)  701/    1880 :                     ; - ONLY use the RAM_SaveData section to modify
(1)  702/    1880 :                     ;   your changes, then call System_SramSave to
(1)  703/    1880 :                     ;   save it into SRAM/BRAM.
(1)  704/    1880 :                     ;
(1)  705/    1880 :                     ; CD/CD32X ONLY:
(1)  706/    1880 :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  707/    1880 :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  708/    1880 :                     ;   OVERWRITE without warning any other save.
(1)  709/    1880 :                     ; - Call gemaStopAll FIRST if any track uses
(1)  710/    1880 :                     ;   PCM samples
(1)  711/    1880 :                     ; --------------------------------------------------------
(1)  712/    1880 :                     
(1)  713/    1880 :                     System_SramInit:
(1)  760/    1880 :                     
(1)  761/    1880 :                     	; ------------------------------------------------
(1)  762/    1880 :                     	; Cartridge SRAM
(1)  763/    1880 :                     	; ------------------------------------------------
(1)  764/    1880 : 4A78 E992           		tst.w	(RAM_SaveEnable).w
(1)  765/    1884 : 6634                		bne.s	.cant_use
(1)  766/    1886 : 31FC 0001 E992      		move.w	#1,(RAM_SaveEnable).w
(1)  767/    188C :                     	; Make SAVE template
(1)  768/    188C : 616E                		bsr	System_SramLoad
(1)  769/    188E : 0CB8 5341 5645      		cmpi.l	#TAG_SRAMDATA,(RAM_SaveData).w
             1894 : D7F8             
(1)  770/    1896 : 6722                		beq.s	.cant_use
(1)  771/    1898 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  772/    189C : 4DF8 D7F8           		lea	(RAM_SaveData).w,a6
(1)  773/    18A0 : 7C00                		moveq	#0,d6
(1)  774/    18A2 : 3E3C 00FF           		move.w	#SET_SRAMSIZE-1,d7
(1)  775/    18A6 :                     .clr_sram:
(1)  776/    18A6 : 1CC6                		move.b	d6,(a6)+
(1)  777/    18A8 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  778/    18AC : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  779/    18B0 : 21FC 5341 5645      		move.l	#TAG_SRAMDATA,(RAM_SaveData).w		; Write SAVE signature
             18B6 : D7F8             
(1)  780/    18B8 : 6104                		bsr	System_SramSave
(1)  782/    18BA :                     .cant_use:
(1)  783/    18BA : 6040                		bra	System_SramLoad
(1)  784/    18BC :                     .already_set:
(1)  785/    18BC : 4E75                		rts
(1)  786/    18BE :                     
(1)  787/    18BE :                     ; --------------------------------------------------------
(1)  788/    18BE :                     ; System_SramSave
(1)  789/    18BE :                     ;
(1)  790/    18BE :                     ; Returns:
(1)  791/    18BE :                     ; bcc | Save OK
(1)  792/    18BE :                     ; bcs | Save failed
(1)  793/    18BE :                     ; --------------------------------------------------------
(1)  794/    18BE :                     
(1)  795/    18BE :                     System_SramSave:
(1)  833/    18BE :                     
(1)  834/    18BE :                     	; ------------------------------------------------
(1)  835/    18BE :                     	; Cartridge SRAM
(1)  836/    18BE :                     	; ------------------------------------------------
(1)  837/    18BE : 4A78 E992           		tst.w	(RAM_SaveEnable).w
(1)  838/    18C2 : 6736                		beq.s	.cant_use_c
(1)  839/    18C4 : 40E7                		move.w	sr,-(sp)
(1)  840/    18C6 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  844/    18CA : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
             18D0 : 30F1             
(1)  845/    18D2 : 4DF8 D7F8           		lea	(RAM_SaveData).w,a6
(1)  846/    18D6 : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  847/    18DC : 3E3C 00FE           		move.w	#((SET_SRAMSIZE-1))-1,d7
(1)  848/    18E0 : 1C1E                .save:		move.b	(a6)+,d6
(1)  849/    18E2 : 1A86                		move.b	d6,(a5)
(1)  850/    18E4 : DAFC 0002           		adda	#2,a5
(1)  851/    18E8 : 51CF FFF6           		dbf	d7,.save
(1)  852/    18EC : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
             18F2 : 30F1             
(1)  856/    18F4 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  857/    18F8 : 46DF                		move.w	(sp)+,sr
(1)  858/    18FA :                     .cant_use_c:
(1)  859/    18FA :                     	; ------------------------------------------------
(1)  861/    18FA : 4E75                		rts
(1)  862/    18FC :                     
(1)  863/    18FC :                     ; --------------------------------------------------------
(1)  864/    18FC :                     ; System_SramLoad
(1)  865/    18FC :                     ;
(1)  866/    18FC :                     ; Returns:
(1)  867/    18FC :                     ; bcc | Save OK
(1)  868/    18FC :                     ; bcs | Save not found
(1)  869/    18FC :                     ; --------------------------------------------------------
(1)  870/    18FC :                     
(1)  871/    18FC :                     System_SramLoad:
(1)  903/    18FC :                     
(1)  904/    18FC :                     	; ------------------------------------------------
(1)  905/    18FC :                     	; Cartridge SRAM
(1)  906/    18FC :                     	; ------------------------------------------------
(1)  907/    18FC : 4A78 E992           		tst.w	(RAM_SaveEnable).w
(1)  908/    1900 : 673A                		beq.s	.cant_use_c
(1)  909/    1902 : 40E7                		move.w	sr,-(sp)
(1)  910/    1904 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  911/    1908 : 007C 0700           		ori.w	#$0700,sr
(1)  915/    190C : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
             1912 : 30F1             
(1)  916/    1914 : 4DF8 D7F8           		lea	(RAM_SaveData).w,a6
(1)  917/    1918 : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  918/    191E : 3E3C 00FE           		move.w	#((SET_SRAMSIZE-1))-1,d7
(1)  919/    1922 :                     .load:
(1)  920/    1922 : 1C15                		move.b	(a5),d6
(1)  921/    1924 : 1CC6                		move.b	d6,(a6)+
(1)  922/    1926 : DAFC 0002           		adda	#2,a5
(1)  923/    192A : 51CF FFF6           		dbf	d7,.load
(1)  924/    192E :                     .dont_reset:
(1)  925/    192E : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
             1934 : 30F1             
(1)  929/    1936 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  930/    193A : 46DF                		move.w	(sp)+,sr
(1)  931/    193C :                     .cant_use_c:
(1)  932/    193C :                     	; ------------------------------------------------
(1)  934/    193C : 4E75                		rts
(1)  935/    193E :                     
(1)  936/    193E :                     ; ============================================================
(1)  937/    193E :                     ; --------------------------------------------------------
(1)  938/    193E :                     ; System_Default
(1)  939/    193E :                     ;
(1)  940/    193E :                     ; Initializes current screen mode
(1)  941/    193E :                     ;
(1)  942/    193E :                     ; Uses:
(1)  943/    193E :                     ; ALL
(1)  944/    193E :                     ; --------------------------------------------------------
(1)  945/    193E :                     
(1)  946/    193E :                     System_Default:
(1)  947/    193E : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  948/    1942 : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  949/    1946 : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  950/    194A : 7C00                		moveq	#0,d6
(1)  951/    194C :                     .clr_loop:
(1)  952/    194C : 1CC6                		move.b	d6,(a6)+
(1)  953/    194E : 51CF FFFC           		dbf	d7,.clr_loop
(1)  954/    1952 : 6100 EFB6           		bsr	Video_Clear
(1)  955/    1956 : 6100 EC66           		bsr	Video_Default
(1)  956/    195A : 6000 02E6           		bra	Object_Init			; Reset all objects
(1)  957/    195E :                     
(1)  958/    195E :                     ; ====================================================================
(1)  959/    195E :                     ; ----------------------------------------------------------------
(1)  960/    195E :                     ; Default interrupts
(1)  961/    195E :                     ; ----------------------------------------------------------------
(1)  962/    195E :                     
(1)  963/    195E :                     ; --------------------------------------------------------
(1)  964/    195E :                     ; VBlank
(1)  965/    195E :                     ; --------------------------------------------------------
(1)  966/    195E :                     
(1)  967/    195E :                     VInt_Default:
(1)  968/    195E :                     ; 		movem.l	d0-a6,-(sp)
(1)  969/    195E :                     ; 		bsr	System_Input
(1)  970/    195E :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1)  971/    195E :                     ; 		movem.l	(sp)+,d0-a6
(1)  972/    195E : 4E73                		rte
(1)  973/    1960 :                     
(1)  974/    1960 :                     ; --------------------------------------------------------
(1)  975/    1960 :                     ; HBlank
(1)  976/    1960 :                     ; --------------------------------------------------------
(1)  977/    1960 :                     
(1)  978/    1960 :                     HInt_Default:
(1)  979/    1960 : 4E73                		rte
(1)  980/    1962 :                     
(1)  981/    1962 :                     ; --------------------------------------------------------
(1)  982/    1962 :                     ; External interrupt
(1)  983/    1962 :                     ; --------------------------------------------------------
(1)  984/    1962 :                     
(1)  985/    1962 :                     ExtInt_Default:
(1)  986/    1962 : 4E73                		rte
(1)  987/    1964 :                     
(1)  988/    1964 :                     ; ====================================================================
(1)  989/    1964 :                     ; ------------------------------------------------------------
(1)  990/    1964 :                     ; Subroutines
(1)  991/    1964 :                     ; ------------------------------------------------------------
(1)  992/    1964 :                     
(1)  993/    1964 :                     ; --------------------------------------------------------
(1)  994/    1964 :                     ; System_Random, System_Random_Seed
(1)  995/    1964 :                     ;
(1)  996/    1964 :                     ; Generate random value
(1)  997/    1964 :                     ;
(1)  998/    1964 :                     ; Input:
(1)  999/    1964 :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1000/    1964 :                     ;
(1) 1001/    1964 :                     ; Returns:
(1) 1002/    1964 :                     ; d0.l | Result value
(1) 1003/    1964 :                     ; --------------------------------------------------------
(1) 1004/    1964 :                     
(1) 1005/    1964 :                     System_Random_Seed:
(1) 1006/    1964 : 2F04                		move.l	d4,-(sp)
(1) 1007/    1966 : 2800                		move.l	d0,d4
(1) 1008/    1968 : 6114                		bsr	sysRnd_MkValue
(1) 1009/    196A : 281F                		move.l	(sp)+,d4
(1) 1010/    196C : 4E75                		rts
(1) 1011/    196E :                     System_Random:
(1) 1012/    196E : 2F04                		move.l	d4,-(sp)
(1) 1013/    1970 : 2838 E97C           		move.l	(RAM_SysRandom).w,d4
(1) 1014/    1974 : 6108                		bsr	sysRnd_MkValue
(1) 1015/    1976 : 21C4 E97C           		move.l	d4,(RAM_SysRandom).w
(1) 1016/    197A : 281F                		move.l	(sp)+,d4
(1) 1017/    197C : 4E75                		rts
(1) 1018/    197E :                     sysRnd_MkValue:
(1) 1019/    197E : 4A84                		tst.l	d4
(1) 1020/    1980 : 660E                		bne.s	.has_seed
(1) 1021/    1982 : 2838 D7DC           		move.l	(RAM_FrameCount).w,d4
(1) 1022/    1986 : E1BC                		rol.l	d0,d4
(1) 1023/    1988 : E2BC                		ror.l	d1,d4
(1) 1024/    198A : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1025/    1990 :                     .has_seed:
(1) 1026/    1990 : 2004                		move.l	d4,d0
(1) 1027/    1992 : E484                		asr.l	#2,d4
(1) 1028/    1994 : D880                		add.l	d0,d4
(1) 1029/    1996 : E79C                		rol.l	#3,d4
(1) 1030/    1998 : D880                		add.l	d0,d4
(1) 1031/    199A : 3004                		move.w	d4,d0
(1) 1032/    199C : 4844                		swap	d4
(1) 1033/    199E : D044                		add.w	d4,d0
(1) 1034/    19A0 : 3800                		move.w	d0,d4
(1) 1035/    19A2 : E0BC                		ror.l	d0,d4
(1) 1036/    19A4 : 4844                		swap	d4
(1) 1037/    19A6 : 4E75                		rts
(1) 1038/    19A8 :                     
(1) 1039/    19A8 :                     ; --------------------------------------------------------
(1) 1040/    19A8 :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1041/    19A8 :                     ;
(1) 1042/    19A8 :                     ; Pick a random number using a maximum value,
(1) 1043/    19A8 :                     ; uses System_Random
(1) 1044/    19A8 :                     ;
(1) 1045/    19A8 :                     ; Input:
(1) 1046/    19A8 :                     ; d0.l | Maximum number to use + 1
(1) 1047/    19A8 :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1048/    19A8 :                     ;
(1) 1049/    19A8 :                     ; Returns:
(1) 1050/    19A8 :                     ; d0.w | Output value
(1) 1051/    19A8 :                     ; --------------------------------------------------------
(1) 1052/    19A8 :                     
(1) 1053/    19A8 :                     System_DiceRoll_Seed:
(1) 1054/    19A8 : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1055/    19AC : 2A00                		move.l	d0,d5
(1) 1056/    19AE : 2801                		move.l	d1,d4
(1) 1057/    19B0 : 61B2                		bsr	System_Random_Seed
(1) 1058/    19B2 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1059/    19B8 : C0C5                		mulu.w	d5,d0
(1) 1060/    19BA : 4840                		swap	d0
(1) 1061/    19BC : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1062/    19C2 : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1063/    19C6 : 4E75                		rts
(1) 1064/    19C8 :                     
(1) 1065/    19C8 :                     System_DiceRoll:
(1) 1066/    19C8 : 2F04                		move.l	d4,-(sp)
(1) 1067/    19CA : 2800                		move.l	d0,d4
(1) 1068/    19CC : 61A0                		bsr	System_Random
(1) 1069/    19CE : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1070/    19D4 : C0C4                		mulu.w	d4,d0
(1) 1071/    19D6 : 4840                		swap	d0
(1) 1072/    19D8 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1073/    19DE : 281F                		move.l	(sp)+,d4
(1) 1074/    19E0 : 4E75                		rts
(1) 1075/    19E2 :                     
(1) 1076/    19E2 :                     ; --------------------------------------------------------
(1) 1077/    19E2 :                     ; System_SineWave, System_SineWave_Cos
(1) 1078/    19E2 :                     ;
(1) 1079/    19E2 :                     ; Get Sine or Cosine value
(1) 1080/    19E2 :                     ;
(1) 1081/    19E2 :                     ; Input:
(1) 1082/    19E2 :                     ; d0.w | Tan value: 0-511
(1) 1083/    19E2 :                     ;
(1) 1084/    19E2 :                     ; Returns:
(1) 1085/    19E2 :                     ; d1.w | Result
(1) 1086/    19E2 :                     ; --------------------------------------------------------
(1) 1087/    19E2 :                     
(1) 1088/    19E2 :                     System_SineWave_Cos:
(1) 1089/    19E2 : 2F07                		move.l	d7,-(sp)
(1) 1090/    19E4 : 3E00                		move.w	d0,d7
(1) 1091/    19E6 : 0647 0080           		addi.w  #$80,d7
(1) 1092/    19EA : 6004                		bra	sys_SineWave
(1) 1093/    19EC :                     System_SineWave:
(1) 1094/    19EC : 2F07                		move.l	d7,-(sp)
(1) 1095/    19EE : 3E00                		move.w	d0,d7
(1) 1096/    19F0 :                     sys_SineWave:
(1) 1097/    19F0 : 0247 01FF           		andi.w	#$1FF,d7
(1) 1098/    19F4 : 3207                		move.w	d7,d1
(1) 1099/    19F6 : 0807 0007           		btst	#7,d7
(1) 1100/    19FA : 6702                		beq.s	.loc_7EFA
(1) 1101/    19FC : 4641                		not.w	d1
(1) 1102/    19FE :                     .loc_7EFA:
(1) 1103/    19FE : 0241 007F           		andi.w  #$7F,d1
(1) 1104/    1A02 : D241                		add.w	d1,d1
(1) 1105/    1A04 : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1106/    1A08 : 0807 0008           		btst    #8,d7
(1) 1107/    1A0C : 6702                		beq.s   .loc_7F0C
(1) 1108/    1A0E : 4441                		neg.w   d1
(1) 1109/    1A10 :                     .loc_7F0C:
(1) 1110/    1A10 : 48C1                		ext.l	d1
(1) 1111/    1A12 : 2E1F                		move.l (sp)+,d7
(1) 1112/    1A14 : 4E75                		rts
(1) 1113/    1A16 :                     
(1) 1114/    1A16 :                     .sine_data:
(1) 1115/    1A16 :                     		binclude "system/md/data/sine_data.bin"
(1) 1116/    1B16 :                     		align 2
(1) 1117/    1B16 :                     
(1) 1118/    1B16 :                     ; --------------------------------------------------------
(1) 1119/    1B16 :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1120/    1B16 :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1121/    1B16 :                     ;
(1) 1122/    1B16 :                     ; Increment/Decrement BCD value
(1) 1123/    1B16 :                     ; for Scores, Lives, and such.
(1) 1124/    1B16 :                     ;
(1) 1125/    1B16 :                     ; Input:
(1) 1126/    1B16 :                     ; d0.? | BCD value input
(1) 1127/    1B16 :                     ; d1.l | Increment/Decrement by
(1) 1128/    1B16 :                     ;
(1) 1129/    1B16 :                     ; Returns:
(1) 1130/    1B16 :                     ; d0.? | BCD value output
(1) 1131/    1B16 :                     ; --------------------------------------------------------
(1) 1132/    1B16 :                     
(1) 1133/    1B16 :                     ; TODO: An overflow check
(1) 1134/    1B16 :                     
(1) 1135/    1B16 :                     System_BCD_SubB:
(1) 1136/    1B16 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1137/    1B1C : 6006                		bra.s	System_BCD_SubL
(1) 1138/    1B1E :                     System_BCD_SubW:
(1) 1139/    1B1E : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1140/    1B24 :                     ; 		bra.s	System_BCD_SubL
(1) 1141/    1B24 :                     System_BCD_SubL:
(1) 1142/    1B24 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1143/    1B28 : 613C                		bsr	sysBCD_SpOut
(1) 1144/    1B2A : 023C 0000           		and	#0,ccr
(1) 1145/    1B2E : 8D0D                		sbcd	-(a5),-(a6)
(1) 1146/    1B30 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1147/    1B32 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1148/    1B34 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1149/    1B36 : 2016                		move.l	(a6),d0
(1) 1150/    1B38 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1151/    1B3C : 4E75                		rts
(1) 1152/    1B3E :                     System_BCD_AddB:
(1) 1153/    1B3E : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1154/    1B44 : 6006                		bra.s	System_BCD_AddL
(1) 1155/    1B46 :                     System_BCD_AddW:
(1) 1156/    1B46 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1157/    1B4C :                     ; 		bsr.s	System_BCD_AddL
(1) 1158/    1B4C :                     System_BCD_AddL:
(1) 1159/    1B4C : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1160/    1B50 : 6114                		bsr	sysBCD_SpOut
(1) 1161/    1B52 : 023C 0000           		and	#0,ccr
(1) 1162/    1B56 : CD0D                		abcd	-(a5),-(a6)
(1) 1163/    1B58 : CD0D                		abcd	-(a5),-(a6)
(1) 1164/    1B5A : CD0D                		abcd	-(a5),-(a6)
(1) 1165/    1B5C : CD0D                		abcd	-(a5),-(a6)
(1) 1166/    1B5E : 2016                		move.l	(a6),d0
(1) 1167/    1B60 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1168/    1B64 : 4E75                		rts
(1) 1169/    1B66 :                     sysBCD_SpOut:
(1) 1170/    1B66 : 598F                		subq.l	#4,sp
(1) 1171/    1B68 : 2C4F                		move.l	sp,a6
(1) 1172/    1B6A : 598F                		subq.l	#4,sp
(1) 1173/    1B6C : 2A4F                		move.l	sp,a5
(1) 1174/    1B6E : 2C80                		move.l	d0,(a6)
(1) 1175/    1B70 : 2A81                		move.l	d1,(a5)
(1) 1176/    1B72 : DCFC 0004           		adda	#4,a6
(1) 1177/    1B76 : DAFC 0004           		adda	#4,a5
(1) 1178/    1B7A : 508F                		addq.l	#8,sp
(1) 1179/    1B7C : 4E75                		rts
(1) 1180/    1B7E :                     
(1) 1181/    1B7E :                     ; --------------------------------------------------------
(1) 1182/    1B7E :                     ; System_SetIntJumps
(1) 1183/    1B7E :                     ;
(1) 1184/    1B7E :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1185/    1B7E :                     ; generated by VDP
(1) 1186/    1B7E :                     ;
(1) 1187/    1B7E :                     ; Input:
(1) 1188/    1B7E :                     ; d0.l | New VBlank location
(1) 1189/    1B7E :                     ; d1.l | New HBlank location
(1) 1190/    1B7E :                     ; d2.l | New External location
(1) 1191/    1B7E :                     ;
(1) 1192/    1B7E :                     ; Notes:
(1) 1193/    1B7E :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1194/    1B7E :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1195/    1B7E :                     ; --------------------------------------------------------
(1) 1196/    1B7E :                     
(1) 1197/    1B7E :                     System_SetIntJumps:
(1) 1198/    1B7E : 4A80                		tst.l	d0
(1) 1199/    1B80 : 6704                		beq.s	.no_vint
(1) 1203/    1B82 : 21C0 E982            		move.l	d0,(RAM_VBlankJump+2).w
(1) 1205/    1B86 :                     .no_vint:
(1) 1206/    1B86 : 4A81                		tst.l	d1
(1) 1207/    1B88 : 6704                		beq.s	.no_hint
(1) 1211/    1B8A : 21C1 E988            		move.l	d1,(RAM_HBlankJump+2).w
(1) 1213/    1B8E :                     .no_hint:
(1) 1214/    1B8E : 4A82                		tst.l	d2
(1) 1215/    1B90 : 6704                		beq.s	.no_exint
(1) 1219/    1B92 : 21C2 E98E            		move.l	d2,(RAM_ExternalJump+2).w
(1) 1221/    1B96 :                     .no_exint:
(1) 1222/    1B96 : 4E75                		rts
(1) 1223/    1B98 :                     
(1) 1224/    1B98 :                     ; ====================================================================
(1) 1225/    1B98 :                     ; ----------------------------------------------------------------
(1) 1226/    1B98 :                     ; SEGA CD / CD32X ONLY
(1) 1227/    1B98 :                     ; ----------------------------------------------------------------
(1) 1228/    1B98 :                     
(1) 1229/    1B98 :                     ; --------------------------------------------------------
(1) 1230/    1B98 :                     ; System_MdMcd_Interrupt
(1) 1231/    1B98 :                     ;
(1) 1232/    1B98 :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1233/    1B98 :                     ; VBlank.
(1) 1234/    1B98 :                     ; --------------------------------------------------------
(1) 1235/    1B98 :                     
(1) 1236/    1B98 :                     System_MdMcd_Interrupt:
(1) 1237/    1B98 : 2F07                		move.l	d7,-(sp)
(1) 1238/    1B9A :                     ; .wait_first:
(1) 1239/    1B9A :                     ; 		bsr	System_MdMcd_SubWait
(1) 1240/    1B9A :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1241/    1B9A :                     ; 		andi.w	#$C0,d7
(1) 1242/    1B9A :                     ; 		cmpi.w	#$C0,d7
(1) 1243/    1B9A :                     ; 		beq.s	.wait_first
(1) 1244/    1B9A :                     ; 		bset	#0,(sysmcd_reg).l		; Request Level 1
(1) 1245/    1B9A : 13FC 0081 00A1      		move.b	#$81,(sysmcd_reg).l
             1BA0 : 2000             
(1) 1246/    1BA2 : 2E1F                		move.l	(sp)+,d7
(1) 1247/    1BA4 : 4E75                		rts
(1) 1248/    1BA6 :                     
(1) 1249/    1BA6 :                     ; --------------------------------------------------------
(1) 1250/    1BA6 :                     ; System_MdMcd_SubWait
(1) 1251/    1BA6 :                     ;
(1) 1252/    1BA6 :                     ; Waits until Sub-CPU finishes.
(1) 1253/    1BA6 :                     ;
(1) 1254/    1BA6 :                     ; Uses:
(1) 1255/    1BA6 :                     ; d7
(1) 1256/    1BA6 :                     ; --------------------------------------------------------
(1) 1257/    1BA6 :                     
(1) 1258/    1BA6 :                     System_MdMcd_SubWait:
(1) 1263/    1BA6 : 4E75                		rts
(1) 1264/    1BA8 :                     
(1) 1265/    1BA8 :                     ; --------------------------------------------------------
(1) 1266/    1BA8 :                     ; System_MdMcd_SubEnter
(1) 1267/    1BA8 :                     ;
(1) 1268/    1BA8 :                     ; Waits until Sub-CPU starts.
(1) 1269/    1BA8 :                     ;
(1) 1270/    1BA8 :                     ; Uses:
(1) 1271/    1BA8 :                     ; d7
(1) 1272/    1BA8 :                     ; --------------------------------------------------------
(1) 1273/    1BA8 :                     
(1) 1274/    1BA8 :                     System_MdMcd_SubEnter:
(1) 1279/    1BA8 : 4E75                		rts
(1) 1280/    1BAA :                     
(1) 1281/    1BAA :                     ; --------------------------------------------------------
(1) 1282/    1BAA :                     ; System_MdMcd_SubTask
(1) 1283/    1BAA :                     ;
(1) 1284/    1BAA :                     ; Request task to Sub-CPU
(1) 1285/    1BAA :                     ;
(1) 1286/    1BAA :                     ; Input:
(1) 1287/    1BAA :                     ; d0.b | Task number
(1) 1288/    1BAA :                     ;
(1) 1289/    1BAA :                     ; Uses:
(1) 1290/    1BAA :                     ; d7/a6
(1) 1291/    1BAA :                     ;
(1) 1292/    1BAA :                     ; Notes:
(1) 1293/    1BAA :                     ; This exits without waiting SUB to finish,
(1) 1294/    1BAA :                     ; call System_MdMcd_SubWait after this if required.
(1) 1295/    1BAA :                     ; --------------------------------------------------------
(1) 1296/    1BAA :                     
(1) 1297/    1BAA :                     System_MdMcd_SubTask:
(1) 1322/    1BAA : 4E75                		rts
(1) 1323/    1BAC :                     
(1) 1324/    1BAC :                     ; --------------------------------------------------------
(1) 1325/    1BAC :                     ; System_MdMcd_WaitWRAM
(1) 1326/    1BAC :                     ;
(1) 1327/    1BAC :                     ; Wait for Word-RAM permission.
(1) 1328/    1BAC :                     ; --------------------------------------------------------
(1) 1329/    1BAC :                     
(1) 1330/    1BAC :                     System_MdMcd_WaitWRAM:
(1) 1331/    1BAC : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             1BB2 : 2003             
(1) 1332/    1BB4 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1333/    1BB6 : 4E75                		rts
(1) 1334/    1BB8 :                     
(1) 1335/    1BB8 :                     ; --------------------------------------------------------
(1) 1336/    1BB8 :                     ; System_MdMcd_CheckWRAM
(1) 1337/    1BB8 :                     ;
(1) 1338/    1BB8 :                     ; Checks if Word-RAM is set to MAIN in return
(1) 1339/    1BB8 :                     ;
(1) 1340/    1BB8 :                     ; Returns:
(1) 1341/    1BB8 :                     ; beq | Word-RAM is available
(1) 1342/    1BB8 :                     ; bne | Word-RAM is locked
(1) 1343/    1BB8 :                     ; --------------------------------------------------------
(1) 1344/    1BB8 :                     
(1) 1345/    1BB8 :                     System_MdMcd_CheckWRAM:
(1) 1346/    1BB8 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             1BBE : 2003             
(1) 1347/    1BC0 : 6706                		beq.s	.no_ret
(1) 1348/    1BC2 : 003C 0004           		or	#%00100,ccr	; beq
(1) 1349/    1BC6 : 4E75                		rts
(1) 1350/    1BC8 :                     .no_ret:
(1) 1351/    1BC8 : 023C 001B           		and	#%11011,ccr	; bne
(1) 1352/    1BCC : 4E75                		rts
(1) 1353/    1BCE :                     
(1) 1354/    1BCE :                     ; --------------------------------------------------------
(1) 1355/    1BCE :                     ; System_MdMcd_GiveWRAM
(1) 1356/    1BCE :                     ;
(1) 1357/    1BCE :                     ; Give Word-RAM to SubCPU (DMNA)
(1) 1358/    1BCE :                     ; --------------------------------------------------------
(1) 1359/    1BCE :                     
(1) 1360/    1BCE :                     System_MdMcd_GiveWRAM:
(1) 1361/    1BCE : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
             1BD4 : 2003             
(1) 1362/    1BD6 : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1363/    1BD8 : 4E75                		rts
(1) 1364/    1BDA :                     
(1) 1365/    1BDA :                     ; --------------------------------------------------------
(1) 1366/    1BDA :                     ; System_MdMcd_ReadFileRAM
(1) 1367/    1BDA :                     ;
(1) 1368/    1BDA :                     ; Read file from disc and transfer output the
(1) 1369/    1BDA :                     ; data to a1, uses communication ports.
(1) 1370/    1BDA :                     ;
(1) 1371/    1BDA :                     ; Input:
(1) 1372/    1BDA :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1373/    1BDA :                     ; a1   | Output location in RAM
(1) 1374/    1BDA :                     ; d0.w | Size, $10-aligned sizes only
(1) 1375/    1BDA :                     ;
(1) 1376/    1BDA :                     ; Uses:
(1) 1377/    1BDA :                     ; d7,a0-a1,a5-a6
(1) 1378/    1BDA :                     ;
(1) 1379/    1BDA :                     ; Notes:
(1) 1380/    1BDA :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1381/    1BDA :                     ; --------------------------------------------------------
(1) 1382/    1BDA :                     
(1) 1383/    1BDA :                     System_MdMcd_RdFile_RAM:
(1) 1433/    1BDA : 4E75                		rts
(1) 1434/    1BDC :                     
(1) 1435/    1BDC :                     ; --------------------------------------------------------
(1) 1436/    1BDC :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1437/    1BDC :                     ;
(1) 1438/    1BDC :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1439/    1BDC :                     ; waits on finish.
(1) 1440/    1BDC :                     ;
(1) 1441/    1BDC :                     ; Input:
(1) 1442/    1BDC :                     ; a0   | Filename string "FILENAME.BIN",0
(1) 1443/    1BDC :                     ; a1   | Output location
(1) 1444/    1BDC :                     ;
(1) 1445/    1BDC :                     ; Notes:
(1) 1446/    1BDC :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1447/    1BDC :                     ; --------------------------------------------------------
(1) 1448/    1BDC :                     
(1) 1449/    1BDC :                     System_MdMcd_RdFile_WRAM:
(1) 1473/    1BDC : 4E75                		rts
(1) 1474/    1BDE :                     
(1) 1475/    1BDE :                     ; --------------------------------------------------------
(1) 1476/    1BDE :                     ; System_MdMcd_CheckHome
(1) 1477/    1BDE :                     ;
(1) 1478/    1BDE :                     ; Checks if the player is holding A, B, C and
(1) 1479/    1BDE :                     ; then presses the START button.
(1) 1480/    1BDE :                     ;
(1) 1481/    1BDE :                     ; Returns:
(1) 1482/    1BDE :                     ; bcc | Combo input not pressed
(1) 1483/    1BDE :                     ; bcs | User did the combo presses
(1) 1484/    1BDE :                     ;
(1) 1485/    1BDE :                     ; Notes:
(1) 1486/    1BDE :                     ; If you call this from your Title Screen, carry
(1) 1487/    1BDE :                     ; should JUMP (not call) to System_MdMcd_ExitShell,
(1) 1488/    1BDE :                     ; for other modes change your Screen number to the
(1) 1489/    1BDE :                     ; Title Screen and return.
(1) 1490/    1BDE :                     ; --------------------------------------------------------
(1) 1491/    1BDE :                     
(1) 1492/    1BDE :                     System_MdMcd_CheckHome:
(1) 1493/    1BDE : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1494/    1BE2 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(1) 1495/    1BE6 : 3C38 D8FA           		move.w	(Controller_1+on_hold).w,d6
(1) 1496/    1BEA : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1497/    1BEE : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1498/    1BF2 : 6610                		bne.s	.not_press
(1) 1499/    1BF4 : 0247 0080           		andi.w	#JoyStart,d7
(1) 1500/    1BF8 : 670A                		beq.s	.not_press
(1) 1501/    1BFA : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1502/    1BFE : 003C 0001           		or	#1,ccr
(1) 1503/    1C02 : 4E75                		rts
(1) 1504/    1C04 :                     .not_press:
(1) 1505/    1C04 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1506/    1C08 : 023C 001E           		and	#%11110,ccr
(1) 1507/    1C0C : 4E75                		rts
(1) 1508/    1C0E :                     
(1) 1509/    1C0E :                     ; --------------------------------------------------------
(1) 1510/    1C0E :                     ; System_MdMcd_ExitShell
(1) 1511/    1C0E :                     ;
(1) 1512/    1C0E :                     ; Exits the entire program and goes to
(1) 1513/    1C0E :                     ; the BIOS/Shell.
(1) 1514/    1C0E :                     ;
(1) 1515/    1C0E :                     ; *** JUMP ONLY ***
(1) 1516/    1C0E :                     ; --------------------------------------------------------
(1) 1517/    1C0E :                     
(1) 1518/    1C0E :                     ; jmp $0280: Hot restart, Stops PSG and Clears VDP
(1) 1519/    1C0E :                     ; jmp $0284: Entry point
(1) 1520/    1C0E :                     ; jmp $0288: CD player
(1) 1521/    1C0E :                     ; jmp $028C: CD player, resets SP (safer)
(1) 1522/    1C0E :                     
(1) 1523/    1C0E :                     System_MdMcd_ExitShell:
(1) 1532/    1C0E : 4E75                		rts
(1) 1534/    1C10 :                     
(1) 1535/    1C10 :                     ; ------------------------------------------------------------
(1) 1536/    1C10 :                     ; CDDA PLAYBACK
(1) 1537/    1C10 :                     ; ------------------------------------------------------------
(1) 1538/    1C10 :                     
(1) 1539/    1C10 :                     ; --------------------------------------------------------
(1) 1540/    1C10 :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1541/    1C10 :                     ;
(1) 1542/    1C10 :                     ; Play CDDA track, normal or looped.
(1) 1543/    1C10 :                     ;
(1) 1544/    1C10 :                     ; Input:
(1) 1545/    1C10 :                     ; d0.w | CD track number
(1) 1546/    1C10 :                     ;
(1) 1547/    1C10 :                     ; This calls Sub-Task $10 for normal playback
(1) 1548/    1C10 :                     ; and $11 for looped
(1) 1549/    1C10 :                     ;
(1) 1550/    1C10 :                     ; Uses:
(1) 1551/    1C10 :                     ; d4
(1) 1552/    1C10 :                     ;
(1) 1553/    1C10 :                     ; Notes:
(1) 1554/    1C10 :                     ; Tracks $00, $01 and any negative values are
(1) 1555/    1C10 :                     ; ignored.
(1) 1556/    1C10 :                     ; --------------------------------------------------------
(1) 1557/    1C10 :                     
(1) 1558/    1C10 :                     System_MdMcd_CddaPlay:
(1) 1559/    1C10 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1560/    1C14 : 383C 0010           		move.w	#$0010,d4
(1) 1561/    1C18 : 6008                		bra	sysMdMcd_SetCdda
(1) 1562/    1C1A :                     System_MdMcd_CddaPlayL:
(1) 1563/    1C1A : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1564/    1C1E : 383C 0011           		move.w	#$0011,d4
(1) 1565/    1C22 :                     sysMdMcd_SetCdda:
(1) 1577/    1C22 : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1578/    1C26 : 4E75                		rts
(1) 1579/    1C28 :                     
(1) 1580/    1C28 :                     ; --------------------------------------------------------
(1) 1581/    1C28 :                     ; System_MdMcd_CdStop
(1) 1582/    1C28 :                     ;
(1) 1583/    1C28 :                     ; Stop CDDA track
(1) 1584/    1C28 :                     ; --------------------------------------------------------
(1) 1585/    1C28 :                     
(1) 1586/    1C28 :                     System_MdMcd_CddaStop:
(1) 1593/    1C28 : 4E75                		rts
(1) 1594/    1C2A :                     
(1) 1595/    1C2A :                     ; --------------------------------------------------------
(1) 1596/    1C2A :                     ; System_MdMcd_CdFade
(1) 1597/    1C2A :                     ;
(1) 1598/    1C2A :                     ; Fade the CDDA Volume
(1) 1599/    1C2A :                     ;
(1) 1600/    1C2A :                     ; Input:
(1) 1601/    1C2A :                     ; d0.w | Target volume:
(1) 1602/    1C2A :                     ;        $000-$400 - Min to Max
(1) 1603/    1C2A :                     ; d1.w | Fading speed:
(1) 1604/    1C2A :                     ;        $001-$200 - Slow to Fast
(1) 1605/    1C2A :                     ;             $400 - Set quick
(1) 1606/    1C2A :                     ;
(1) 1607/    1C2A :                     ; This calls Sub-Task $16
(1) 1608/    1C2A :                     ; --------------------------------------------------------
(1) 1609/    1C2A :                     
(1) 1610/    1C2A :                     System_MdMcd_CddaFade:
(1) 1619/    1C2A : 4E75                		rts
(1) 1620/    1C2C :                     
(1) 1621/    1C2C :                     ; --------------------------------------------------------
(1) 1622/    1C2C :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1623/    1C2C :                     ; --------------------------------------------------------
(1) 1624/    1C2C :                     
(1) 1625/    1C2C :                     def_SaveInfo:
(1) 1629/    1C2C : 4E49 4B4F 4E41      		dc.b HTAG_CDSAVE,0
             1C32 : 4344 5F5F 5F00    
(1) 1631/    1C38 : 0004                		dc.w (SET_SRAMSIZE/$40)
(1) 1632/    1C3A : 0000                		dc.w 0
(1) 1633/    1C3C :                     		align 2
(1) 1634/    1C3C :                     
(1) 1635/    1C3C :                     ; ====================================================================
(1) 1636/    1C3C :                     ; ----------------------------------------------------------------
(1) 1637/    1C3C :                     ; 32X and CD32X ONLY
(1) 1638/    1C3C :                     ; ----------------------------------------------------------------
(1) 1639/    1C3C :                     
(1) 1640/    1C3C :                     ; --------------------------------------------------------
(1) 1641/    1C3C :                     ; System_MdMars_SendData
(1) 1642/    1C3C :                     ;
(1) 1643/    1C3C :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1644/    1C3C :                     ; using DREQ
(1) 1645/    1C3C :                     ;
(1) 1646/    1C3C :                     ; Input:
(1) 1647/    1C3C :                     ; a0   | Source data
(1) 1648/    1C3C :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1649/    1C3C :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1650/    1C3C :                     ;
(1) 1651/    1C3C :                     ; Returns:
(1) 1652/    1C3C :                     ; a1   | New output SDRAM location
(1) 1653/    1C3C :                     ;
(1) 1654/    1C3C :                     ; Uses:
(1) 1655/    1C3C :                     ; d0/a4-a5,d5-d7
(1) 1656/    1C3C :                     ;
(1) 1657/    1C3C :                     ; Notes:
(1) 1658/    1C3C :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1659/    1C3C :                     ; - POPULAR 32X EMULATORS WILL GET STUCK HERE
(1) 1660/    1C3C :                     ; --------------------------------------------------------
(1) 1661/    1C3C :                     
(1) 1662/    1C3C :                     System_MdMars_SendData:
(1) 1687/    1C3C : 4E75                		rts
(1) 1688/    1C3E :                     
(1) 1689/    1C3E :                     ; ------------------------------------------------------------
(1) 1690/    1C3E :                     ; DREQ Genesis-to-32X code
(1) 1691/    1C3E :                     ; ------------------------------------------------------------
(1) 1692/    1C3E :                     
(1) 1763/    1C3E : 4E75                		rts
(1) 1764/    1C40 :                     
(1) 1765/    1C40 :                     ; ====================================================================
(1) 1766/    1C40 :                     ; ----------------------------------------------------------------
(1) 1767/    1C40 :                     ; SHARED for all
(1) 1768/    1C40 :                     ; ----------------------------------------------------------------
(1) 1769/    1C40 :                     
(1) 1770/    1C40 :                     ; --------------------------------------------------------
(1) 1771/    1C40 :                     ; System_SetDataBank
(1) 1772/    1C40 :                     ;
(1) 1773/    1C40 :                     ; Sets the data bank depending of the system
(1) 1774/    1C40 :                     ;
(1) 1775/    1C40 :                     ; Input:
(1) 1776/    1C40 :                     ; a0   | Pointer and filename:
(1) 1777/    1C40 :                     ;        dc.l bank_pointer
(1) 1778/    1C40 :                     ;        dc.b "FILENAME.BIN"
(1) 1779/    1C40 :                     ;
(1) 1780/    1C40 :                     ; Uses:
(1) 1781/    1C40 :                     ; a4-a5,d5-d7
(1) 1782/    1C40 :                     ;
(1) 1783/    1C40 :                     ; Notes:
(1) 1784/    1C40 :                     ; - ONLY call this if you have the opportunity to
(1) 1785/    1C40 :                     ;   do it.
(1) 1786/    1C40 :                     ; - SEGA CD / CD32X: This sets the WORD-RAM
(1) 1787/    1C40 :                     ;   to load from disc
(1) 1788/    1C40 :                     ;   * DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1789/    1C40 :                     ;   Call Video_Mcd_StampDisable If neeeded. *
(1) 1790/    1C40 :                     ; --------------------------------------------------------
(1) 1791/    1C40 :                     
(1) 1792/    1C40 :                     System_SetDataBank:
(1) 1809/    1C40 : 4E75                		rts
(1) 1810/    1C42 :                     
(1) 1811/    1C42 :                     ; ====================================================================
(1) 1812/    1C42 :                     ; ----------------------------------------------------------------
(1) 1813/    1C42 :                     ; Objects system
(1) 1814/    1C42 :                     ; ----------------------------------------------------------------
(1) 1815/    1C42 :                     
(1) 1816/    1C42 :                     ; --------------------------------------------------------
(1) 1817/    1C42 :                     ; Init/Clear Objects system
(1) 1818/    1C42 :                     ; --------------------------------------------------------
(1) 1819/    1C42 :                     
(1) 1820/    1C42 :                     Object_Init:
(1) 1821/    1C42 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1822/    1C46 : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1823/    1C4A :                     .clr:
(1) 1824/    1C4A : 421E                		clr.b	(a6)+
(1) 1825/    1C4C : 51CF FFFC           		dbf	d7,.clr
(1) 1826/    1C50 : 4E75                		rts
(1) 1827/    1C52 :                     
(1) 1828/    1C52 :                     ; --------------------------------------------------------
(1) 1829/    1C52 :                     ; Process objects
(1) 1830/    1C52 :                     ;
(1) 1831/    1C52 :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1832/    1C52 :                     ; --------------------------------------------------------
(1) 1833/    1C52 :                     
(1) 1834/    1C52 :                     Object_Run:
(1) 1835/    1C52 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1836/    1C56 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1837/    1C5A :                     .next_one:
(1) 1838/    1C5A : 2C16                		move.l	obj_code(a6),d6
(1) 1839/    1C5C : 6708                		beq.s	.no_code	; Free slot
(1) 1840/    1C5E : 2F07                		move.l	d7,-(sp)
(1) 1841/    1C60 : 2A46                		move.l	d6,a5
(1) 1842/    1C62 : 4E95                		jsr	(a5)
(1) 1843/    1C64 : 2E1F                		move.l	(sp)+,d7
(1) 1844/    1C66 :                     .no_code:
(1) 1845/    1C66 : DCFC 0068           		adda	#obj_len,a6
(1) 1846/    1C6A : 51CF FFEE           		dbf	d7,.next_one
(1) 1847/    1C6E : 4E75                		rts
(1) 1848/    1C70 :                     
(1) 1849/    1C70 :                     ; --------------------------------------------------------
(1) 1850/    1C70 :                     ; Object_Set, Object_Make
(1) 1851/    1C70 :                     ;
(1) 1852/    1C70 :                     ; Set a new object into a specific slot.
(1) 1853/    1C70 :                     ;
(1) 1854/    1C70 :                     ; Input:
(1) 1855/    1C70 :                     ; d0.l | Object code pointer
(1) 1856/    1C70 :                     ;        If 0: DELETE the object including it's memory
(1) 1857/    1C70 :                     ; d1.w | Object slot
(1) 1858/    1C70 :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1859/    1C70 :                     ; d2.b | Object sub-type (obj_subid)
(1) 1860/    1C70 :                     ;
(1) 1861/    1C70 :                     ; Returns:
(1) 1862/    1C70 :                     ; bcc | Found free slot
(1) 1863/    1C70 :                     ; bcs | Ran-out of object slots
(1) 1864/    1C70 :                     ;
(1) 1865/    1C70 :                     ; Notes:
(1) 1866/    1C70 :                     ; If you are not using obj_subid you can ignore it,
(1) 1867/    1C70 :                     ; but it will contain the remains of d2 when you
(1) 1868/    1C70 :                     ; called this.
(1) 1869/    1C70 :                     ; --------------------------------------------------------
(1) 1870/    1C70 :                     
(1) 1871/    1C70 :                     Object_Set:
(1) 1872/    1C70 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1873/    1C74 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1874/    1C78 : 7E00                		moveq	#0,d7
(1) 1875/    1C7A : 3E01                		move.w	d1,d7
(1) 1876/    1C7C : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1877/    1C80 : DCC7                		adda	d7,a6
(1) 1878/    1C82 : 602C                		bra.s	objSet_Go
(1) 1879/    1C84 :                     
(1) 1880/    1C84 :                     Object_Make:
(1) 1881/    1C84 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1882/    1C88 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1883/    1C8C : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1884/    1C90 : 7C00                		moveq	#0,d6
(1) 1885/    1C92 :                     .search:
(1) 1886/    1C92 : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1887/    1C96 : 6C0E                		bge.s	objSet_Error
(1) 1888/    1C98 : 4A96                		tst.l	obj_code(a6)
(1) 1889/    1C9A : 6714                		beq.s	objSet_Go
(1) 1890/    1C9C : DCFC 0068           		adda	#obj_len,a6
(1) 1891/    1CA0 : 5246                		addq.w	#1,d6
(1) 1892/    1CA2 : 51CF FFEE           		dbf	d7,.search
(1) 1893/    1CA6 :                     objSet_Error:
(1) 1894/    1CA6 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1895/    1CAA : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1896/    1CAE : 4E75                		rts
(1) 1897/    1CB0 :                     
(1) 1898/    1CB0 :                     objSet_Go:
(1) 1899/    1CB0 : 4A80                		tst.l	d0
(1) 1900/    1CB2 : 670A                		beq.s	.from_del
(1) 1901/    1CB4 : 2E00                		move.l	d0,d7
(1) 1902/    1CB6 : 2C87                		move.l	d7,obj_code(a6)
(1) 1903/    1CB8 : 1D42 001D           		move.b	d2,obj_subid(a6)
(1) 1904/    1CBC : 600C                		bra.s	.exit_this
(1) 1905/    1CBE :                     .from_del:
(1) 1906/    1CBE : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1907/    1CC0 : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1908/    1CC4 : 421D                .clr:		clr.b	(a5)+
(1) 1909/    1CC6 : 51CF FFFC           		dbf	d7,.clr
(1) 1910/    1CCA :                     .exit_this:
(1) 1911/    1CCA : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1912/    1CCE : 003C 0001           		or	#1,ccr
(1) 1913/    1CD2 : 4E75                		rts
(1) 1914/    1CD4 :                     
(1) 1915/    1CD4 :                     ; ====================================================================
(1) 1916/    1CD4 :                     ; --------------------------------------------------------
(1) 1917/    1CD4 :                     ; Object subroutines
(1) 1918/    1CD4 :                     ;
(1) 1919/    1CD4 :                     ; These can ONLY be called on the current object's code
(1) 1920/    1CD4 :                     ; --------------------------------------------------------
(1) 1921/    1CD4 :                     
(1) 1922/    1CD4 :                     ; --------------------------------------------------------
(1) 1923/    1CD4 :                     ; object_ResetVars
(1) 1924/    1CD4 :                     ;
(1) 1925/    1CD4 :                     ; Resets the current object's memory, call this
(1) 1926/    1CD4 :                     ; at very beginning of your object's init code
(1) 1927/    1CD4 :                     ;
(1) 1928/    1CD4 :                     ; Input:
(1) 1929/    1CD4 :                     ; a6 | This object
(1) 1930/    1CD4 :                     ; --------------------------------------------------------
(1) 1931/    1CD4 :                     
(1) 1932/    1CD4 :                     object_ResetVars:
(1) 1933/    1CD4 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1934/    1CD8 : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1935/    1CDC : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1936/    1CE0 : 7E00                		moveq	#0,d7
(1) 1937/    1CE2 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1938/    1CE4 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1939/    1CE8 : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1940/    1CEC : 4E75                		rts
(1) 1941/    1CEE :                     
(1) 1942/    1CEE :                     ; --------------------------------------------------------
(1) 1943/    1CEE :                     ; object_ResetAnim
(1) 1944/    1CEE :                     ;
(1) 1945/    1CEE :                     ; Reset animation variables, call this BEFORE using
(1) 1946/    1CEE :                     ; object_Animate.
(1) 1947/    1CEE :                     ;
(1) 1948/    1CEE :                     ; Input:
(1) 1949/    1CEE :                     ; a6 | This object
(1) 1950/    1CEE :                     ; --------------------------------------------------------
(1) 1951/    1CEE :                     
(1) 1952/    1CEE :                     object_ResetAnim:
(1) 1953/    1CEE :                     ;  		clr.w	obj_anim_indx(a6)
(1) 1954/    1CEE :                     ;  		clr.b	obj_anim_spd(a6)
(1) 1955/    1CEE : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 1956/    1CF4 : 4E75                		rts
(1) 1957/    1CF6 :                     
(1) 1958/    1CF6 :                     ; --------------------------------------------------------
(1) 1959/    1CF6 :                     ; object_Speed
(1) 1960/    1CF6 :                     ;
(1) 1961/    1CF6 :                     ; Moves the object using speed values set on
(1) 1962/    1CF6 :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y.
(1) 1963/    1CF6 :                     ;
(1) 1964/    1CF6 :                     ; Input:
(1) 1965/    1CF6 :                     ; a6 | This object
(1) 1966/    1CF6 :                     ; --------------------------------------------------------
(1) 1967/    1CF6 :                     
(1) 1968/    1CF6 :                     object_Speed:
(1) 1969/    1CF6 : 2F07                		move.l	d7,-(sp)
(1) 1970/    1CF8 : 7E00                		moveq	#0,d7
(1) 1971/    1CFA : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 1972/    1CFE : 48C7                		ext.l	d7
(1) 1973/    1D00 : E187                		asl.l	#8,d7
(1) 1974/    1D02 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 1975/    1D06 : 7E00                		moveq	#0,d7
(1) 1976/    1D08 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 1977/    1D0C : 48C7                		ext.l	d7
(1) 1978/    1D0E : E187                		asl.l	#8,d7
(1) 1979/    1D10 : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 1980/    1D14 : 7E00                		moveq	#0,d7
(1) 1981/    1D16 : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 1982/    1D1A : 48C7                		ext.l	d7
(1) 1983/    1D1C : E187                		asl.l	#8,d7
(1) 1984/    1D1E : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 1985/    1D22 : 2E1F                		move.l	(sp)+,d7
(1) 1986/    1D24 : 4E75                		rts
(1) 1987/    1D26 :                     
(1) 1988/    1D26 :                     ; --------------------------------------------------------
(1) 1989/    1D26 :                     ; object_Animate
(1) 1990/    1D26 :                     ;
(1) 1991/    1D26 :                     ; Animates the sprite with a animation script,
(1) 1992/    1D26 :                     ; modifies obj_frame with the frame to use.
(1) 1993/    1D26 :                     ;
(1) 1994/    1D26 :                     ; Input:
(1) 1995/    1D26 :                     ; a6 | This object
(1) 1996/    1D26 :                     ; a0 | Animation data
(1) 1997/    1D26 :                     ; --------------------------------------------------------
(1) 1998/    1D26 :                     
(1) 1999/    1D26 :                     ; anim_data:
(1) 2000/    1D26 :                     ; 	dc.w .frame_1-anim_data
(1) 2001/    1D26 :                     ; 	dc.w .frame_2-anim_data
(1) 2002/    1D26 :                     ; 	;...
(1) 2003/    1D26 :                     ;
(1) 2004/    1D26 :                     ; .frame_num:
(1) 2005/    1D26 :                     ; 	dc.w speed			; Animation speed/delay
(1) 2006/    1D26 :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2007/    1D26 :                     ; 	dc.w command			; End-of-data command
(1) 2008/    1D26 :                     ;
(1) 2009/    1D26 :                     ; commands:
(1) 2010/    1D26 :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2011/    1D26 :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2012/    1D26 :                     ; dc.w -3,to_indx	; Jump to index
(1) 2013/    1D26 :                     
(1) 2014/    1D26 :                     object_Animate:
(1) 2015/    1D26 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2016/    1D2A : 7E00                		moveq	#0,d7
(1) 2017/    1D2C : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2018/    1D30 : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2019/    1D34 : 670E                 		beq.s	.sameThing
(1) 2020/    1D36 : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2021/    1D3C : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2022/    1D40 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2023/    1D44 :                     .sameThing:
(1) 2024/    1D44 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2025/    1D48 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2026/    1D4C : 6748                 		beq.s	.return
(1) 2027/    1D4E : DE47                 		add.w	d7,d7
(1) 2028/    1D50 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2029/    1D54 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2030/    1D58 : 3E18                 		move.w	(a0)+,d7
(1) 2031/    1D5A : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2032/    1D5E : 670C                 		beq.s	.keepspd
(1) 2033/    1D60 : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2034/    1D66 : 6A2E                 		bpl.s	.return
(1) 2035/    1D68 : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2036/    1D6C :                     .keepspd:
(1) 2037/    1D6C : 7C00                 		moveq	#0,d6
(1) 2038/    1D6E : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2039/    1D72 : DE47                 		add.w	d7,d7
(1) 2040/    1D74 : 3C10                 		move.w	(a0),d6
(1) 2041/    1D76 : D0C7                 		adda	d7,a0
(1) 2042/    1D78 : 3A10                 		move.w	(a0),d5
(1) 2043/    1D7A : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2044/    1D7E : 6730                 		beq.s	.lastFrame	; finish
(1) 2045/    1D80 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2046/    1D84 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2047/    1D86 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2048/    1D8A : 671A                 		beq.s	.goToFrame
(1) 2049/    1D8C : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2050/    1D90 : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2051/    1D96 :                     .return:
(1) 2052/    1D96 : 601C                 		bra.s	.exit_anim
(1) 2053/    1D98 :                     .noAnim:
(1) 2054/    1D98 : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2055/    1D9E : 3A06                 		move.w	d6,d5
(1) 2056/    1DA0 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2057/    1DA4 : 600E                		bra.s	.exit_anim
(1) 2058/    1DA6 :                     .goToFrame:
(1) 2059/    1DA6 : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2060/    1DAA : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2061/    1DB0 :                     .lastFrame:
(1) 2062/    1DB0 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2063/    1DB4 :                     .exit_anim:
(1) 2064/    1DB4 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2065/    1DB8 : 4E75                		rts
(1) 2066/    1DBA :                     
(1) 2067/    1DBA :                     ; --------------------------------------------------------
(1) 2068/    1DBA :                     ; object_Touch
(1) 2069/    1DBA :                     ;
(1) 2070/    1DBA :                     ; Detects collision with another Object
(1) 2071/    1DBA :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2072/    1DBA :                     ;
(1) 2073/    1DBA :                     ; Input:
(1) 2074/    1DBA :                     ; a6   | This object
(1) 2075/    1DBA :                     ;
(1) 2076/    1DBA :                     ; Returns:
(1) 2077/    1DBA :                     ; d0.l | If Nothing: 0
(1) 2078/    1DBA :                     ;        If Found:   The target's RAM location
(1) 2079/    1DBA :                     ; --------------------------------------------------------
(1) 2080/    1DBA :                     
(1) 2081/    1DBA :                     object_Touch:
(1) 2082/    1DBA : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2083/    1DBE : 7000                		moveq	#0,d0
(1) 2084/    1DC0 : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2085/    1DC4 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2086/    1DC8 : 8C45                		or.w	d5,d6
(1) 2087/    1DCA : 671E                		beq	.exit_this
(1) 2088/    1DCC : 4BF8 D938           		lea	(RAM_Objects).w,a5
(1) 2089/    1DD0 : 7E27                		moveq	#MAX_MDOBJ-1,d7
(1) 2090/    1DD2 :                     .next:
(1) 2091/    1DD2 : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2092/    1DD4 : 670A                		beq.s	.skip
(1) 2093/    1DD6 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2094/    1DD8 : 6706                		beq.s	.skip
(1) 2095/    1DDA : 6114                		bsr.s	.check_this
(1) 2096/    1DDC : 4A40                		tst.w	d0			; Exit if Found.
(1) 2097/    1DDE : 660A                		bne.s	.exit_this
(1) 2098/    1DE0 : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2099/    1DE4 : 51CF FFEC           		dbf	d7,.next
(1) 2100/    1DE8 : 7000                		moveq	#0,d0
(1) 2101/    1DEA :                     .exit_this:
(1) 2102/    1DEA : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2103/    1DEE : 4E75                		rts
(1) 2104/    1DF0 :                     
(1) 2105/    1DF0 :                     ; main check
(1) 2106/    1DF0 :                     .check_this:
(1) 2107/    1DF0 : 7000                		moveq	#0,d0			; Reset Return
(1) 2108/    1DF2 :                     	; d6 - Y current top
(1) 2109/    1DF2 :                     	; d5 - Y current bottom
(1) 2110/    1DF2 :                     	; d4 - Y target top
(1) 2111/    1DF2 :                     	; d3 - Y target bottom
(1) 2112/    1DF2 :                     	; Check X
(1) 2113/    1DF2 : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2114/    1DF6 : 6700 00B4           		beq	.not_ytop
(1) 2115/    1DFA : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2116/    1DFE : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2117/    1E00 : 3401                		move.w	d1,d2
(1) 2118/    1E02 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2119/    1E04 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2120/    1E08 :                     ; 		lsl.w	#3,d1
(1) 2121/    1E08 :                     ; 		lsl.w	#3,d2
(1) 2122/    1E08 : 5342                		subq.w	#1,d2			; X right adjust
(1) 2123/    1E0A : 9C41                		sub.w	d1,d6
(1) 2124/    1E0C : DA42                		add.w	d2,d5
(1) 2125/    1E0E : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2126/    1E12 : 6700 0098           		beq	.not_ytop
(1) 2127/    1E16 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2128/    1E1A : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2129/    1E1C : 3401                		move.w	d1,d2
(1) 2130/    1E1E : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2131/    1E20 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2132/    1E24 :                     ; 		lsl.w	#3,d1
(1) 2133/    1E24 :                     ; 		lsl.w	#3,d2
(1) 2134/    1E24 : 5342                		subq.w	#1,d2
(1) 2135/    1E26 : 9841                		sub.w	d1,d4
(1) 2136/    1E28 : D642                		add.w	d2,d3
(1) 2137/    1E2A : B646                		cmp.w	d6,d3
(1) 2138/    1E2C : 6D7E                		blt	.not_ytop
(1) 2139/    1E2E : B845                		cmp.w	d5,d4
(1) 2140/    1E30 : 6C7A                		bge	.not_ytop
(1) 2141/    1E32 :                     
(1) 2142/    1E32 :                     	; Check Y
(1) 2143/    1E32 : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2144/    1E36 : 6774                		beq	.not_ytop
(1) 2145/    1E38 : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2146/    1E3C : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2147/    1E3E : 3401                		move.w	d1,d2
(1) 2148/    1E40 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2149/    1E42 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2150/    1E46 :                     ; 		lsl.w	#3,d1
(1) 2151/    1E46 :                     ; 		lsl.w	#3,d2
(1) 2152/    1E46 : 5342                		subq.w	#1,d2
(1) 2153/    1E48 : 9C41                		sub.w	d1,d6
(1) 2154/    1E4A : DA42                		add.w	d2,d5
(1) 2155/    1E4C : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2156/    1E50 : 675A                		beq	.not_ytop
(1) 2157/    1E52 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2158/    1E56 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2159/    1E58 : 3401                		move.w	d1,d2
(1) 2160/    1E5A : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2161/    1E5C : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2162/    1E60 :                     ; 		lsl.w	#3,d1
(1) 2163/    1E60 :                     ; 		lsl.w	#3,d2
(1) 2164/    1E60 : 5342                		subq.w	#1,d2
(1) 2165/    1E62 : 9841                		sub.w	d1,d4
(1) 2166/    1E64 : D642                		add.w	d2,d3
(1) 2167/    1E66 : B646                		cmp.w	d6,d3
(1) 2168/    1E68 : 6D42                		blt.s	.not_ytop
(1) 2169/    1E6A : B845                		cmp.w	d5,d4
(1) 2170/    1E6C : 6C3E                		bge.s	.not_ytop
(1) 2171/    1E6E :                     
(1) 2172/    1E6E :                     	; Special Z check
(1) 2173/    1E6E : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2174/    1E72 : 6736                		beq.s	.set_ok
(1) 2175/    1E74 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2176/    1E78 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2177/    1E7A : 3401                		move.w	d1,d2
(1) 2178/    1E7C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2179/    1E7E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2180/    1E82 :                     ; 		lsl.w	#3,d1
(1) 2181/    1E82 :                     ; 		lsl.w	#3,d2
(1) 2182/    1E82 : 5342                		subq.w	#1,d2
(1) 2183/    1E84 : 9C41                		sub.w	d1,d6
(1) 2184/    1E86 : DA42                		add.w	d2,d5
(1) 2185/    1E88 : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2186/    1E8C : 671C                		beq.s	.set_ok
(1) 2187/    1E8E : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2188/    1E92 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2189/    1E94 : 3401                		move.w	d1,d2
(1) 2190/    1E96 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2191/    1E98 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2192/    1E9C :                     ; 		lsl.w	#3,d1
(1) 2193/    1E9C :                     ; 		lsl.w	#3,d2
(1) 2194/    1E9C : 5342                		subq.w	#1,d2
(1) 2195/    1E9E : 9841                		sub.w	d1,d4
(1) 2196/    1EA0 : D642                		add.w	d2,d3
(1) 2197/    1EA2 : B646                		cmp.w	d6,d3
(1) 2198/    1EA4 : 6D06                		blt	.not_ytop
(1) 2199/    1EA6 : B845                		cmp.w	d5,d4
(1) 2200/    1EA8 : 6C02                		bge	.not_ytop
(1) 2201/    1EAA :                     .set_ok:
(1) 2202/    1EAA : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2203/    1EAC :                     .not_ytop:
(1) 2204/    1EAC : 4E75                		rts
(1) 2205/    1EAE :                     
(1) 2206/    1EAE :                     ; ============================================================
(1) 2207/    1EAE :                     ; --------------------------------------------------------
(1) 2208/    1EAE :                     ; object_GetSprInfo
(1) 2209/    1EAE :                     ;
(1) 2210/    1EAE :                     ; Call this before using
(1) 2211/    1EAE :                     ; Video_MdMars_MakeSpr2D or Video_MdMars_MakeSpr3D
(1) 2212/    1EAE :                     ;
(1) 2213/    1EAE :                     ; Input:
(1) 2214/    1EAE :                     ; a6   | This object
(1) 2215/    1EAE :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2216/    1EAE :                     ;        - Set to 0 for 3D Sprites
(1) 2217/    1EAE :                     ; d1.w | Flags
(1) 2218/    1EAE :                     ;
(1) 2219/    1EAE :                     ; Output:
(1) 2220/    1EAE :                     ; d0.l | X and Y position
(1) 2221/    1EAE :                     ; d1.l | Flags and Z Position
(1) 2222/    1EAE :                     ; d4.w | Current frame
(1) 2223/    1EAE :                     ; --------------------------------------------------------
(1) 2224/    1EAE :                     
(1) 2225/    1EAE :                     object_MdMars_GetSprInfo:
(1) 2240/    1EAE : 4E75                		rts
(1) 2241/    1EB0 :                     
     195/    1EB0 :                     
     196/    1EB0 :                     ; --------------------------------------------------------
     197/    1EB0 :                     ; SCREEN MODE MAIN LOOP
     198/    1EB0 :                     ;
     199/    1EB0 :                     ;  MD/Pico: Direct ROM jump
     200/    1EB0 :                     ; CD/CD32X: Reads file from DISC and
     201/    1EB0 :                     ;           transfers code to RAM
     202/    1EB0 :                     ;      32X: Code is stored on ROM but runs in
     203/    1EB0 :                     ;           RAM to prevent bus-conflicts with the
     204/    1EB0 :                     ;           SH2's view of ROM at CS1
     205/    1EB0 :                     ;
     206/    1EB0 :                     ; - Returning in your current screen code loops here
     207/    1EB0 :                     ; - 32X/CD32X:
     208/    1EB0 :                     ;   This will turn OFF the 32X's current video mode
     209/    1EB0 :                     ; --------------------------------------------------------
     210/    1EB0 :                     
     211/    1EB0 :                     Md_ReadModes:
     212/    1EB0 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     220/    1EB4 : 7000                		moveq	#0,d0
     221/    1EB6 : 3038 E994           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     222/    1EBA : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     223/    1EBE : E948                		lsl.w	#4,d0				; number*$10
     224/    1EC0 : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0		; Read list
     225/    1EC4 :                     	; SCD/CD32X
     245/    1EC4 : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0		; a0 - ROM location
     246/    1EC8 : 4E90                		jsr	(a0)
     248/    1ECA : 60E4                		bra.s	Md_ReadModes			; Loop on rts
     249/    1ECC :                     
     250/    1ECC :                     ; ====================================================================
     251/    1ECC :                     ; ---------------------------------------------
     252/    1ECC :                     ; ADD YOUR SCREEN MODE JUMPS GO HERE
     253/    1ECC :                     ; ---------------------------------------------
     254/    1ECC :                     
     255/    1ECC :                     .pick_mode:
     256/    1ECC :                     		include "game/screens.asm"
(1)    1/    1ECC :                     ; ============================================================
(1)    2/    1ECC :                     ; --------------------------------------------------------
(1)    3/    1ECC :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/    1ECC :                     ;
(1)    5/    1ECC :                     ; - Screen CODE includes: incl_code.asm
(1)    6/    1ECC :                     ;
(1)    7/    1ECC :                     ; - DATA Bank includes: incl_data.asm
(1)    8/    1ECC :                     ;
(1)    9/    1ECC :                     ; ** For CD/CD32X **
(1)   10/    1ECC :                     ;    Add your ISO file entries for both
(1)   11/    1ECC :                     ;    CODE and DATA in iso_files.asm
(1)   12/    1ECC :                     ; --------------------------------------------------------
(1)   13/    1ECC :                     
(1)   14/    1ECC :                     ; Entry:
(1)   15/    1ECC : 0000 3E64           		dc.l Md_Screen00	; ****
(1)   16/    1ED0 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1ED6 : 3030 2E42 494E    
(1)   17/    1EDC :                     
     257/    1EDC :                     
     258/    1EDC :                     ; ====================================================================
     259/    1EDC :                     
     266/    1EDC :                     
     267/    1EDC :                     Md_SysCode_e:
     268/    1EDC :                     		align 2
     269/    1EDC :                     
     270/    1EDC :                     ; ===========================================================================
     271/    1EDC :                     ; ----------------------------------------------------------------
     272/    1EDC :                     ; DATA section shared on both Cartridge or Disc
     273/    1EDC :                     ; ----------------------------------------------------------------
     274/    1EDC :                     
     275/    1EDC :                     ; --------------------------------------------------------
     276/    1EDC :                     ; CD/CD32X ISO header and files
     277/    1EDC :                     ; --------------------------------------------------------
     278/    1EDC :                     
     294/    1EDC :                     
     295/    1EDC :                     ; ===========================================================================
     296/    1EDC :                     ; --------------------------------------------------------
     297/    1EDC :                     ; Z80 driver include
     298/    1EDC :                     ;
     299/    1EDC :                     ; SCD/CD32X: Stored on DISC
     300/    1EDC :                     ; --------------------------------------------------------
     301/    1EDC :                     
     309/    1EDC :                     Z80_CODE:
     313/    1EDC :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    1EDC :                     ; ===========================================================================
(1)    2/    1EDC :                     ; -------------------------------------------------------------------
(1)    3/    1EDC :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/    1EDC :                     ; -------------------------------------------------------------------
(1)    5/    1EDC :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max readRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of buffers
(1)   19/       0 :                     
(1)   20/       0 : =12H                 MAX_TBLSIZE	equ 12h		; Maximum size for chip tables
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 : =20H                 MAX_ZCMND	equ 20h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   23/       0 :                     
(1)   24/       0 :                     ; --------------------------------------------------------
(1)   25/       0 :                     ; Structs
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; trkBuff struct
(1)   29/       0 :                     ;
(1)   30/       0 :                     ; trk_Status: %ERP- V--0
(1)   31/       0 :                     ; E - enabled
(1)   32/       0 :                     ; R - Init|Restart track
(1)   33/       0 :                     ; P - refill-on-playback
(1)   34/       0 :                     ; V - volume change flag
(1)   35/       0 :                     ; 0 - Use global sub-beats
(1)   36/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   37/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   38/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   39/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   40/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   41/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   42/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   43/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   44/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   45/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   46/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   47/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   48/       0 : =12H                 trk_TickTmr	equ 12h	; Ticks timer
(1)   49/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   50/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   51/       0 : =15H                 trk_BankHeads	equ 15h ; Header bank
(1)   52/       0 : =16H                 trk_BankBlk	equ 16h	; Block bank
(1)   53/       0 : =17H                 trk_MaxChnl	equ 17h ; MAX channels used in this track
(1)   54/       0 : =18H                 trk_VolFdTarget	equ 18h	; Target fade volume
(1)   55/       0 : =19H                 trk_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   56/       0 : =1CH                 trk_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   57/       0 : =1FH                 trk_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   58/       0 : =22H                 trk_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   59/       0 : =25H                 trk_ChnIndx	equ 25h	; CHANNEL INDEXES START HERE
(1)   60/       0 :                     
(1)   61/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   62/       0 :                     ;
(1)   63/       0 :                     ; chnl_Flags: E0LRevin
(1)   64/       0 :                     ; 	 E - Channel is active
(1)   65/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   66/       0 :                     ; 	 e - Effect*
(1)   67/       0 :                     ; 	 v - Volume*
(1)   68/       0 :                     ; 	 i - Intrument*
(1)   69/       0 :                     ; 	 n - Note*
(1)   70/       0 : =0H                  chnl_Flags	equ 0	; !! Playback flags: %E0LRevin ** MUST BE LOCATED AT 0 **
(1)   71/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   72/       0 : =2H                  chnl_Note	equ 2	; IT Musical note or command
(1)   73/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   74/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   75/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   76/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   77/       0 : =7H                  chnl_Type	equ 7	; Impulse type bits
(1)   78/       0 :                     
(1)   79/       0 :                     
(1)   80/       0 :                     ; Table struct
(1)   81/       0 : =0H                  ztbl_Link	equ 00h			; !! current linked channel in trkChnls
(1)   82/       0 : =2H                  ztbl_Priority	equ 02h			; !! 00h-7Fh: Priority level 0-15 + 80h+chipID Silence request
(1)   83/       0 : =3H                  ztbl_Chip	equ 03h			; Chip index (YM2612: direct index) *MUST BE ON THE LIST*
(1)   84/       0 : =4H                  ztbl_MasterVol	equ 04h			; MASTER volume for this channel
(1)   85/       0 : =5H                  ztbl_FreqIndx	equ 05h			; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   86/       0 : =6H                  ztbl_PitchBend	equ 06h			; Pitchbend incr/decr
(1)   87/       0 : =7H                  ztbl_Volume	equ 07h			; Current Volume: 00-max
(1)   88/       0 : =8H                  ztbl_VolSlide	equ 08h			; Volume slide incr/decr
(1)   89/       0 : =0AH                 ztbl_InstCach	equ 0Ah			; <-- 8 bytes
(1)   90/       0 :                     
(1)   91/       0 :                     ; --------------------------------------------------------
(1)   92/       0 :                     ; Variables
(1)   93/       0 :                     ; --------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   96/       0 : =0H                  zopcNop		equ 00h
(1)   97/       0 : =8H                  zopcEx		equ 08h
(1)   98/       0 : =0C9H                zopcRet		equ 0C9h
(1)   99/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  100/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  101/       0 :                     
(1)  102/       0 :                     ; PSG
(1)  103/       0 : =0H                  COM		equ 0
(1)  104/       0 : =4H                  LEV		equ 4
(1)  105/       0 : =8H                  ATK		equ 8
(1)  106/       0 : =0CH                 DKY		equ 12
(1)  107/       0 : =10H                 SLV		equ 16
(1)  108/       0 : =14H                 RRT		equ 20
(1)  109/       0 : =18H                 MODE		equ 24
(1)  110/       0 : =1CH                 DTL		equ 28
(1)  111/       0 : =20H                 DTH		equ 32
(1)  112/       0 : =24H                 ALV		equ 36
(1)  113/       0 : =28H                 FLG		equ 40
(1)  114/       0 : =2CH                 ARP		equ 44
(1)  115/       0 : =30H                 MVOL		equ 48
(1)  116/       0 : =34H                 EFFV		equ 52
(1)  117/       0 : =38H                 PTMR		equ 56
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrupts
(1)  125/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  127/       6 : 18 58               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ;
(1)  132/       8 :                     ; Writes wave data to DAC using data stored
(1)  133/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  134/       8 :                     ; instructions to keep the samplerate stable.
(1)  135/       8 :                     ;
(1)  136/       8 :                     ; Input (EXX):
(1)  137/       8 :                     ;  c - WAVE buffer MSB
(1)  138/       8 :                     ; de - Pitch (xx.00)
(1)  139/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  140/       8 :                     ;
(1)  141/       8 :                     ; Uses (EXX):
(1)  142/       8 :                     ; b
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Notes:
(1)  145/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  146/       8 :                     ; DAC playback
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  149/       8 :                     ; --------------------------------------------------------
(1)  150/       8 :                     
(1)  151/       8 :                     ; EXX set:
(1)  152/       8 :                     ; af - temporal
(1)  153/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  154/       8 :                     ; de - pitch increment
(1)  155/       8 :                     ; hl - wave buffer position 00.00h
(1)  156/       8 :                     		org 8
(1)  157/       8 : D9                  dac_me:		exx			; * flip registers <-- Changes between EXX(play) and RET(stop)
(1)  158/       9 : 08                  		ex	af,af'		; Swap af
(1)  159/       A : 45                  		ld	b,l		; Save old hl buff
(1)  160/       B : 6C                  		ld	l,h		;
(1)  161/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  162/       D : 3E 2A               		ld	a,2Ah		;
(1)  163/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  164/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  165/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  166/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  167/      17 : 68                  		ld	l,b		;
(1)  168/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  169/      19 : 08                  		ex	af,af'		; Return af
(1)  170/      1A : D9                  		exx			; * return registers
(1)  171/      1B : C9                  		ret
(1)  172/      1C :                     
(1)  173/      1C :                     ; --------------------------------------------------------
(1)  174/      1C :                     ; 1Ch - Master tracklist pointer
(1)  175/      1C :                     gemaMstrListPos:
(1)  176/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  177/      1D : 00                  		db 0
(1)  178/      1E : 00                  		db 0
(1)  179/      1F : 00                  		db 0
(1)  180/      20 :                     
(1)  181/      20 :                     ; --------------------------------------------------------
(1)  182/      20 :                     ; RST 20h (dac_me)
(1)  183/      20 :                     ; *** self-modifiable code ***
(1)  184/      20 :                     ;
(1)  185/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  186/      20 :                     ; it playing.
(1)  187/      20 :                     ; --------------------------------------------------------
(1)  188/      20 :                     
(1)  189/      20 :                     		org 20h
(1)  190/      20 : F5                  dac_fill:	push	af		; Save af <-- Changes between PUSH AF(play) and RET(stop)
(1)  191/      21 : 3A 62 1F            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  192/      24 : D9                  		exx			; * swap regs
(1)  193/      25 : AC                  		xor	h		; Grab LSB.00
(1)  194/      26 : D9                  		exx			; * swap regs
(1)  195/      27 : E6 80               		and	80h		; Check if half-bit changed
(1)  196/      29 : C4 21 12            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  197/      2C : F1                  		pop	af		; Restore af
(1)  198/      2D : C9                  		ret
(1)  199/      2E :                     
(1)  200/      2E :                     ; --------------------------------------------------------
(1)  201/      2E :                     ; 02Eh - User read/write values
(1)  202/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  203/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  204/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  205/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  206/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  207/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  208/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK PCM transfers.
(1)  209/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  210/      38 :                     
(1)  211/      38 :                     ; --------------------------------------------------------
(1)  212/      38 :                     ; Z80 Interrupt at 0038h
(1)  213/      38 :                     ; --------------------------------------------------------
(1)  214/      38 :                     
(1)  215/      38 :                     		org 38h				; Align 38h
(1)  216/      38 : ED 73 F8 1C         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  217/      3C : F3                  		di				; Disable interrupt
(1)  218/      3D : C9                  		ret
(1)  219/      3E :                     
(1)  220/      3E :                     ; --------------------------------------------------------
(1)  221/      3E :                     ; 03Eh - More user settings
(1)  222/      3E : 00                  palMode		db 0				; 3Eh: PAL mode flag
(1)  223/      3F : 00                  commZRead	db 0				; cmd fifo READ pointer (here)
(1)  224/      40 :                     
(1)  225/      40 :                     ; --------------------------------------------------------
(1)  226/      40 :                     ; 68K Read/Write area at 40h
(1)  227/      40 :                     ; --------------------------------------------------------
(1)  228/      40 :                     
(1)  229/      40 :                     ; 		org 40h
(1)  230/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  231/      60 :                     
(1)  232/      60 :                     ; --------------------------------------------------------
(1)  233/      60 :                     ; Initialize
(1)  234/      60 :                     ; --------------------------------------------------------
(1)  235/      60 :                     
(1)  236/      60 :                     z80_init:
(1)  237/      60 : CD F6 0E            		call	gema_init		; Init values
(1)  238/      63 : FB                  		ei
(1)  239/      64 :                     
(1)  240/      64 :                     ; --------------------------------------------------------
(1)  241/      64 :                     ; MAIN LOOP
(1)  242/      64 :                     ; --------------------------------------------------------
(1)  243/      64 :                     
(1)  244/      64 :                     drv_loop:
(1)  245/      64 : CF                  		rst	8
(1)  246/      65 : CD 68 0F            		call	get_tick		; Check tick on VBlank
(1)  247/      68 : E7                  		rst	20h			; Refill wave here
(1)  248/      69 : CF                  		rst	8
(1)  249/      6A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  250/      6C : 3A FA 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  251/      6F : D6 01               		sub	1
(1)  252/      71 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  253/      73 : 32 FA 1C            		ld	(tickCnt),a
(1)  254/      76 : CD 46 10            		call	chip_env		; Process PSG and YM
(1)  255/      79 : CD 68 0F            		call	get_tick		; Check for another tick
(1)  256/      7C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  257/      7E :                     .noticks:
(1)  258/      7E : 3A FD 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  259/      81 : D6 01               		sub	1
(1)  260/      83 : 38 06               		jr	c,.nobeats
(1)  261/      85 : CF                  		rst	8
(1)  262/      86 : 32 FD 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  263/      89 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  264/      8B :                     .nobeats:
(1)  265/      8B : CF                  		rst	8
(1)  266/      8C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  267/      8D : B7                  		or	a
(1)  268/      8E : 28 14               		jr	z,.neither
(1)  269/      90 : 32 FB 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  270/      93 : CF                  		rst	8
(1)  271/      94 : CD 68 0F            		call	get_tick
(1)  272/      97 : CD 16 06            		call	set_chips		; Send changes to sound chips
(1)  273/      9A : CD 68 0F            		call	get_tick
(1)  274/      9D : CF                  		rst	8
(1)  275/      9E : CD 43 02            		call	upd_track		; Update track data
(1)  276/      A1 : CD 68 0F            		call	get_tick
(1)  277/      A4 :                     .neither:
(1)  278/      A4 : CF                  		rst	8
(1)  282/      A5 : CD 68 0F            		call	get_tick
(1)  283/      A8 :                     .next_cmd:
(1)  284/      A8 : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  285/      AB : 47                  		ld	b,a			; are in the same spot a == b
(1)  286/      AC : 3A 3F 00            		ld	a,(commZRead)
(1)  287/      AF : B8                  		cp	b			; If equal, loop back.
(1)  288/      B0 : 28 B2               		jr	z,drv_loop
(1)  289/      B2 : CF                  		rst	8
(1)  290/      B3 : CD CB 00            		call	.grab_arg		; Read staring flag -1
(1)  291/      B6 : FE FF               		cp	-1			; Got START -1?
(1)  292/      B8 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  293/      BA : CD CB 00            		call	.grab_arg		; Read command number
(1)  294/      BD : 87                  		add	a,a			; ID * 2
(1)  295/      BE : 21 EA 00            		ld	hl,.list		; Index-jump...
(1)  296/      C1 : 16 00               		ld	d,0
(1)  297/      C3 : 5F                  		ld	e,a
(1)  298/      C4 : 19                  		add	hl,de
(1)  299/      C5 : 7E                  		ld	a,(hl)
(1)  300/      C6 : 23                  		inc	hl
(1)  301/      C7 : 66                  		ld	h,(hl)
(1)  302/      C8 : CF                  		rst	8
(1)  303/      C9 : 6F                  		ld	l,a
(1)  304/      CA : E9                  		jp	(hl)
(1)  305/      CB :                     
(1)  306/      CB :                     ; --------------------------------------------------------
(1)  307/      CB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  308/      CB :                     ; --------------------------------------------------------
(1)  309/      CB :                     
(1)  310/      CB :                     .grab_arg:
(1)  311/      CB : D5                  		push	de
(1)  312/      CC : E5                  		push	hl
(1)  313/      CD :                     .getcbytel:
(1)  314/      CD : 3A 2E 00            		ld	a,(commZWrite)
(1)  315/      D0 : 57                  		ld	d,a
(1)  316/      D1 : CF                  		rst	8
(1)  317/      D2 : 3A 3F 00            		ld	a,(commZRead)
(1)  318/      D5 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  319/      D6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  320/      D8 : 16 00               		ld	d,0
(1)  321/      DA : 5F                  		ld	e,a
(1)  322/      DB : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  323/      DE : 19                  		add	hl,de
(1)  324/      DF : CF                  		rst	8
(1)  325/      E0 : 3C                  		inc	a
(1)  326/      E1 : E6 1F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  327/      E3 : 32 3F 00            		ld	(commZRead),a
(1)  328/      E6 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  329/      E7 : E1                  		pop	hl
(1)  330/      E8 : D1                  		pop	de
(1)  331/      E9 : C9                  		ret
(1)  332/      EA :                     
(1)  333/      EA :                     ; --------------------------------------------------------
(1)  334/      EA :                     
(1)  335/      EA :                     .list:
(1)  336/      EA : FA 00               		dw .cmnd_0		; 00h - TESTING
(1)  337/      EC : FD 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  338/      EE : 16 01               		dw .cmnd_2		; 02h - Play by track number
(1)  339/      F0 : 50 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  340/      F2 : FA 00               		dw .cmnd_0		; 04h - **
(1)  341/      F4 : 8E 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  342/      F6 : C7 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  343/      F8 : 00 02               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  344/      FA :                     
(1)  345/      FA :                     ; --------------------------------------------------------
(1)  346/      FA :                     ; Command 00h
(1)  347/      FA :                     ;
(1)  348/      FA :                     ; Reserved for TESTING purposes.
(1)  349/      FA :                     ; --------------------------------------------------------
(1)  350/      FA :                     
(1)  351/      FA :                     .cmnd_0:
(1)  352/      FA : C3 A8 00            		jp	.next_cmd
(1)  353/      FD :                     
(1)  354/      FD :                     ; --------------------------------------------------------
(1)  355/      FD :                     ; Command 01h:
(1)  356/      FD :                     ;
(1)  357/      FD :                     ; Set the Track MASTER-list.
(1)  358/      FD :                     ; --------------------------------------------------------
(1)  359/      FD :                     
(1)  360/      FD :                     .cmnd_1:
(1)  361/      FD : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  362/     100 : CD CB 00            		call	.grab_arg		; $000000xx
(1)  363/     103 : 77                  		ld	(hl),a
(1)  364/     104 : 2B                  		dec	hl
(1)  365/     105 : CD CB 00            		call	.grab_arg		; $0000xx00
(1)  366/     108 : 77                  		ld	(hl),a
(1)  367/     109 : 2B                  		dec	hl
(1)  368/     10A : CD CB 00            		call	.grab_arg		; $00xx0000
(1)  369/     10D : 77                  		ld	(hl),a
(1)  370/     10E : 2B                  		dec	hl
(1)  371/     10F : CD CB 00            		call	.grab_arg		; $xx000000 (filler)
(1)  372/     112 : 77                  		ld	(hl),a
(1)  373/     113 : C3 A8 00            		jp	.next_cmd
(1)  374/     116 :                     
(1)  375/     116 :                     ; --------------------------------------------------------
(1)  376/     116 :                     ; Command 02h:
(1)  377/     116 :                     ;
(1)  378/     116 :                     ; Make new track by sequence number
(1)  379/     116 :                     ;
(1)  380/     116 :                     ; Arguments:
(1)  381/     116 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  382/     116 :                     ; --------------------------------------------------------
(1)  383/     116 :                     
(1)  384/     116 :                     .cmnd_2:
(1)  385/     116 : CD CB 00            		call	.grab_arg		; d1: Sequence ID
(1)  386/     119 : 4F                  		ld	c,a			; copy as c
(1)  387/     11A : CD CB 00            		call	.grab_arg		; d2: Block from
(1)  388/     11D : 47                  		ld	b,a			; copy as b
(1)  389/     11E : CF                  		rst	8
(1)  390/     11F : CD CB 00            		call	.grab_arg		; d0: Slot index
(1)  391/     122 : FD 21 8E 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  392/     126 : B7                  		or	a
(1)  393/     127 : FA 36 01            		jp	m,.srch_mode
(1)  394/     12A :                     ; 		cp	-1			; if d2 == -1, search
(1)  395/     12A :                     ; 		jr	z,.srch_mode
(1)  396/     12A : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  397/     12C : D2 A8 00            		jp	nc,.next_cmd
(1)  398/     12F : CF                  		rst	8
(1)  399/     130 : CD 1E 02            		call	.cmnd_rdslot
(1)  400/     133 : C3 45 01            		jp	.wrtto_slot
(1)  401/     136 :                     ; -1
(1)  402/     136 :                     .srch_mode:
(1)  403/     136 : CD 30 02            		call	.srch_slot
(1)  404/     139 : FE FF               		cp	-1
(1)  405/     13B : CA A8 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  406/     13E : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  407/     140 : CA 45 01            		jp	z,.wrtto_slot
(1)  408/     143 : 18 F1               		jr	.srch_mode
(1)  409/     145 :                     .wrtto_slot:
(1)  410/     145 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  411/     147 : 23                  		inc	hl
(1)  412/     148 : CF                  		rst	8
(1)  413/     149 : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  414/     14A : 23                  		inc	hl
(1)  415/     14B : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  416/     14C : 79                  		ld	a,c
(1)  417/     14D : C3 A8 00            		jp	.next_cmd
(1)  418/     150 :                     
(1)  419/     150 :                     ; --------------------------------------------------------
(1)  420/     150 :                     ; Command 03h:
(1)  421/     150 :                     ;
(1)  422/     150 :                     ; Stop track with the same sequence number
(1)  423/     150 :                     ;
(1)  424/     150 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  425/     150 :                     ; --------------------------------------------------------
(1)  426/     150 :                     
(1)  427/     150 :                     .cmnd_3:
(1)  428/     150 : CD CB 00            		call	.grab_arg			; d1: Sequence ID
(1)  429/     153 : 4F                  		ld	c,a				; copy to c
(1)  430/     154 : CD CB 00            		call	.grab_arg			; d0: Slot index
(1)  431/     157 : FD 21 8E 17         		ld	iy,nikona_BuffList		; iy - Slot buffer list
(1)  432/     15B : B7                  		or	a
(1)  433/     15C : FA 6E 01            		jp	m,.srch_del			; if -1, search for all with same ID
(1)  434/     15F : FE 03               		cp	MAX_SLOTS			; If maxed out slots
(1)  435/     161 : D2 A8 00            		jp	nc,.next_cmd
(1)  436/     164 : CF                  		rst	8
(1)  437/     165 : CD 1E 02            		call	.cmnd_rdslot
(1)  438/     168 : CD 7B 01            		call	.wrtto_del
(1)  439/     16B : C3 A8 00            		jp	.next_cmd
(1)  440/     16E :                     ; -1
(1)  441/     16E :                     .srch_del:
(1)  442/     16E : CD 30 02            		call	.srch_slot
(1)  443/     171 : FE FF               		cp	-1
(1)  444/     173 : CA A8 00            		jp	z,.next_cmd
(1)  445/     176 : CD 7B 01            		call	.wrtto_del
(1)  446/     179 : 18 F3               		jr	.srch_del
(1)  447/     17B :                     .wrtto_del:
(1)  448/     17B : CB 7E               		bit	7,(hl)
(1)  449/     17D : C8                  		ret	z
(1)  450/     17E : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  451/     180 : 20 05               		jr	nz,.del_all
(1)  452/     182 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  453/     185 : B9                  		cp	c
(1)  454/     186 : C0                  		ret	nz
(1)  455/     187 :                     .del_all:
(1)  456/     187 : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  457/     189 : 23                  		inc	hl
(1)  458/     18A : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  459/     18C : CF                  		rst	8
(1)  460/     18D : C9                  		ret
(1)  461/     18E :                     
(1)  462/     18E :                     ; --------------------------------------------------------
(1)  463/     18E :                     ; Command 05h:
(1)  464/     18E :                     ;
(1)  465/     18E :                     ; Fade volume (FadeIn/FadeOut)
(1)  466/     18E :                     ;
(1)  467/     18E :                     ; Arguments:
(1)  468/     18E :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  469/     18E :                     ; --------------------------------------------------------
(1)  470/     18E :                     
(1)  471/     18E :                     .cmnd_5:
(1)  472/     18E : CD CB 00            		call	.grab_arg		; d1: Master volume
(1)  473/     191 : 4F                  		ld	c,a			; copy to c
(1)  474/     192 : CD CB 00            		call	.grab_arg		; d0: Slot index
(1)  475/     195 : FD 21 8E 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  476/     199 : B7                  		or	a
(1)  477/     19A : FA AC 01            		jp	m,.srch_fvol		; if -1, search for all with same ID
(1)  478/     19D : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  479/     19F : D2 A8 00            		jp	nc,.next_cmd
(1)  480/     1A2 : CF                  		rst	8
(1)  481/     1A3 : CD 1E 02            		call	.cmnd_rdslot
(1)  482/     1A6 : CD B9 01            		call	.wrtto_fvol
(1)  483/     1A9 : C3 A8 00            		jp	.next_cmd
(1)  484/     1AC :                     ; -1
(1)  485/     1AC :                     .srch_fvol:
(1)  486/     1AC : CD 30 02            		call	.srch_slot
(1)  487/     1AF : FE FF               		cp	-1
(1)  488/     1B1 : CA A8 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  489/     1B4 : CD B9 01            		call	.wrtto_fvol
(1)  490/     1B7 : 18 F3               		jr	.srch_fvol
(1)  491/     1B9 :                     .wrtto_fvol:
(1)  492/     1B9 : CB 7E               		bit	7,(hl)			; Active?
(1)  493/     1BB : C8                  		ret	z
(1)  494/     1BC : CB DE               		set	3,(hl)			; Volume update flag
(1)  495/     1BE : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  496/     1C1 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  497/     1C5 : CF                  		rst	8
(1)  498/     1C6 : C9                  		ret
(1)  499/     1C7 :                     
(1)  500/     1C7 :                     ; --------------------------------------------------------
(1)  501/     1C7 :                     ; Command 06h:
(1)  502/     1C7 :                     ;
(1)  503/     1C7 :                     ; Set track's master volume
(1)  504/     1C7 :                     ;
(1)  505/     1C7 :                     ; Arguments:
(1)  506/     1C7 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  507/     1C7 :                     ; --------------------------------------------------------
(1)  508/     1C7 :                     
(1)  509/     1C7 :                     .cmnd_6:
(1)  510/     1C7 : CD CB 00            		call	.grab_arg		; d1: Master volume
(1)  511/     1CA : 4F                  		ld	c,a			; copy to c
(1)  512/     1CB : CD CB 00            		call	.grab_arg		; d0: Slot index
(1)  513/     1CE : FD 21 8E 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  514/     1D2 : B7                  		or	a
(1)  515/     1D3 : FA E5 01            		jp	m,.srch_vol		; if -1, search for all with same ID
(1)  516/     1D6 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  517/     1D8 : D2 A8 00            		jp	nc,.next_cmd
(1)  518/     1DB : CF                  		rst	8
(1)  519/     1DC : CD 1E 02            		call	.cmnd_rdslot
(1)  520/     1DF : CD F2 01            		call	.wrtto_vol
(1)  521/     1E2 : C3 A8 00            		jp	.next_cmd
(1)  522/     1E5 :                     ; -1
(1)  523/     1E5 :                     .srch_vol:
(1)  524/     1E5 : CD 30 02            		call	.srch_slot
(1)  525/     1E8 : FE FF               		cp	-1
(1)  526/     1EA : CA A8 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  527/     1ED : CD F2 01            		call	.wrtto_vol
(1)  528/     1F0 : 18 F3               		jr	.srch_vol
(1)  529/     1F2 :                     .wrtto_vol:
(1)  530/     1F2 : CB DE               		set	3,(hl)			; Volume update flag
(1)  531/     1F4 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  532/     1F7 : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  533/     1FA : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  534/     1FE : CF                  		rst	8
(1)  535/     1FF : C9                  		ret
(1)  536/     200 :                     
(1)  537/     200 :                     ; --------------------------------------------------------
(1)  538/     200 :                     ; Command 07h:
(1)  539/     200 :                     ;
(1)  540/     200 :                     ; Set global sub-beats
(1)  541/     200 :                     ; --------------------------------------------------------
(1)  542/     200 :                     
(1)  543/     200 :                     .cmnd_7:
(1)  544/     200 : CD CB 00            		call	.grab_arg	; d0.w: $00xx
(1)  545/     203 : 4F                  		ld	c,a
(1)  546/     204 : CD CB 00            		call	.grab_arg	; d0.w: $xx00
(1)  547/     207 : 67                  		ld	h,a
(1)  548/     208 : 69                  		ld	l,c
(1)  549/     209 : 3A 3E 00            		ld	a,(palMode)
(1)  550/     20C : B7                  		or	a
(1)  551/     20D : 28 04               		jr	z,.not_pal
(1)  552/     20F : 11 28 00            		ld	de,40
(1)  553/     212 : 19                  		add	hl,de
(1)  554/     213 :                     .not_pal:
(1)  555/     213 : 7C                  		ld	a,h
(1)  556/     214 : 32 FF 1C            		ld	(sbeatPtck+1),a
(1)  557/     217 : 7D                  		ld	a,l
(1)  558/     218 : 32 FE 1C            		ld	(sbeatPtck),a
(1)  559/     21B : C3 A8 00            		jp	.next_cmd
(1)  560/     21E :                     
(1)  561/     21E :                     ; --------------------------------------------------------
(1)  562/     21E :                     ; Shared subs
(1)  563/     21E :                     ; --------------------------------------------------------
(1)  564/     21E :                     
(1)  565/     21E :                     .cmnd_rdslot:
(1)  566/     21E : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  567/     21F : 87                  		add	a,a			; id*8
(1)  568/     220 : 87                  		add	a,a
(1)  569/     221 : 16 00               		ld	d,0
(1)  570/     223 : 5F                  		ld	e,a
(1)  571/     224 : FD 19               		add	iy,de
(1)  572/     226 : FD 6E 00            		ld	l,(iy)
(1)  573/     229 : FD 66 01            		ld	h,(iy+1)
(1)  574/     22C : E5                  		push	hl
(1)  575/     22D : DD E1               		pop	ix
(1)  576/     22F : C9                  		ret
(1)  577/     230 :                     
(1)  578/     230 :                     ; ------------------------------------------------
(1)  579/     230 :                     ; iy - nikona_BuffList
(1)  580/     230 :                     
(1)  581/     230 :                     .srch_slot:
(1)  582/     230 : FD 7E 00            		ld	a,(iy)
(1)  583/     233 : FE FF               		cp	-1			; End of list?
(1)  584/     235 : C8                  		ret	z
(1)  585/     236 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  586/     239 : 6F                  		ld	l,a
(1)  587/     23A : E5                  		push	hl
(1)  588/     23B : DD E1               		pop	ix
(1)  589/     23D : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  590/     240 : FD 19               		add	iy,de			; Next entry for later
(1)  591/     242 : C9                  		ret
(1)  592/     243 :                     
(1)  593/     243 :                     ; ====================================================================
(1)  594/     243 :                     ; ----------------------------------------------------------------
(1)  595/     243 :                     ; MAIN Playback section
(1)  596/     243 :                     ; ----------------------------------------------------------------
(1)  597/     243 :                     
(1)  598/     243 :                     ; --------------------------------------------------------
(1)  599/     243 :                     ; Read mini-impulse-tracker data
(1)  600/     243 :                     ; --------------------------------------------------------
(1)  601/     243 :                     
(1)  602/     243 :                     upd_track:
(1)  603/     243 : E7                  		rst	20h
(1)  604/     244 : CD 68 0F            		call	get_tick		; Check for tick flag
(1)  605/     247 :                     	; ** MANUAL BUFF READ **
(1)  606/     247 : FD 21 C3 16         		ld	iy,trkBuff_0
(1)  607/     24B : CD 5A 02            		call	.read_track
(1)  608/     24E : FD 21 02 17         		ld	iy,trkBuff_1
(1)  609/     252 : CD 5A 02            		call	.read_track
(1)  610/     255 : CF                  		rst	8
(1)  611/     256 : FD 21 41 17         		ld	iy,trkBuff_2
(1)  612/     25A :                     
(1)  613/     25A :                     ; ----------------------------------------
(1)  614/     25A :                     ; Read track
(1)  615/     25A :                     ;
(1)  616/     25A :                     ; iy - Track buffer
(1)  617/     25A :                     ; ----------------------------------------
(1)  618/     25A :                     
(1)  619/     25A :                     .read_track:
(1)  620/     25A : CF                  		rst	8
(1)  621/     25B : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  622/     25E : CB 78               		bit	7,b			; bit7: Track active?
(1)  623/     260 : C8                  		ret	z			; Return if not.
(1)  624/     261 : 78                  		ld	a,b
(1)  625/     262 : FE FF               		cp	-1			; Flag is -1?
(1)  626/     264 : C8                  		ret	z			; Return if mid-flag
(1)  627/     265 : CF                  		rst	8
(1)  628/     266 :                     	; ----------------------------------------
(1)  629/     266 :                     	; Track volume changes
(1)  630/     266 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  631/     269 : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  632/     26C : FD 4E 18            		ld	c,(iy+trk_VolFdTarget)
(1)  633/     26F : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  634/     272 : 79                  		ld	a,c
(1)  635/     273 : BC                  		cp	h
(1)  636/     274 : 28 1E               		jr	z,.keep_vol
(1)  637/     276 : 30 06               		jr	nc,.fade_out
(1)  638/     278 : 11 80 FF            		ld	de,-80h
(1)  639/     27B : 19                  		add	hl,de
(1)  640/     27C : 18 0C               		jr	.too_much
(1)  641/     27E :                     .fade_out:
(1)  642/     27E : 19                  		add	hl,de
(1)  643/     27F : CF                  		rst	8
(1)  644/     280 : 7C                  		ld	a,h
(1)  645/     281 : B9                  		cp	c
(1)  646/     282 : 38 06               		jr	c,.too_much
(1)  647/     284 : 61                  		ld	h,c
(1)  648/     285 : 2E 00               		ld	l,0
(1)  649/     287 : FD 71 18            		ld	(iy+trk_VolFdTarget),c
(1)  650/     28A :                     .too_much:
(1)  651/     28A : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  652/     28E : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  653/     291 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  654/     294 :                     .keep_vol:
(1)  655/     294 :                     	; ----------------------------------------
(1)  656/     294 : 3A FB 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  657/     297 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  658/     299 : 28 03               		jr	z,.sfxmd
(1)  659/     29B : CB 4F               		bit	1,a			; BEAT passed?
(1)  660/     29D : C8                  		ret	z			; No BEAT.
(1)  661/     29E :                     .sfxmd:
(1)  662/     29E : CB 47               		bit	0,a			; TICK passed?
(1)  663/     2A0 : C8                  		ret	z			; No TICK.
(1)  664/     2A1 : CF                  		rst	8
(1)  665/     2A2 :                     	; ----------------------------------------
(1)  666/     2A2 :                     	; Start reading notes
(1)  667/     2A2 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  668/     2A4 : C4 2C 05            		call	nz,.first_fill
(1)  669/     2A7 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  670/     2A9 : C4 25 05            		call	nz,.effect_fill
(1)  671/     2AC : FD 7E 12            		ld	a,(iy+trk_TickTmr)	; TICK ex-timer for this track
(1)  672/     2AF : 3D                  		dec	a
(1)  673/     2B0 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  674/     2B3 : B7                  		or	a			; Check a
(1)  675/     2B4 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  676/     2B5 : CF                  		rst	8
(1)  677/     2B6 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  678/     2B9 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  679/     2BC :                     	; ----------------------------------------
(1)  680/     2BC : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  681/     2BF : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  682/     2C2 : 79                  		ld	a,c			; Check rowcount
(1)  683/     2C3 : B0                  		or	b
(1)  684/     2C4 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  685/     2C6 :                     	; ----------------------------------------
(1)  686/     2C6 :                     	; Read next block
(1)  687/     2C6 : CF                  		rst	8
(1)  688/     2C7 : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  689/     2CA : 3C                  		inc	a
(1)  690/     2CB : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  691/     2CE : CD 3D 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  692/     2D1 : FE FF               		cp	-1			; Track finished?
(1)  693/     2D3 : C8                  		ret	z
(1)  694/     2D4 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  695/     2D7 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  696/     2DA :                     	; ----------------------------------------
(1)  697/     2DA :                     	; bc - Row count
(1)  698/     2DA :                     .row_active:
(1)  699/     2DA : CF                  		rst	8
(1)  700/     2DB : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  701/     2DE : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  702/     2E1 :                     
(1)  703/     2E1 :                     ; --------------------------------
(1)  704/     2E1 :                     ; Main read-loop
(1)  705/     2E1 :                     ; --------------------------------
(1)  706/     2E1 :                     
(1)  707/     2E1 :                     .next_note:
(1)  708/     2E1 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check row timer
(1)  709/     2E4 : B7                  		or	a
(1)  710/     2E5 : 20 16               		jr	nz,.decrow
(1)  711/     2E7 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  712/     2E8 : B7                  		or	a
(1)  713/     2E9 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  714/     2EB : FA 08 03            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  715/     2EE : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  716/     2F1 :                     
(1)  717/     2F1 :                     ; --------------------------------
(1)  718/     2F1 :                     ; Exit
(1)  719/     2F1 :                     ; --------------------------------
(1)  720/     2F1 :                     
(1)  721/     2F1 :                     .exit:
(1)  722/     2F1 : CF                  		rst	8
(1)  723/     2F2 : CD 05 04            		call	.inc_cpatt		; * Increment patt pos
(1)  724/     2F5 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  725/     2F8 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  726/     2FB : 18 03               		jr	.decrow_e
(1)  727/     2FD :                     .decrow:
(1)  728/     2FD : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  729/     300 :                     .decrow_e:
(1)  730/     300 : 0B                  		dec	bc			; Decrement rowcount
(1)  731/     301 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  732/     304 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  733/     307 : C9                  		ret	; Exit.
(1)  734/     308 :                     
(1)  735/     308 :                     ; --------------------------------
(1)  736/     308 :                     ; New note request
(1)  737/     308 :                     ;
(1)  738/     308 :                     ; a - %1tcccccc
(1)  739/     308 :                     ;   | t - next byte has new type
(1)  740/     308 :                     ;   | c - channel
(1)  741/     308 :                     ; --------------------------------
(1)  742/     308 :                     
(1)  743/     308 :                     .has_note:
(1)  744/     308 : CF                  		rst	8
(1)  745/     309 : C5                  		push	bc			; Save rowcount
(1)  746/     30A : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  747/     30B : CD 05 04            		call	.inc_cpatt		; * Increment patt pos
(1)  748/     30E : E5                  		push	hl			; Save hl patt pos
(1)  749/     30F : FD E5               		push	iy
(1)  750/     311 : E1                  		pop	hl
(1)  751/     312 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  752/     316 : 11 25 00            		ld	de,trk_ChnIndx		; <-- this clears d
(1)  753/     319 : CF                  		rst	8
(1)  754/     31A : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  755/     31B : 79                  		ld	a,c			; Get patt note position
(1)  756/     31C : E6 1F               		and	00011111b		; Filter index bits
(1)  757/     31E : 5F                  		ld	e,a			; Save as e
(1)  758/     31F : 19                  		add	hl,de			; Increment more by this pos
(1)  759/     320 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  760/     321 : B7                  		or	a
(1)  761/     322 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  762/     324 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  763/     326 : 87                  		add	a,a
(1)  764/     327 : 87                  		add	a,a
(1)  765/     328 : 87                  		add	a,a
(1)  766/     329 : 5F                  		ld	e,a
(1)  767/     32A : DD 19               		add	ix,de
(1)  768/     32C : 18 2B               		jr	.cont_chnl
(1)  769/     32E :                     
(1)  770/     32E :                     ; Make NEW channel
(1)  771/     32E :                     ; ix - channel list start
(1)  772/     32E :                     .srch_new:
(1)  773/     32E : CF                  		rst	8
(1)  774/     32F : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  775/     331 : 16 00               		ld	d,0		; Reset out index
(1)  776/     333 :                     .next_chnl:
(1)  777/     333 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  778/     336 : B7                  		or	a		; If plus, track channel is free
(1)  779/     337 : F2 4E 03            		jp	p,.chnl_free
(1)  780/     33A : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  781/     33C : DD 23               		inc	ix
(1)  782/     33E : DD 23               		inc	ix
(1)  783/     340 : DD 23               		inc	ix
(1)  784/     342 : CF                  		rst	8
(1)  785/     343 : DD 23               		inc	ix
(1)  786/     345 : DD 23               		inc	ix
(1)  787/     347 : DD 23               		inc	ix
(1)  788/     349 : DD 23               		inc	ix
(1)  789/     34B : 14                  		inc	d		; Increment out index
(1)  790/     34C : 10 E5               		djnz	.next_chnl
(1)  791/     34E :                     .chnl_free:
(1)  792/     34E : CF                  		rst	8
(1)  793/     34F : 7A                  		ld	a,d			; Read index we got
(1)  794/     350 : E6 1F               		and	00011111b		; Filter bits
(1)  795/     352 : F6 80               		or	10000000b		; + set as used
(1)  796/     354 : 77                  		ld	(hl),a			; Write index slot
(1)  797/     355 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  798/     359 :                     .cont_chnl:
(1)  799/     359 :                     
(1)  800/     359 : E1                  		pop	hl			; Recover patt pos
(1)  801/     35A :                     	; ix - current channel
(1)  802/     35A : CF                  		rst	8
(1)  803/     35B : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  804/     35E : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  805/     360 : 28 08               		jr	z,.old_type
(1)  806/     362 : 7E                  		ld	a,(hl)
(1)  807/     363 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  808/     366 : 47                  		ld	b,a			; Set to b
(1)  809/     367 : CD 05 04            		call	.inc_cpatt		; Next patt pos
(1)  810/     36A :                     .old_type:
(1)  811/     36A :                     	; b - evinEVIN
(1)  812/     36A :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  813/     36A :                     	;     evin: byte is already stored on track-channel buffer
(1)  814/     36A :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  815/     36A :                     
(1)  816/     36A : CF                  		rst	8
(1)  817/     36B : CB 40               		bit	0,b			; New NOTE?
(1)  818/     36D : 28 07               		jr	z,.no_note
(1)  819/     36F : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  820/     370 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  821/     373 : CD 05 04            		call	.inc_cpatt
(1)  822/     376 :                     .no_note:
(1)  823/     376 : CB 48               		bit	1,b			; New INS?
(1)  824/     378 : 28 07               		jr	z,.no_ins
(1)  825/     37A : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  826/     37B : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  827/     37E : CD 05 04            		call	.inc_cpatt
(1)  828/     381 :                     .no_ins:
(1)  829/     381 : CB 50               		bit	2,b			; New VOL?
(1)  830/     383 : 28 07               		jr	z,.no_vol
(1)  831/     385 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  832/     386 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  833/     389 : CD 05 04            		call	.inc_cpatt
(1)  834/     38C :                     .no_vol:
(1)  835/     38C : CB 58               		bit	3,b			; New EFFECT?
(1)  836/     38E : 28 0F               		jr	z,.no_eff
(1)  837/     390 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  838/     391 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  839/     394 : CD 05 04            		call	.inc_cpatt
(1)  840/     397 : CF                  		rst	8
(1)  841/     398 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  842/     399 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  843/     39C : CD 05 04            		call	.inc_cpatt
(1)  844/     39F :                     .no_eff:
(1)  845/     39F : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  846/     3A0 : 0F                  		rrca
(1)  847/     3A1 : 0F                  		rrca
(1)  848/     3A2 : 0F                  		rrca
(1)  849/     3A3 : 0F                  		rrca
(1)  850/     3A4 : E6 0F               		and	00001111b		; Filter bits
(1)  851/     3A6 : 4F                  		ld	c,a			; Save as c
(1)  852/     3A7 : 78                  		ld	a,b
(1)  853/     3A8 : E6 0F               		and	00001111b		; Filter again
(1)  854/     3AA : B1                  		or	c			; Merge c with a
(1)  855/     3AB : CF                  		rst	8
(1)  856/     3AC : 4F                  		ld	c,a			; Save bit flags
(1)  857/     3AD : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  858/     3B0 : B1                  		or	c
(1)  859/     3B1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  860/     3B4 : C1                  		pop	bc			; Restore rowcount
(1)  861/     3B5 :                     	; ----------------------------------------
(1)  862/     3B5 :                     	; Effects that affect internal playback
(1)  863/     3B5 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  864/     3B8 : E6 08               		and	1000b			; ONLY check for the EFFECT bit
(1)  865/     3BA : CA E1 02            		jp	z,.next_note
(1)  866/     3BD : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  867/     3C0 : B7                  		or	a			; 00h = invalid effect
(1)  868/     3C1 : CA E1 02            		jp	z,.next_note
(1)  869/     3C4 : FE 01               		cp	1			; Effect A: Tick set
(1)  870/     3C6 : 28 0B               		jr	z,.eff_A
(1)  871/     3C8 : FE 02               		cp	2			; Effect B: Position Jump
(1)  872/     3CA : 28 18               		jr	z,.eff_B
(1)  873/     3CC : FE 03               		cp	3			; Effect C: Pattern break
(1)  874/     3CE : 28 32               		jr	z,.eff_C
(1)  875/     3D0 : C3 E1 02            		jp	.next_note
(1)  876/     3D3 :                     
(1)  877/     3D3 :                     ; ----------------------------------------
(1)  878/     3D3 :                     ; Effect A: Set ticks
(1)  879/     3D3 :                     ; ----------------------------------------
(1)  880/     3D3 :                     
(1)  881/     3D3 :                     .eff_A:
(1)  882/     3D3 : CF                  		rst	8
(1)  883/     3D4 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  884/     3D7 : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  885/     3DA : FD 73 12            		ld	(iy+trk_TickTmr),e
(1)  886/     3DD : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  887/     3E1 : C3 E1 02            		jp	.next_note
(1)  888/     3E4 :                     
(1)  889/     3E4 :                     ; ----------------------------------------
(1)  890/     3E4 :                     ; Effect B: jump to a new block
(1)  891/     3E4 :                     ; ----------------------------------------
(1)  892/     3E4 :                     
(1)  893/     3E4 :                     .eff_B:
(1)  894/     3E4 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  895/     3E7 : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  896/     3EA : CF                  		rst	8
(1)  897/     3EB : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  898/     3EF : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  899/     3F3 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  900/     3F7 : 3E 80               		ld	a,80h
(1)  901/     3F9 : FD 77 15            		ld	(iy+trk_BankHeads),a
(1)  902/     3FC : FD 77 16            		ld	(iy+trk_BankBlk),a
(1)  903/     3FF : C3 E1 02            		jp	.next_note
(1)  904/     402 :                     
(1)  905/     402 :                     ; ----------------------------------------
(1)  906/     402 :                     ; Effect C: Pattern break/exit
(1)  907/     402 :                     ;
(1)  908/     402 :                     ; Only used on SFX, arguments ignored.
(1)  909/     402 :                     ; ----------------------------------------
(1)  910/     402 :                     
(1)  911/     402 :                     .eff_C:
(1)  912/     402 : C3 16 05            		jp	.track_end
(1)  913/     405 :                     
(1)  914/     405 :                     ; ----------------------------------------
(1)  915/     405 :                     ; Increment the current patt position
(1)  916/     405 :                     ; and recieve more data
(1)  917/     405 :                     ;
(1)  918/     405 :                     ; Breaks:
(1)  919/     405 :                     ; a,e
(1)  920/     405 :                     ; ----------------------------------------
(1)  921/     405 :                     
(1)  922/     405 :                     .inc_cpatt:
(1)  923/     405 : FD 5E 08            		ld	e,(iy+trk_Cach)		; Read curret cache LSB
(1)  924/     408 : 7D                  		ld	a,l
(1)  925/     409 : 3C                  		inc	a
(1)  926/     40A : E6 1F               		and	MAX_RCACH-1
(1)  927/     40C : FE 1E               		cp	MAX_RCACH-2		; ALMOST RAN OUT of bytes?
(1)  928/     40E : 30 03               		jr	nc,.ran_out
(1)  929/     410 : B3                  		or	e
(1)  930/     411 : 6F                  		ld	l,a
(1)  931/     412 : C9                  		ret
(1)  932/     413 :                     .ran_out:
(1)  933/     413 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  934/     416 : E5                  		push	hl
(1)  935/     417 : C5                  		push	bc
(1)  936/     418 : 06 00               		ld	b,0
(1)  937/     41A : 4F                  		ld	c,a
(1)  938/     41B : CF                  		rst	8
(1)  939/     41C : 5D                  		ld	e,l
(1)  940/     41D : 54                  		ld	d,h
(1)  941/     41E : FD 6E 19            		ld	l,(iy+trk_RomPattRead)
(1)  942/     421 : FD 66 1A            		ld	h,(iy+(trk_RomPattRead+1))
(1)  943/     424 : FD 7E 1B            		ld	a,(iy+(trk_RomPattRead+2))
(1)  944/     427 : 09                  		add	hl,bc
(1)  945/     428 : CE 00               		adc	a,0
(1)  946/     42A : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1)  947/     42D : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1)  948/     430 : CF                  		rst	8
(1)  949/     431 : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1)  950/     434 : 01 20 00            		ld	bc,MAX_RCACH
(1)  951/     437 : CD 89 0F            		call	readRom		; *** ROM ACCESS ***
(1)  952/     43A : C1                  		pop	bc
(1)  953/     43B : E1                  		pop	hl
(1)  954/     43C : C9                  		ret
(1)  955/     43D :                     
(1)  956/     43D :                     ; ----------------------------------------
(1)  957/     43D :                     ; Set track pattern by trk_currBlk
(1)  958/     43D :                     ; ----------------------------------------
(1)  959/     43D :                     
(1)  960/     43D :                     .set_track:
(1)  961/     43D :                     	; ----------------------------------------
(1)  962/     43D :                     	; Make block id list
(1)  963/     43D : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  964/     440 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  965/     443 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  966/     446 : 4F                  		ld	c,a
(1)  967/     447 : C5                  		push	bc
(1)  968/     448 : D5                  		push	de
(1)  969/     449 : CF                  		rst	8
(1)  970/     44A : 0F                  		rrca
(1)  971/     44B : 0F                  		rrca
(1)  972/     44C : 0F                  		rrca
(1)  973/     44D : E6 1F               		and	00011111b
(1)  974/     44F : FD 4E 16            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  975/     452 : CB 79               		bit	7,c			; First time?
(1)  976/     454 : 20 03               		jr	nz,.first_blk
(1)  977/     456 : B9                  		cp	c			; SAME instrument data?
(1)  978/     457 : 28 1E               		jr	z,.keep_blk
(1)  979/     459 :                     .first_blk:
(1)  980/     459 : CF                  		rst	8
(1)  981/     45A : FD 77 16            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  982/     45D : 07                  		rlca
(1)  983/     45E : 07                  		rlca
(1)  984/     45F : 07                  		rlca
(1)  985/     460 : 06 00               		ld	b,0
(1)  986/     462 : 4F                  		ld	c,a
(1)  987/     463 : FD 6E 22            		ld	l,(iy+trk_RomBlks)
(1)  988/     466 : FD 66 23            		ld	h,(iy+(trk_RomBlks+1))
(1)  989/     469 : FD 7E 24            		ld	a,(iy+(trk_RomBlks+2))
(1)  990/     46C : E7                  		rst	20h
(1)  991/     46D : CF                  		rst	8
(1)  992/     46E : 09                  		add	hl,bc
(1)  993/     46F : CE 00               		adc	a,0
(1)  994/     471 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  995/     474 : CD 89 0F            		call	readRom		; ** ROM ACCESS **
(1)  996/     477 :                     .keep_blk:
(1)  997/     477 : E1                  		pop	hl
(1)  998/     478 : C1                  		pop	bc
(1)  999/     479 : 79                  		ld	a,c
(1) 1000/     47A : E6 07               		and	00000111b
(1) 1001/     47C : CF                  		rst	8
(1) 1002/     47D : 16 00               		ld	d,0
(1) 1003/     47F : 5F                  		ld	e,a
(1) 1004/     480 : 19                  		add	hl,de
(1) 1005/     481 :                     	; ----------------------------------------
(1) 1006/     481 : 7E                  		ld	a,(hl)			; Read block byte
(1) 1007/     482 : FE FF               		cp	-1			; If block == -1, end track
(1) 1008/     484 : CA 16 05            		jp	z,.track_end
(1) 1009/     487 : CF                  		rst	8
(1) 1010/     488 :                     	; ----------------------------------------
(1) 1011/     488 : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1012/     48B : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1013/     48E : 4F                  		ld	c,a
(1) 1014/     48F : D5                  		push	de
(1) 1015/     490 : C5                  		push	bc
(1) 1016/     491 : CF                  		rst	8
(1) 1017/     492 : 0F                  		rrca
(1) 1018/     493 : 0F                  		rrca
(1) 1019/     494 : 0F                  		rrca
(1) 1020/     495 : E6 1F               		and	00011111b
(1) 1021/     497 : FD 4E 15            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1022/     49A : CB 79               		bit	7,c			; First time?
(1) 1023/     49C : 20 03               		jr	nz,.first_head
(1) 1024/     49E : B9                  		cp	c			; SAME instrument data?
(1) 1025/     49F : 28 26               		jr	z,.keep_it
(1) 1026/     4A1 :                     .first_head:
(1) 1027/     4A1 : CF                  		rst	8
(1) 1028/     4A2 : FD 77 15            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1029/     4A5 : 47                  		ld	b,a
(1) 1030/     4A6 : 0F                  		rrca
(1) 1031/     4A7 : 0F                  		rrca
(1) 1032/     4A8 : 0F                  		rrca
(1) 1033/     4A9 : E6 E0               		and	11100000b
(1) 1034/     4AB : 4F                  		ld	c,a
(1) 1035/     4AC : 78                  		ld	a,b
(1) 1036/     4AD : 0F                  		rrca
(1) 1037/     4AE : 0F                  		rrca
(1) 1038/     4AF : 0F                  		rrca
(1) 1039/     4B0 : E6 03               		and	00000011b
(1) 1040/     4B2 : 47                  		ld	b,a
(1) 1041/     4B3 :                     	; ----------------------------------------
(1) 1042/     4B3 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1043/     4B6 : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1044/     4B9 : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1045/     4BC : E7                  		rst	20h
(1) 1046/     4BD : CF                  		rst	8
(1) 1047/     4BE : 09                  		add	hl,bc
(1) 1048/     4BF : CE 00               		adc	a,0
(1) 1049/     4C1 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1050/     4C4 : CD 89 0F            		call	readRom		; ** ROM ACCESS **
(1) 1051/     4C7 :                     .keep_it:
(1) 1052/     4C7 : C1                  		pop	bc
(1) 1053/     4C8 : 79                  		ld	a,c
(1) 1054/     4C9 : E6 07               		and	00000111b
(1) 1055/     4CB : 87                  		add	a,a
(1) 1056/     4CC : 87                  		add	a,a
(1) 1057/     4CD : 57                  		ld	d,a
(1) 1058/     4CE : CF                  		rst	8
(1) 1059/     4CF : E6 FC               		and	11111100b
(1) 1060/     4D1 : 5F                  		ld	e,a
(1) 1061/     4D2 : 7A                  		ld	a,d
(1) 1062/     4D3 : E6 03               		and	00000011b
(1) 1063/     4D5 : 57                  		ld	d,a
(1) 1064/     4D6 : E1                  		pop	hl
(1) 1065/     4D7 : 19                  		add	hl,de
(1) 1066/     4D8 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1067/     4D9 : 23                  		inc	hl
(1) 1068/     4DA : CF                  		rst	8
(1) 1069/     4DB : 56                  		ld	d,(hl)
(1) 1070/     4DC : 23                  		inc	hl
(1) 1071/     4DD : 7E                  		ld	a,(hl)
(1) 1072/     4DE : 23                  		inc	hl
(1) 1073/     4DF : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1074/     4E2 : 7E                  		ld	a,(hl)
(1) 1075/     4E3 : 23                  		inc	hl
(1) 1076/     4E4 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1077/     4E7 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1078/     4EA : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1079/     4ED : CF                  		rst	8
(1) 1080/     4EE : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1081/     4F1 : 19                  		add	hl,de
(1) 1082/     4F2 : CE 00               		adc	a,0
(1) 1083/     4F4 : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1) 1084/     4F7 : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1085/     4FA : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1086/     4FD : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1087/     500 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1088/     503 :                     
(1) 1089/     503 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1090/     506 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1091/     509 : 0E 20               		ld	c,MAX_RCACH
(1) 1092/     50B : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1093/     50F : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1094/     513 : C3 89 0F            		jp	readRom		; ** ROM access **
(1) 1095/     516 :                     
(1) 1096/     516 :                     ; ----------------------------------------
(1) 1097/     516 :                     ; **JUMP ONLY**
(1) 1098/     516 :                     .track_end:
(1) 1099/     516 : CD D1 05            		call	track_out
(1) 1100/     519 : CF                  		rst	8
(1) 1101/     51A : AF                  		xor	a
(1) 1102/     51B : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1103/     51E : FD 77 12            		ld	(iy+trk_TickTmr),a
(1) 1104/     521 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1105/     524 : C9                  		ret
(1) 1106/     525 :                     
(1) 1107/     525 :                     ; ----------------------------------------
(1) 1108/     525 :                     ; Track refill
(1) 1109/     525 :                     ; ----------------------------------------
(1) 1110/     525 :                     
(1) 1111/     525 :                     .effect_fill:
(1) 1112/     525 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1113/     529 : C3 3D 04            		jp	.set_track
(1) 1114/     52C :                     
(1) 1115/     52C :                     ; ----------------------------------------
(1) 1116/     52C :                     ; Track Start/Reset
(1) 1117/     52C :                     ;
(1) 1118/     52C :                     ; iy - Track buffer
(1) 1119/     52C :                     ; ----------------------------------------
(1) 1120/     52C :                     
(1) 1121/     52C :                     .first_fill:
(1) 1122/     52C : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1123/     530 : CD D1 05            		call	track_out
(1) 1124/     533 : FD 36 12 01         		ld	(iy+trk_TickTmr),1	; Reset tick timer
(1) 1125/     537 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1126/     53A : CF                  		rst	8
(1) 1127/     53B : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1128/     53E : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1129/     541 : FE FF               		cp	-1			; Sequence -1?
(1) 1130/     543 : C8                  		ret	z
(1) 1131/     544 : 87                  		add	a,a
(1) 1132/     545 : 87                  		add	a,a
(1) 1133/     546 : 16 00               		ld	d,0
(1) 1134/     548 : 5F                  		ld	e,a
(1) 1135/     549 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1136/     54C : 23                  		inc	hl
(1) 1137/     54D : 7E                  		ld	a,(hl)			; $00xx0000
(1) 1138/     54E : 23                  		inc	hl
(1) 1139/     54F : 4E                  		ld	c,(hl)			; $0000xx00
(1) 1140/     550 : 23                  		inc	hl
(1) 1141/     551 : 6E                  		ld	l,(hl)			; $000000xx
(1) 1142/     552 : CF                  		rst	8
(1) 1143/     553 : 61                  		ld	h,c
(1) 1144/     554 : 19                  		add	hl,de
(1) 1145/     555 : CE 00               		adc	a,0
(1) 1146/     557 : 11 3B 16            		ld	de,trkInfoCach
(1) 1147/     55A : D5                  		push	de
(1) 1148/     55B : 01 04 00            		ld	bc,4
(1) 1149/     55E : CD 89 0F            		call	readRom		; *** ROM ACCESS ***
(1) 1150/     561 : E1                  		pop	hl
(1) 1151/     562 : 7E                  		ld	a,(hl)
(1) 1152/     563 : 23                  		inc	hl
(1) 1153/     564 : CB 7F               		bit	7,a
(1) 1154/     566 : 28 04               		jr	z,.no_glbl
(1) 1155/     568 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1156/     56C :                     .no_glbl:
(1) 1157/     56C : CF                  		rst	8
(1) 1158/     56D : E6 7F               		and	01111111b
(1) 1159/     56F : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1160/     572 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1161/     573 : 23                  		inc	hl			; grab it's pointers
(1) 1162/     574 : 4E                  		ld	c,(hl)
(1) 1163/     575 : 23                  		inc	hl
(1) 1164/     576 : 6E                  		ld	l,(hl)
(1) 1165/     577 : 61                  		ld	h,c
(1) 1166/     578 : 11 69 1F            		ld	de,headerOut
(1) 1167/     57B : 0E 0E               		ld	c,0Eh
(1) 1168/     57D : CD 89 0F            		call	readRom		; ** ROM access **
(1) 1169/     580 :                     
(1) 1170/     580 :                     
(1) 1171/     580 :                     	; headerOut:
(1) 1172/     580 :                     	; dc.w numof_chnls
(1) 1173/     580 :                     	; dc.l .blk,.pat,.ins
(1) 1174/     580 :                     	; *** READING BACKWARDS
(1) 1175/     580 : DD 21 76 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1176/     584 : CF                  		rst	8
(1) 1177/     585 : CD BE 05            		call	.grab_rhead		; Instrument data
(1) 1178/     588 : FD 75 1F            		ld	(iy+trk_RomInst),l
(1) 1179/     58B : FD 74 20            		ld	(iy+(trk_RomInst+1)),h
(1) 1180/     58E : FD 70 21            		ld	(iy+(trk_RomInst+2)),b
(1) 1181/     591 : E7                  		rst	20h
(1) 1182/     592 : CF                  		rst	8
(1) 1183/     593 : CD BE 05            		call	.grab_rhead		; Pattern heads
(1) 1184/     596 : FD 75 1C            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1185/     599 : FD 74 1D            		ld	(iy+(trk_RomPatt+1)),h
(1) 1186/     59C : FD 70 1E            		ld	(iy+(trk_RomPatt+2)),b
(1) 1187/     59F : FD 36 15 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1188/     5A3 : CF                  		rst	8
(1) 1189/     5A4 : CD BE 05            		call	.grab_rhead		; Block data
(1) 1190/     5A7 : FD 75 22            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1191/     5AA : FD 74 23            		ld	(iy+(trk_RomBlks+1)),h
(1) 1192/     5AD : FD 70 24            		ld	(iy+(trk_RomBlks+2)),b
(1) 1193/     5B0 : FD 36 16 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1194/     5B4 : CF                  		rst	8
(1) 1195/     5B5 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1196/     5B8 : FD 77 17            		ld	(iy+trk_MaxChnl),a
(1) 1197/     5BB : C3 3D 04            		jp	.set_track
(1) 1198/     5BE :                     
(1) 1199/     5BE :                     ; Read 68K pointer:
(1) 1200/     5BE :                     ; hl - 00xxxx
(1) 1201/     5BE :                     ;  b - xx0000
(1) 1202/     5BE :                     .grab_rhead:
(1) 1203/     5BE : DD 6E 00            		ld	l,(ix)
(1) 1204/     5C1 : DD 2B               		dec	ix
(1) 1205/     5C3 : DD 66 00            		ld	h,(ix)
(1) 1206/     5C6 : CF                  		rst	8
(1) 1207/     5C7 : DD 2B               		dec	ix
(1) 1208/     5C9 : DD 46 00            		ld	b,(ix)
(1) 1209/     5CC : DD 2B               		dec	ix
(1) 1210/     5CE :                     ; 		ld	c,(ix)
(1) 1211/     5CE : DD 2B               		dec	ix
(1) 1212/     5D0 : C9                  		ret
(1) 1213/     5D1 :                     
(1) 1214/     5D1 :                     ; ----------------------------------------
(1) 1215/     5D1 :                     ; Reset tracker channels
(1) 1216/     5D1 :                     ;
(1) 1217/     5D1 :                     ; iy - Track buffer
(1) 1218/     5D1 :                     ;
(1) 1219/     5D1 :                     ; Breaks:
(1) 1220/     5D1 :                     ; b ,de,hl,ix
(1) 1221/     5D1 :                     ; ----------------------------------------
(1) 1222/     5D1 :                     
(1) 1223/     5D1 :                     track_out:
(1) 1224/     5D1 : FD E5               		push	iy
(1) 1225/     5D3 : E1                  		pop	hl
(1) 1226/     5D4 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1227/     5D8 : CF                  		rst	8
(1) 1228/     5D9 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1229/     5DC : 19                  		add	hl,de
(1) 1230/     5DD : 06 1A               		ld	b,MAX_TRKINDX
(1) 1231/     5DF :                     .indx_del:
(1) 1232/     5DF : 7E                  		ld	a,(hl)
(1) 1233/     5E0 : B7                  		or	a
(1) 1234/     5E1 : 28 2A               		jr	z,.nothin
(1) 1235/     5E3 : CF                  		rst	8
(1) 1236/     5E4 : DD E5               		push	ix
(1) 1237/     5E6 : E6 1F               		and	00011111b
(1) 1238/     5E8 : 87                  		add	a,a
(1) 1239/     5E9 : 87                  		add	a,a
(1) 1240/     5EA : 87                  		add	a,a
(1) 1241/     5EB : 5F                  		ld	e,a
(1) 1242/     5EC : CF                  		rst	8
(1) 1243/     5ED : DD 19               		add	ix,de
(1) 1244/     5EF : AF                  		xor	a
(1) 1245/     5F0 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1246/     5F4 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1247/     5F8 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1248/     5FC : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1249/     5FF : CF                  		rst	8
(1) 1250/     600 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1251/     603 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1252/     606 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1253/     609 : DD E1               		pop	ix
(1) 1254/     60B : 77                  		ld	(hl),a
(1) 1255/     60C : 00                  		nop
(1) 1256/     60D :                     .nothin:
(1) 1257/     60D : 23                  		inc	hl
(1) 1258/     60E : 10 CF               		djnz	.indx_del
(1) 1259/     610 : 3E 01               		ld	a,1
(1) 1260/     612 : 32 86 17            		ld	(marsUpd),a
(1) 1261/     615 : C9                  		ret
(1) 1262/     616 :                     
(1) 1263/     616 :                     ; ============================================================
(1) 1264/     616 :                     ; --------------------------------------------------------
(1) 1265/     616 :                     ; Process track channels to the sound chips
(1) 1266/     616 :                     ; --------------------------------------------------------
(1) 1267/     616 :                     
(1) 1268/     616 :                     set_chips:
(1) 1269/     616 : CD 68 0F            		call	get_tick
(1) 1270/     619 :                     	; ** MANUAL BUFF READ **
(1) 1271/     619 : FD 21 C3 16         		ld	iy,trkBuff_0
(1) 1272/     61D : CD 5D 06            		call	tblbuff_read
(1) 1273/     620 : FD 21 02 17         		ld	iy,trkBuff_1
(1) 1274/     624 : CD 5D 06            		call	tblbuff_read
(1) 1275/     627 : CF                  		rst	8
(1) 1276/     628 : FD 21 41 17         		ld	iy,trkBuff_2
(1) 1277/     62C : CD 5D 06            		call	tblbuff_read
(1) 1278/     62F : CD 68 0F            		call	get_tick
(1) 1279/     632 :                     proc_chips:
(1) 1280/     632 : E7                  		rst	20h
(1) 1281/     633 : CF                  		rst	8
(1) 1282/     634 : FD 21 46 1C         		ld	iy,tblPSGN		; PSG Noise
(1) 1283/     638 : CD 2B 08            		call	dtbl_singl
(1) 1284/     63B : CF                  		rst	8
(1) 1285/     63C : FD 21 0E 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1286/     640 : CD 15 08            		call	dtbl_multi
(1) 1287/     643 : CD 68 0F            		call	get_tick
(1) 1288/     646 : FD 21 A0 1B         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1289/     64A : CD 15 08            		call	dtbl_multi
(1) 1290/     64D : CF                  		rst	8
(1) 1291/     64E : FD 21 0E 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1292/     652 : CD 15 08            		call	dtbl_multi
(1) 1293/     655 : CF                  		rst	8
(1) 1294/     656 : FD 21 58 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1295/     65A : C3 15 08            		jp	dtbl_multi
(1) 1296/     65D :                     
(1) 1297/     65D :                     ; ----------------------------------------
(1) 1298/     65D :                     ; Read current track
(1) 1299/     65D :                     ;
(1) 1300/     65D :                     ; iy - Buffer
(1) 1301/     65D :                     tblbuff_read:
(1) 1302/     65D : E7                  		rst	20h			; Refill wave here
(1) 1303/     65E :                     ; 		ld	l,(iy)
(1) 1304/     65E :                     ; 		ld	h,(iy+1)
(1) 1305/     65E : CD 68 0F            		call	get_tick
(1) 1306/     661 : CF                  		rst	8
(1) 1307/     662 :                     ; 		push	hl
(1) 1308/     662 :                     ; 		pop	iy
(1) 1309/     662 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1310/     665 : CB 78               		bit	7,b
(1) 1311/     667 : C8                  		ret	z
(1) 1312/     668 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1313/     669 : FE FF               		cp	-1
(1) 1314/     66B : C2 75 06            		jp	nz,.track_cont
(1) 1315/     66E : CD D1 05            		call	track_out
(1) 1316/     671 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1317/     675 :                     .track_cont:
(1) 1318/     675 : E7                  		rst	20h			; Refill wave
(1) 1319/     676 : FD E5               		push	iy
(1) 1320/     678 : E1                  		pop	hl
(1) 1321/     679 : CF                  		rst	8
(1) 1322/     67A : DD 21 00 1E         		ld	ix,trkChnls
(1) 1323/     67E : 11 25 00            		ld	de,trk_ChnIndx
(1) 1324/     681 : 19                  		add	hl,de
(1) 1325/     682 : FD 7E 17            		ld	a,(iy+trk_MaxChnl)
(1) 1326/     685 : B7                  		or	a
(1) 1327/     686 : 20 02               		jr	nz,.valid
(1) 1328/     688 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1329/     68A :                     .valid:
(1) 1330/     68A : CF                  		rst	8
(1) 1331/     68B : 47                  		ld	b,a
(1) 1332/     68C :                     .next_indx:
(1) 1333/     68C : 7E                  		ld	a,(hl)			; Read index
(1) 1334/     68D : B7                  		or	a
(1) 1335/     68E : 20 09               		jr	nz,.has_indx		; If non-zero: valid
(1) 1336/     690 : C5                  		push	bc			; ** wave sync
(1) 1337/     691 : 06 04               		ld	b,4
(1) 1338/     693 : 10 FE               		djnz	$
(1) 1339/     695 : C1                  		pop	bc			; **
(1) 1340/     696 : CF                  		rst	8
(1) 1341/     697 : 18 1C               		jr	.no_indx
(1) 1342/     699 :                     .has_indx:
(1) 1343/     699 : E6 1F               		and	00011111b
(1) 1344/     69B : 87                  		add	a,a
(1) 1345/     69C : 87                  		add	a,a
(1) 1346/     69D : 87                  		add	a,a
(1) 1347/     69E : CF                  		rst	8
(1) 1348/     69F : 16 00               		ld	d,0
(1) 1349/     6A1 : 5F                  		ld	e,a
(1) 1350/     6A2 : C5                  		push	bc
(1) 1351/     6A3 : E5                  		push	hl
(1) 1352/     6A4 : DD E5               		push	ix
(1) 1353/     6A6 : DD 19               		add	ix,de
(1) 1354/     6A8 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1355/     6AB : E6 0F               		and	00001111b
(1) 1356/     6AD : C4 BD 06            		call	nz,.do_chip		; Call if non-zero
(1) 1357/     6B0 : CF                  		rst	8
(1) 1358/     6B1 : DD E1               		pop	ix
(1) 1359/     6B3 : E1                  		pop	hl
(1) 1360/     6B4 : C1                  		pop	bc
(1) 1361/     6B5 :                     .no_indx:
(1) 1362/     6B5 : 23                  		inc	hl
(1) 1363/     6B6 : 10 D4               		djnz	.next_indx
(1) 1364/     6B8 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1365/     6BC : C9                  		ret
(1) 1366/     6BD :                     
(1) 1367/     6BD :                     ; ----------------------------------------
(1) 1368/     6BD :                     ; iy - Track buffer
(1) 1369/     6BD :                     ; ix - Current channel
(1) 1370/     6BD :                     
(1) 1371/     6BD :                     .do_chip:
(1) 1372/     6BD : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1373/     6C0 : B7                  		or	a
(1) 1374/     6C1 : C8                  		ret	z			; If 0 == stop
(1) 1375/     6C2 : CF                  		rst	8
(1) 1376/     6C3 : 3D                  		dec	a			; inst-1
(1) 1377/     6C4 : E6 7F               		and	01111111b
(1) 1378/     6C6 : 21 7F 1F            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1379/     6C9 : E5                  		push	hl
(1) 1380/     6CA : 07                  		rlca
(1) 1381/     6CB : 07                  		rlca
(1) 1382/     6CC : 07                  		rlca
(1) 1383/     6CD : 47                  		ld	b,a
(1) 1384/     6CE : E6 F8               		and	11111000b
(1) 1385/     6D0 : 4F                  		ld	c,a
(1) 1386/     6D1 : 78                  		ld	a,b
(1) 1387/     6D2 : AF                  		xor	a
(1) 1388/     6D3 : E6 03               		and	00000011b
(1) 1389/     6D5 : CF                  		rst	8
(1) 1390/     6D6 : 47                  		ld	b,a
(1) 1391/     6D7 : EB                  		ex	hl,de
(1) 1392/     6D8 : FD 6E 1F            		ld	l,(iy+trk_RomInst)
(1) 1393/     6DB : FD 66 20            		ld	h,(iy+(trk_RomInst+1))
(1) 1394/     6DE : FD 7E 21            		ld	a,(iy+(trk_RomInst+2))
(1) 1395/     6E1 : 09                  		add	hl,bc
(1) 1396/     6E2 : CE 00               		adc	a,0
(1) 1397/     6E4 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1398/     6E7 : CD 89 0F            		call	readRom		; ** ROM access **
(1) 1399/     6EA : E1                  		pop	hl
(1) 1400/     6EB : E5                  		push	hl			; <-- save hl
(1) 1401/     6EC : CD 06 07            		call	.grab_link
(1) 1402/     6EF : D1                  		pop	de			; --> recover as de
(1) 1403/     6F0 :                     	; hl - current table
(1) 1404/     6F0 :                     	; de - instrument data
(1) 1405/     6F0 : FE FF               		cp	-1			; Found any link?
(1) 1406/     6F2 : C8                  		ret	z
(1) 1407/     6F3 : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1408/     6F4 : 23                  		inc	hl
(1) 1409/     6F5 : 23                  		inc	hl
(1) 1410/     6F6 : 23                  		inc	hl
(1) 1411/     6F7 : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1412/     6FA : 77                  		ld	(hl),a
(1) 1413/     6FB : 01 06 00            		ld	bc,ztbl_InstCach-4	; Move to instr data
(1) 1414/     6FE : 09                  		add	hl,bc
(1) 1415/     6FF : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1416/     700 : 01 08 00            		ld	bc,8
(1) 1417/     703 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1418/     705 : C9                  		ret
(1) 1419/     706 :                     
(1) 1420/     706 :                     ; ----------------------------------------
(1) 1421/     706 :                     ; Search for a linked channel on the
(1) 1422/     706 :                     ; chip table
(1) 1423/     706 :                     ;
(1) 1424/     706 :                     ; Input:
(1) 1425/     706 :                     ; iy - Track buffer
(1) 1426/     706 :                     ; ix - Current channel
(1) 1427/     706 :                     ; hl - Intrument data
(1) 1428/     706 :                     ;
(1) 1429/     706 :                     ; Returns:
(1) 1430/     706 :                     ; hl | Channel table to use
(1) 1431/     706 :                     ;  a | Return value:
(1) 1432/     706 :                     ;       0 | Found
(1) 1433/     706 :                     ;      -1 | Not found
(1) 1434/     706 :                     ; ----------------------------------------
(1) 1435/     706 :                     
(1) 1436/     706 :                     .grab_link:
(1) 1437/     706 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1438/     707 : E6 F0               		and	11110000b		; Filter bits
(1) 1439/     709 : 5F                  		ld	e,a			; e - NEW chip
(1) 1440/     70A : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1441/     70D : E6 F0               		and	11110000b
(1) 1442/     70F : 28 76               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1443/     711 : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1444/     712 : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1445/     714 : CF                  		rst	8
(1) 1446/     715 : 57                  		ld	d,a			; d - Chip to silence
(1) 1447/     716 : D5                  		push	de
(1) 1448/     717 : CD 31 07            		call	.srch_link		; Search OLD link
(1) 1449/     71A : D1                  		pop	de
(1) 1450/     71B : FE FF               		cp	-1
(1) 1451/     71D : 28 03               		jr	z,.dont_res
(1) 1452/     71F : CD EC 0E            		call	tblz_clear
(1) 1453/     722 :                     .dont_res:
(1) 1454/     722 : CF                  		rst	8
(1) 1455/     723 : 18 62               		jr	.new_chip
(1) 1456/     725 :                     .same_link:
(1) 1457/     725 : CD 31 07            		call	.srch_link		; Search link
(1) 1458/     728 : FE FF               		cp	-1
(1) 1459/     72A : C0                  		ret	nz
(1) 1460/     72B : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1461/     72E : CF                  		rst	8
(1) 1462/     72F : 18 56               		jr	.new_chip
(1) 1463/     731 :                     
(1) 1464/     731 :                     ; ----------------------------------------
(1) 1465/     731 :                     ; ** RELINK **
(1) 1466/     731 :                     ; a - Chip to search for
(1) 1467/     731 :                     
(1) 1468/     731 :                     .srch_link:
(1) 1469/     731 : CD F9 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1470/     734 : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1471/     736 : C1                  		pop	bc
(1) 1472/     737 : B7                  		or	a			; Single table?
(1) 1473/     738 : FA 52 07            		jp	m,.singl_link
(1) 1474/     73B :                     .srch_lloop:
(1) 1475/     73B : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1476/     73C : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1477/     73E : 28 43               		jr	z,.refill
(1) 1478/     740 : B9                  		cp	c			; Same link LSB?
(1) 1479/     741 : 20 07               		jr	nz,.invldl
(1) 1480/     743 : 23                  		inc	hl
(1) 1481/     744 : CF                  		rst	8
(1) 1482/     745 : 7E                  		ld	a,(hl)
(1) 1483/     746 : 2B                  		dec	hl
(1) 1484/     747 : B8                  		cp	b			; Same link MSB?
(1) 1485/     748 : 28 16               		jr	z,.reroll
(1) 1486/     74A :                     .invldl:
(1) 1487/     74A : D5                  		push	de
(1) 1488/     74B : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1489/     74E : 19                  		add	hl,de
(1) 1490/     74F : D1                  		pop	de
(1) 1491/     750 : 18 E9               		jr	.srch_lloop
(1) 1492/     752 :                     
(1) 1493/     752 :                     ; ----------------------
(1) 1494/     752 :                     ; PSGN/FM3/FM6
(1) 1495/     752 :                     .singl_link:
(1) 1496/     752 : 23                  		inc	hl			; Read MSB first
(1) 1497/     753 : 7E                  		ld	a,(hl)
(1) 1498/     754 : 2B                  		dec	hl
(1) 1499/     755 : CF                  		rst	8
(1) 1500/     756 : B8                  		cp	b			; MSB match?
(1) 1501/     757 : 20 2A               		jr	nz,.refill
(1) 1502/     759 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1503/     75A : B9                  		cp	c
(1) 1504/     75B : 20 26               		jr	nz,.refill
(1) 1505/     75D : C3 85 07            		jp	.rnot_psg
(1) 1506/     760 :                     
(1) 1507/     760 :                     ; ----------------------------------------
(1) 1508/     760 :                     ; *** Special re-roll check for
(1) 1509/     760 :                     ; listed tables ***
(1) 1510/     760 :                     
(1) 1511/     760 :                     .reroll:
(1) 1512/     760 : E5                  		push	hl
(1) 1513/     761 : 01 03 00            		ld	bc,ztbl_Chip	; <-- fake iy+ztbl_Chip
(1) 1514/     764 : 09                  		add	hl,bc
(1) 1515/     765 : CF                  		rst	8
(1) 1516/     766 : 4E                  		ld	c,(hl)		; c - ID
(1) 1517/     767 : E1                  		pop	hl
(1) 1518/     768 : 7B                  		ld	a,e
(1) 1519/     769 : FE 80               		cp	80h		; PSG?
(1) 1520/     76B : 20 18               		jr	nz,.rnot_psg
(1) 1521/     76D :                     	; Special PSG3/PSGN check
(1) 1522/     76D : 3A F6 1C            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1523/     770 : E6 03               		and	011b
(1) 1524/     772 : FE 03               		cp	011b
(1) 1525/     774 : 20 0F               		jr	nz,.rnot_psg
(1) 1526/     776 : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1527/     777 : FE 02               		cp	2
(1) 1528/     779 : 20 0A               		jr	nz,.rnot_psg
(1) 1529/     77B : CF                  		rst	8
(1) 1530/     77C : D5                  		push	de
(1) 1531/     77D : 16 80               		ld	d,80h		; Force silence
(1) 1532/     77F : CD EC 0E            		call	tblz_clear
(1) 1533/     782 : D1                  		pop	de
(1) 1534/     783 :                     .refill:
(1) 1535/     783 : 18 71               		jr	.set_asfull
(1) 1536/     785 :                     .rnot_psg:
(1) 1537/     785 : AF                  		xor	a
(1) 1538/     786 : C9                  		ret
(1) 1539/     787 :                     
(1) 1540/     787 :                     ; ----------------------------------------
(1) 1541/     787 :                     ; *** NEW CHIP ***
(1) 1542/     787 :                     ; e - Chip to set
(1) 1543/     787 :                     
(1) 1544/     787 :                     .new_chip:
(1) 1545/     787 : 7B                  		ld	a,e			; Read NEW chip
(1) 1546/     788 : B7                  		or	a			; If non-minus, exit.
(1) 1547/     789 : F2 F6 07            		jp	p,.set_asfull
(1) 1548/     78C : CD F9 07            		call	.pick_tbl
(1) 1549/     78F : CF                  		rst	8
(1) 1550/     790 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1551/     793 : B7                  		or	a
(1) 1552/     794 : FA E4 07            		jp	m,.singl_free
(1) 1553/     797 : E5                  		push	hl			; Backup START table
(1) 1554/     798 :                     ; PASS 1
(1) 1555/     798 :                     .srch_free:
(1) 1556/     798 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1557/     799 : FE FF               		cp	-1			; If -1, return -1
(1) 1558/     79B : 28 0B               		jr	z,.pass_2
(1) 1559/     79D : 23                  		inc	hl
(1) 1560/     79E : 46                  		ld	b,(hl)			; Read MSB
(1) 1561/     79F : 2B                  		dec	hl
(1) 1562/     7A0 :                     ; 		nop	; wave sync
(1) 1563/     7A0 :                     ; 		nop
(1) 1564/     7A0 :                     ; 		rst	8
(1) 1565/     7A0 :                     ; 		nop
(1) 1566/     7A0 :                     ; 		nop
(1) 1567/     7A0 : B0                  		or	b
(1) 1568/     7A1 : 28 24               		jr	z,.new_link_z
(1) 1569/     7A3 : CD C0 07            		call	.nextsrch_tbl
(1) 1570/     7A6 : 18 F0               		jr	.srch_free
(1) 1571/     7A8 :                     
(1) 1572/     7A8 :                     ; PASS 2
(1) 1573/     7A8 :                     ; Rewrite mode
(1) 1574/     7A8 :                     .pass_2:
(1) 1575/     7A8 : E1                  		pop	hl
(1) 1576/     7A9 :                     .next_prio:
(1) 1577/     7A9 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1578/     7AA : FE FF               		cp	-1		; If -1, return -1
(1) 1579/     7AC : C8                  		ret	z
(1) 1580/     7AD : 23                  		inc	hl
(1) 1581/     7AE : 23                  		inc	hl
(1) 1582/     7AF : 7E                  		ld	a,(hl)		; Read priority
(1) 1583/     7B0 : 2B                  		dec	hl
(1) 1584/     7B1 : 2B                  		dec	hl
(1) 1585/     7B2 : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1586/     7B3 : 28 16               		jr	z,.new_link_o
(1) 1587/     7B5 : B9                  		cp	c
(1) 1588/     7B6 : 28 13               		jr	z,.new_link_o
(1) 1589/     7B8 : 38 11               		jr	c,.new_link_o		; PRIORITY
(1) 1590/     7BA : CF                  		rst	8
(1) 1591/     7BB : CD C0 07            		call	.nextsrch_tbl
(1) 1592/     7BE : 18 E9               		jr	.next_prio
(1) 1593/     7C0 :                     .nextsrch_tbl:
(1) 1594/     7C0 : D5                  		push	de
(1) 1595/     7C1 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1596/     7C4 : 19                  		add	hl,de
(1) 1597/     7C5 : D1                  		pop	de
(1) 1598/     7C6 :                     ; 		nop	; wave sync
(1) 1599/     7C6 :                     ; 		nop
(1) 1600/     7C6 :                     ; 		rst	8
(1) 1601/     7C6 :                     ; 		nop
(1) 1602/     7C6 :                     ; 		nop
(1) 1603/     7C6 : C9                  		ret
(1) 1604/     7C7 :                     .new_link_z:
(1) 1605/     7C7 : 33                  		inc	sp		; skip backup
(1) 1606/     7C8 : 33                  		inc	sp
(1) 1607/     7C9 : 18 08               		jr	.new_link
(1) 1608/     7CB :                     
(1) 1609/     7CB :                     ; OVERWRITE link
(1) 1610/     7CB :                     .new_link_o:
(1) 1611/     7CB : E5                  		push	hl
(1) 1612/     7CC : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1613/     7CF : CD EC 0E            		call	tblz_clear
(1) 1614/     7D2 : E1                  		pop	hl
(1) 1615/     7D3 :                     ; NEW link
(1) 1616/     7D3 :                     .new_link:
(1) 1617/     7D3 : CF                  		rst	8
(1) 1618/     7D4 : 23                  		inc	hl
(1) 1619/     7D5 : 23                  		inc	hl
(1) 1620/     7D6 :                     ; hl+2
(1) 1621/     7D6 :                     .l_hiprio:
(1) 1622/     7D6 : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1623/     7D9 : DD E5               		push	ix
(1) 1624/     7DB : D1                  		pop	de
(1) 1625/     7DC : 71                  		ld	(hl),c		; Write priority
(1) 1626/     7DD : 2B                  		dec	hl
(1) 1627/     7DE : CF                  		rst	8
(1) 1628/     7DF : 72                  		ld 	(hl),d		; MSB
(1) 1629/     7E0 : 2B                  		dec	hl
(1) 1630/     7E1 : 73                  		ld	(hl),e		; LSB
(1) 1631/     7E2 : AF                  		xor	a		; Return OK
(1) 1632/     7E3 : C9                  		ret
(1) 1633/     7E4 :                     
(1) 1634/     7E4 :                     ; Single slot
(1) 1635/     7E4 :                     ; c - priority
(1) 1636/     7E4 :                     ; e - chip
(1) 1637/     7E4 :                     .singl_free:
(1) 1638/     7E4 : 46                  		ld	b,(hl)
(1) 1639/     7E5 : 23                  		inc	hl
(1) 1640/     7E6 : 7E                  		ld	a,(hl)
(1) 1641/     7E7 : 23                  		inc	hl
(1) 1642/     7E8 : B0                  		or	b
(1) 1643/     7E9 : 28 EB               		jr	z,.l_hiprio
(1) 1644/     7EB : CF                  		rst	8
(1) 1645/     7EC : 7E                  		ld	a,(hl)
(1) 1646/     7ED : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1647/     7EE : 28 E6               		jr	z,.l_hiprio
(1) 1648/     7F0 : B9                  		cp	c
(1) 1649/     7F1 : 28 E3               		jr	z,.l_hiprio
(1) 1650/     7F3 : 38 E1               		jr	c,.l_hiprio		; PRIORITY
(1) 1651/     7F5 : CF                  		rst	8
(1) 1652/     7F6 :                     .set_asfull:
(1) 1653/     7F6 : 3E FF               		ld	a,-1			; Return -1
(1) 1654/     7F8 : C9                  		ret
(1) 1655/     7F9 :                     
(1) 1656/     7F9 :                     ; Pick chip table
(1) 1657/     7F9 :                     ; In:
(1) 1658/     7F9 :                     ;  a - ID
(1) 1659/     7F9 :                     ;
(1) 1660/     7F9 :                     ; Out:
(1) 1661/     7F9 :                     ;  a - Special bit + ID
(1) 1662/     7F9 :                     ;
(1) 1663/     7F9 :                     ; hl - Table
(1) 1664/     7F9 :                     .pick_tbl:
(1) 1665/     7F9 : D5                  		push	de
(1) 1666/     7FA : 0F                  		rrca
(1) 1667/     7FB : 0F                  		rrca
(1) 1668/     7FC : 0F                  		rrca
(1) 1669/     7FD : 0F                  		rrca
(1) 1670/     7FE : E6 07               		and	00000111b
(1) 1671/     800 : 87                  		add	a,a
(1) 1672/     801 : 21 00 1B            		ld	hl,tblList
(1) 1673/     804 : E5                  		push	hl
(1) 1674/     805 : 16 00               		ld	d,0
(1) 1675/     807 : 5F                  		ld	e,a
(1) 1676/     808 : 19                  		add	hl,de
(1) 1677/     809 : 5E                  		ld	e,(hl)
(1) 1678/     80A : 23                  		inc	hl
(1) 1679/     80B : 7E                  		ld	a,(hl)
(1) 1680/     80C : 57                  		ld	d,a
(1) 1681/     80D : E6 80               		and	10000000b
(1) 1682/     80F : CB BA               		res	7,d
(1) 1683/     811 : E1                  		pop	hl
(1) 1684/     812 : 19                  		add	hl,de
(1) 1685/     813 : D1                  		pop	de
(1) 1686/     814 : C9                  		ret
(1) 1687/     815 :                     
(1) 1688/     815 :                     ; ============================================
(1) 1689/     815 :                     ; ----------------------------------------
(1) 1690/     815 :                     ; Process chip using it's table
(1) 1691/     815 :                     ;
(1) 1692/     815 :                     ; iy - table to read
(1) 1693/     815 :                     ; ----------------------------------------
(1) 1694/     815 :                     
(1) 1695/     815 :                     dtbl_multi:
(1) 1696/     815 : FD 7E 00            		ld	a,(iy)
(1) 1697/     818 : FE FF               		cp	-1
(1) 1698/     81A : C8                  		ret	z
(1) 1699/     81B : CD 2B 08            		call	dtbl_singl
(1) 1700/     81E : CF                  		rst	8
(1) 1701/     81F : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1702/     822 : FD 19               		add	iy,de
(1) 1703/     824 : 06 04               		ld	b,4		; ** wave sync ** IMPORTANT
(1) 1704/     826 : 10 FE               		djnz	$
(1) 1705/     828 : CF                  		rst	8
(1) 1706/     829 : 18 EA               		jr	dtbl_multi
(1) 1707/     82B :                     dtbl_singl:
(1) 1708/     82B : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1709/     82E : FD 56 01            		ld	d,(iy+1)
(1) 1710/     831 : 7A                  		ld	a,d		; If no-zero, active
(1) 1711/     832 : B3                  		or	e
(1) 1712/     833 : 20 5D               		jr	nz,.linked
(1) 1713/     835 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1714/     838 : B7                  		or	a
(1) 1715/     839 : F0                  		ret	p		; Return if not.
(1) 1716/     83A : CF                  		rst	8
(1) 1717/     83B : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1718/     83F :                     
(1) 1719/     83F :                     ; ----------------------------------------
(1) 1720/     83F :                     ; chip-silence request
(1) 1721/     83F :                     ; iy - Table
(1) 1722/     83F :                     
(1) 1723/     83F : 06 00               		ld	b,0
(1) 1724/     841 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1725/     844 : E6 F0               		and	11110000b
(1) 1726/     846 : FE 80               		cp	80h
(1) 1727/     848 : 28 1E               		jr	z,.siln_psg
(1) 1728/     84A : FE 90               		cp	90h
(1) 1729/     84C : 28 16               		jr	z,.siln_psg_n
(1) 1730/     84E : FE A0               		cp	0A0h
(1) 1731/     850 : 28 3D               		jr	z,.siln_fm
(1) 1732/     852 : FE B0               		cp	0B0h
(1) 1733/     854 : 28 39               		jr	z,.siln_fm
(1) 1734/     856 : CF                  		rst	8
(1) 1735/     857 : FE C0               		cp	0C0h
(1) 1736/     859 : 28 31               		jr	z,.siln_dac
(1) 1737/     85B : FE D0               		cp	0D0h
(1) 1738/     85D : 28 0F               		jr	z,.siln_pcm
(1) 1739/     85F : FE E0               		cp	0E0h
(1) 1740/     861 : 28 1C               		jr	z,.siln_pwm
(1) 1741/     863 : C9                  		ret
(1) 1742/     864 :                     .siln_psg_n:
(1) 1743/     864 : AF                  		xor	a
(1) 1744/     865 : 32 F6 1C            		ld	(psgHatMode),a
(1) 1745/     868 :                     .siln_psg:
(1) 1746/     868 : CF                  		rst	8
(1) 1747/     869 : 21 03 15            		ld	hl,psgcom
(1) 1748/     86C : 18 1A               		jr	.rcyl_com
(1) 1749/     86E :                     
(1) 1750/     86E :                     ; --------------------------------
(1) 1751/     86E :                     
(1) 1752/     86E :                     .siln_pcm:
(1) 1753/     86E : 3E 01               		ld	a,1
(1) 1754/     870 : 32 87 17            		ld	(mcdUpd),a
(1) 1755/     873 : CF                  		rst	8
(1) 1756/     874 : 21 AB 14            		ld	hl,pcmcom+32
(1) 1757/     877 : 09                  		add	hl,bc
(1) 1758/     878 : 36 FF               		ld	(hl),-1
(1) 1759/     87A : 21 8B 14            		ld	hl,pcmcom
(1) 1760/     87D : 18 09               		jr	.rcyl_com
(1) 1761/     87F :                     .siln_pwm:
(1) 1762/     87F : 3E 01               		ld	a,1
(1) 1763/     881 : 32 86 17            		ld	(marsUpd),a
(1) 1764/     884 : CF                  		rst	8
(1) 1765/     885 : 21 CB 14            		ld	hl,pwmcom
(1) 1766/     888 :                     .rcyl_com:
(1) 1767/     888 : 09                  		add	hl,bc
(1) 1768/     889 : 36 04               		ld	(hl),100b	; key-cut
(1) 1769/     88B : C9                  		ret
(1) 1770/     88C :                     
(1) 1771/     88C :                     ; --------------------------------
(1) 1772/     88C :                     
(1) 1773/     88C :                     .siln_dac:
(1) 1774/     88C : CD D8 11            		call	dac_off
(1) 1775/     88F :                     .siln_fm:
(1) 1776/     88F : C3 92 0A            		jp	.fm_keyoff
(1) 1777/     892 :                     ; 		call	.fm_keyoff
(1) 1778/     892 :                     ; 		jp	.fm_tloff
(1) 1779/     892 :                     
(1) 1780/     892 :                     ; ----------------------------------------
(1) 1781/     892 :                     ; Process channel now
(1) 1782/     892 :                     ; iy - Table
(1) 1783/     892 :                     ; ix - Tracker channel
(1) 1784/     892 :                     .linked:
(1) 1785/     892 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1786/     893 : 47                  		ld	b,a		; b - flags to check
(1) 1787/     894 : E6 0F               		and	00001111b	; evin flags?
(1) 1788/     896 : C8                  		ret	z
(1) 1789/     897 : 78                  		ld	a,b
(1) 1790/     898 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1791/     89A : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1792/     89B : FD E5               		push	iy		; table+10h instrment data
(1) 1793/     89D : D5                  		push	de
(1) 1794/     89E : DD E1               		pop	ix
(1) 1795/     8A0 : E1                  		pop	hl
(1) 1796/     8A1 : 11 0A 00            		ld	de,ztbl_InstCach	; Go to stored inst data
(1) 1797/     8A4 : 19                  		add	hl,de
(1) 1798/     8A5 :                     	; --------------------------------
(1) 1799/     8A5 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1800/     8A5 :                     	; iy - Our chip table
(1) 1801/     8A5 :                     	; ix - Track channel
(1) 1802/     8A5 :                     	; hl - Intrument data
(1) 1803/     8A5 : 78                  		ld	a,b		; Note and/or Inst?
(1) 1804/     8A6 : E6 03               		and	0011b
(1) 1805/     8A8 : C4 D3 08            		call	nz,.reset_effc	; Reset effects
(1) 1806/     8AB : CB 50               		bit	2,b		; Volume
(1) 1807/     8AD : C4 DA 0C            		call	nz,.volu
(1) 1808/     8B0 : CB 40               		bit	0,b		; Note
(1) 1809/     8B2 : C4 98 0E            		call	nz,.note
(1) 1810/     8B5 : CB 48               		bit	1,b		; Intrument
(1) 1811/     8B7 : C4 E3 0C            		call	nz,.inst
(1) 1812/     8BA : CF                  		rst	8
(1) 1813/     8BB : CB 58               		bit	3,b		; Effect
(1) 1814/     8BD : C4 EF 0B            		call	nz,.effc
(1) 1815/     8C0 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1816/     8C1 : E6 70               		and	01110000b	; Filter bits
(1) 1817/     8C3 : 0F                  		rrca
(1) 1818/     8C4 : 0F                  		rrca
(1) 1819/     8C5 : 0F                  		rrca
(1) 1820/     8C6 : CF                  		rst	8
(1) 1821/     8C7 : 16 00               		ld	d,0
(1) 1822/     8C9 : 5F                  		ld	e,a
(1) 1823/     8CA : 21 E0 08            		ld	hl,.mk_list
(1) 1824/     8CD : 19                  		add	hl,de
(1) 1825/     8CE : 7E                  		ld	a,(hl)
(1) 1826/     8CF : 23                  		inc	hl
(1) 1827/     8D0 : 66                  		ld	h,(hl)
(1) 1828/     8D1 : 6F                  		ld	l,a
(1) 1829/     8D2 : E9                  		jp	(hl)
(1) 1830/     8D3 :                     .reset_effc:
(1) 1831/     8D3 : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 1832/     8D7 : FD 36 08 00         		ld	(iy+ztbl_VolSlide),0
(1) 1833/     8DB : FD 36 07 00         		ld	(iy+ztbl_Volume),0
(1) 1834/     8DF : C9                  		ret
(1) 1835/     8E0 :                     
(1) 1836/     8E0 :                     ; --------------------------------
(1) 1837/     8E0 :                     .mk_list:
(1) 1838/     8E0 : EE 08               		dw .mk_psg
(1) 1839/     8E2 : EE 08               		dw .mk_psg
(1) 1840/     8E4 : 9A 09               		dw .mk_fm
(1) 1841/     8E6 : 25 0A               		dw .mk_fm_sp
(1) 1842/     8E8 : 7B 0B               		dw .mk_dac
(1) 1843/     8EA : CF 0B               		dw .mk_pcm
(1) 1844/     8EC : D0 0B               		dw .mk_pwm
(1) 1845/     8EE :                     
(1) 1846/     8EE :                     ; --------------------------------
(1) 1847/     8EE :                     ; PSG and PSGN
(1) 1848/     8EE :                     ; --------------------------------
(1) 1849/     8EE :                     
(1) 1850/     8EE :                     .mk_psg:
(1) 1851/     8EE : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Note
(1) 1852/     8F1 : DD E5               		push	ix			; * Save ix
(1) 1853/     8F3 : CF                  		rst	8
(1) 1854/     8F4 : DD 21 03 15         		ld	ix,psgcom		; ix - psgcom
(1) 1855/     8F8 : 16 00               		ld	d,0
(1) 1856/     8FA : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1857/     8FD : DD 19               		add	ix,de			; Get com index
(1) 1858/     8FF : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1859/     900 : E6 03               		and	0011b
(1) 1860/     902 : 28 46               		jr	z,.psgc_proc		; Process only
(1) 1861/     904 : 79                  		ld	a,c			; c - Note
(1) 1862/     905 : FE FE               		cp	-2			; Key cut?
(1) 1863/     907 : 28 31               		jr	z,.kycut_psg
(1) 1864/     909 : FE FF               		cp	-1			; Key off?
(1) 1865/     90B : 28 21               		jr	z,.kyoff_psg
(1) 1866/     90D : DD 36 00 01         		ld	(ix+COM),001b		; Set Key ON
(1) 1867/     911 : 7B                  		ld	a,e			; a - Channel 0-3
(1) 1868/     912 : 11 00 00            		ld	de,0			; Clear de
(1) 1869/     915 : FE 03               		cp	3			; NOISE channel?
(1) 1870/     917 : 20 0D               		jr	nz,.not_ns
(1) 1871/     919 : 3A F6 1C            		ld	a,(psgHatMode)		; Tone 3?
(1) 1872/     91C : E6 03               		and	011b
(1) 1873/     91E : FE 03               		cp	011b
(1) 1874/     920 : C2 6B 09            		jp	nz,.psg_keyon		; Normal
(1) 1875/     923 : 11 18 00            		ld	de,12*2			; Add octave to freq
(1) 1876/     926 :                     .not_ns:
(1) 1877/     926 : CD 86 09            		call	.psg_getfreq
(1) 1878/     929 : 18 26               		jr	.psgc_keyon
(1) 1879/     92B :                     
(1) 1880/     92B :                     ; --------------------------------
(1) 1881/     92B :                     ; -1
(1) 1882/     92B :                     .kyoff_psgn:
(1) 1883/     92B : CD 43 09            		call	.kypsgn_hatoff
(1) 1884/     92E :                     .kyoff_psg:
(1) 1885/     92E : DD 36 00 02         		ld	(ix),010b		; Write key off
(1) 1886/     932 : DD E1               		pop	ix			; * Restore ix
(1) 1887/     934 : C3 E5 0E            		jp	.chnl_ulnkoff
(1) 1888/     937 :                     
(1) 1889/     937 :                     ; --------------------------------
(1) 1890/     937 :                     ; -2
(1) 1891/     937 :                     .kycut_psgn:
(1) 1892/     937 : CD 43 09            		call	.kypsgn_hatoff
(1) 1893/     93A :                     .kycut_psg:
(1) 1894/     93A : DD 36 00 04         		ld	(ix),100b		; Write key cut
(1) 1895/     93E : DD E1               		pop	ix			; * Restore ix
(1) 1896/     940 : C3 E5 0E            		jp	.chnl_ulnkcut
(1) 1897/     943 :                     
(1) 1898/     943 :                     
(1) 1899/     943 :                     .kypsgn_hatoff:
(1) 1900/     943 : 3E 00               		ld	a,000b
(1) 1901/     945 : 32 F6 1C            		ld	(psgHatMode),a		; ** GLOBAL SETTING
(1) 1902/     948 : CF                  		rst	8
(1) 1903/     949 : C9                  		ret
(1) 1904/     94A :                     
(1) 1905/     94A :                     ; --------------------------------
(1) 1906/     94A :                     ; hl - current freq
(1) 1907/     94A :                     ; ix - psgcom
(1) 1908/     94A :                     ; b - flags
(1) 1909/     94A :                     
(1) 1910/     94A :                     .psgc_proc:
(1) 1911/     94A : CF                  		rst	8
(1) 1912/     94B : DD 6E 1C            		ld	l,(ix+DTL)		; Read saved freq
(1) 1913/     94E : DD 66 20            		ld	h,(ix+DTH)
(1) 1914/     951 :                     .psgc_keyon:
(1) 1915/     951 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1916/     954 : B7                  		or	a
(1) 1917/     955 : CA 65 09            		jp	z,.no_req
(1) 1918/     958 : ED 44               		neg	a
(1) 1919/     95A : 5F                  		ld	e,a
(1) 1920/     95B :                     ; 		ld	c,a
(1) 1921/     95B : AF                  		xor	a
(1) 1922/     95C : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 1923/     95F : 3F                  		ccf
(1) 1924/     960 : CB 23               		sla	e
(1) 1925/     962 : 9F                  		sbc	a,a
(1) 1926/     963 : 57                  		ld	d,a
(1) 1927/     964 : 19                  		add	hl,de
(1) 1928/     965 :                     .no_req:
(1) 1929/     965 : DD 75 1C            		ld	(ix+DTL),l
(1) 1930/     968 : DD 74 20            		ld	(ix+DTH),h
(1) 1931/     96B :                     .psg_keyon:
(1) 1932/     96B : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 1933/     96E : 87                  		add	a,a
(1) 1934/     96F : 5F                  		ld	e,a
(1) 1935/     970 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1936/     973 : 93                  		sub	a,e
(1) 1937/     974 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1938/     977 : ED 44               		neg	a
(1) 1939/     979 : CF                  		rst	8
(1) 1940/     97A : 87                  		add	a,a
(1) 1941/     97B : 87                  		add	a,a
(1) 1942/     97C : 30 02               		jr	nc,.vmuch
(1) 1943/     97E : 3E FF               		ld	a,-1
(1) 1944/     980 :                     .vmuch:
(1) 1945/     980 : DD 77 30            		ld	(ix+MVOL),a
(1) 1946/     983 : DD E1               		pop	ix			; * Restore ix
(1) 1947/     985 : C9                  		ret
(1) 1948/     986 :                     
(1) 1949/     986 :                     ; --------------------------------
(1) 1950/     986 :                     ; de - increment
(1) 1951/     986 :                     
(1) 1952/     986 :                     .psg_getfreq:
(1) 1953/     986 : 21 C1 12            		ld	hl,psgFreq_List-(36*2)
(1) 1954/     989 : 19                  		add	hl,de
(1) 1955/     98A : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; de - note*2
(1) 1956/     98D : 19                  		add	hl,de
(1) 1957/     98E : 7E                  		ld	a,(hl)
(1) 1958/     98F : 23                  		inc	hl
(1) 1959/     990 : 66                  		ld	h,(hl)
(1) 1960/     991 : 6F                  		ld	l,a
(1) 1961/     992 : 3A 3E 00            		ld	a,(palMode)
(1) 1962/     995 : B7                  		or	a
(1) 1963/     996 : 28 01               		jr	z,.fnot_pal
(1) 1964/     998 : 2B                  		dec	hl
(1) 1965/     999 :                     .fnot_pal:
(1) 1966/     999 : C9                  		ret
(1) 1967/     99A :                     
(1) 1968/     99A :                     ; --------------------------------
(1) 1969/     99A :                     ; FM
(1) 1970/     99A :                     ; --------------------------------
(1) 1971/     99A :                     
(1) 1972/     99A :                     .mk_fm:
(1) 1973/     99A : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - YM key
(1) 1974/     99D : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1975/     99E : E6 03               		and	0011b
(1) 1976/     9A0 : 28 30               		jr	z,.mkfm_proc		; Process only
(1) 1977/     9A2 : DD 7E 02            		ld	a,(ix+chnl_Note)	; Get IT note
(1) 1978/     9A5 : FE FE               		cp	-2			; Key-cut?
(1) 1979/     9A7 : CA 78 0A            		jp	z,.fm_cut
(1) 1980/     9AA : FE FF               		cp	-1			; Key-off?
(1) 1981/     9AC : CA 72 0A            		jp	z,.fm_off
(1) 1982/     9AF : CF                  		rst	8
(1) 1983/     9B0 : 79                  		ld	a,c
(1) 1984/     9B1 : FE 06               		cp	6			; Check FM6
(1) 1985/     9B3 : 20 05               		jr	nz,.not_dac
(1) 1986/     9B5 : CD D8 11            		call	dac_off			; Turn DAC off
(1) 1987/     9B8 : 18 15               		jr	.not_dspc
(1) 1988/     9BA :                     .not_dac:
(1) 1989/     9BA : FE 02               		cp	2			; Check FM3
(1) 1990/     9BC : 20 11               		jr	nz,.not_dspc
(1) 1991/     9BE : 3A F7 1C            		ld	a,(fmSpecial)		; FM3 Special active?
(1) 1992/     9C1 : B7                  		or	a
(1) 1993/     9C2 : 28 0B               		jr	z,.not_dspc
(1) 1994/     9C4 : 3E 00               		ld	a,0
(1) 1995/     9C6 : 32 F7 1C            		ld	(fmSpecial),a
(1) 1996/     9C9 : 11 00 27            		ld	de,2700h		; Turn FM3 Special OFF
(1) 1997/     9CC : CD AD 11            		call	fm_send_1
(1) 1998/     9CF :                     .not_dspc:
(1) 1999/     9CF : CD 92 0A            		call	.fm_keyoff		; Turn FM keys off
(1) 2000/     9D2 :                     .mkfm_proc:
(1) 2001/     9D2 : CD D8 09            		call	.mkfm_freq
(1) 2002/     9D5 : C3 B1 0A            		jp	.mkfm_set		; Volume
(1) 2003/     9D8 :                     
(1) 2004/     9D8 :                     ; --------------------------------
(1) 2005/     9D8 :                     ; Read FM freq
(1) 2006/     9D8 :                     
(1) 2007/     9D8 :                     .mkfm_freq:
(1) 2008/     9D8 : C5                  		push	bc
(1) 2009/     9D9 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 2010/     9DC : 47                  		ld	b,a
(1) 2011/     9DD : E6 1F               		and	00011111b
(1) 2012/     9DF : 5F                  		ld	e,a
(1) 2013/     9E0 : 16 00               		ld	d,0
(1) 2014/     9E2 : 21 F1 12            		ld	hl,fmFreq_List
(1) 2015/     9E5 : 19                  		add	hl,de
(1) 2016/     9E6 : 7E                  		ld	a,(hl)
(1) 2017/     9E7 : CF                  		rst	8
(1) 2018/     9E8 : 23                  		inc	hl
(1) 2019/     9E9 : 66                  		ld	h,(hl)
(1) 2020/     9EA : 6F                  		ld	l,a			; hl - Current FM freq
(1) 2021/     9EB : 3A 3E 00            		ld	a,(palMode)		; PAL speed check
(1) 2022/     9EE : B7                  		or	a
(1) 2023/     9EF : 28 04               		jr	z,.not_pal
(1) 2024/     9F1 : 11 04 00            		ld	de,4			; freq + 4
(1) 2025/     9F4 : 19                  		add	hl,de
(1) 2026/     9F5 :                     .not_pal:
(1) 2027/     9F5 : 78                  		ld	a,b
(1) 2028/     9F6 : E6 E0               		and	11100000b
(1) 2029/     9F8 : 0F                  		rrca
(1) 2030/     9F9 : 0F                  		rrca
(1) 2031/     9FA : B4                  		or	h
(1) 2032/     9FB : 67                  		ld	h,a
(1) 2033/     9FC : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; Get pitchbend effect
(1) 2034/     9FF : CF                  		rst	8
(1) 2035/     A00 : AF                  		xor	a			; clear high
(1) 2036/     A01 : 3F                  		ccf				; clear carry
(1) 2037/     A02 : CB 23               		sla	e			; pitchbend << 2
(1) 2038/     A04 : CB 23               		sla	e
(1) 2039/     A06 : 9F                  		sbc	a,a			; get carry MSB
(1) 2040/     A07 : 57                  		ld	d,a
(1) 2041/     A08 : 19                  		add	hl,de			; Pitchbend the freq
(1) 2042/     A09 : CD 0E 0A            		call	.fm_setfreq
(1) 2043/     A0C : C1                  		pop	bc
(1) 2044/     A0D :                     .nofm_note:
(1) 2045/     A0D : C9                  		ret
(1) 2046/     A0E :                     
(1) 2047/     A0E :                     ; --------------------------------
(1) 2048/     A0E :                     
(1) 2049/     A0E :                     ; c - KeyID
(1) 2050/     A0E :                     .fm_setfreq:
(1) 2051/     A0E : 79                  		ld	a,c
(1) 2052/     A0F : E6 03               		and	011b
(1) 2053/     A11 : F6 A4               		or	0A4h
(1) 2054/     A13 : 57                  		ld	d,a
(1) 2055/     A14 : 5C                  		ld	e,h
(1) 2056/     A15 : CF                  		rst	8
(1) 2057/     A16 : CD A9 11            		call	fm_autoreg
(1) 2058/     A19 : 79                  		ld	a,c
(1) 2059/     A1A : E6 03               		and	011b
(1) 2060/     A1C : F6 A0               		or	0A0h
(1) 2061/     A1E : 57                  		ld	d,a
(1) 2062/     A1F : 5D                  		ld	e,l
(1) 2063/     A20 : CD A9 11            		call	fm_autoreg
(1) 2064/     A23 : CF                  		rst	8
(1) 2065/     A24 : C9                  		ret
(1) 2066/     A25 :                     
(1) 2067/     A25 :                     ; --------------------------------
(1) 2068/     A25 :                     ; FM3 special
(1) 2069/     A25 :                     ; --------------------------------
(1) 2070/     A25 :                     
(1) 2071/     A25 :                     .mk_fm_sp:
(1) 2072/     A25 : 0E 02               		ld	c,010b			; ** FM3 special ID
(1) 2073/     A27 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 2074/     A28 : E6 03               		and	0011b
(1) 2075/     A2A : CA B1 0A            		jp	z,.mkfm_set		; Process only
(1) 2076/     A2D : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2077/     A30 : FE FE               		cp	-2
(1) 2078/     A32 : CA 78 0A            		jp	z,.fm_cut
(1) 2079/     A35 : FE FF               		cp	-1
(1) 2080/     A37 : CA 72 0A            		jp	z,.fm_off
(1) 2081/     A3A : CD 92 0A            		call	.fm_keyoff
(1) 2082/     A3D : CF                  		rst	8
(1) 2083/     A3E : 21 8F 15            		ld	hl,fmcach_3		; DIRECT point to FM3 data
(1) 2084/     A41 : 11 20 00            		ld	de,20h			; point to regs
(1) 2085/     A44 : 19                  		add	hl,de
(1) 2086/     A45 : DD E5               		push	ix
(1) 2087/     A47 : DD 21 6A 0A         		ld	ix,.this_regs
(1) 2088/     A4B : 06 08               		ld	b,8
(1) 2089/     A4D :                     .wr_spc:
(1) 2090/     A4D : DD 56 00            		ld	d,(ix)			; Manually write the FM3 freqs
(1) 2091/     A50 : 5E                  		ld	e,(hl)
(1) 2092/     A51 : CD AD 11            		call	fm_send_1
(1) 2093/     A54 : CF                  		rst	8
(1) 2094/     A55 : 23                  		inc	hl
(1) 2095/     A56 : DD 23               		inc	ix
(1) 2096/     A58 : 10 F3               		djnz	.wr_spc
(1) 2097/     A5A : DD E1               		pop	ix
(1) 2098/     A5C : 11 40 27            		ld	de,2740h		; Turn FM3 Special mode
(1) 2099/     A5F : CD AD 11            		call	fm_send_1
(1) 2100/     A62 : 3E 01               		ld	a,1
(1) 2101/     A64 : 32 F7 1C            		ld	(fmSpecial),a
(1) 2102/     A67 : C3 B1 0A            		jp	.mkfm_set
(1) 2103/     A6A :                     .this_regs:
(1) 2104/     A6A : AD A9               		db 0ADh,0A9h
(1) 2105/     A6C : AC A8               		db 0ACh,0A8h
(1) 2106/     A6E : AE AA               		db 0AEh,0AAh
(1) 2107/     A70 : A6 A2               		db 0A6h,0A2h
(1) 2108/     A72 :                     
(1) 2109/     A72 :                     ; ----------------------------------------
(1) 2110/     A72 :                     
(1) 2111/     A72 :                     .fm_off:
(1) 2112/     A72 : CD 92 0A            		call	.fm_keyoff
(1) 2113/     A75 : C3 E5 0E            		jp	.chnl_ulnkoff
(1) 2114/     A78 :                     .fm_cut:
(1) 2115/     A78 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2116/     A7B : 87                  		add	a,a
(1) 2117/     A7C : 87                  		add	a,a
(1) 2118/     A7D : 21 2F 16            		ld	hl,fmlist_rsave
(1) 2119/     A80 : 16 00               		ld	d,0
(1) 2120/     A82 : 5F                  		ld	e,a
(1) 2121/     A83 : 19                  		add	hl,de
(1) 2122/     A84 : 36 00               		ld	(hl),0
(1) 2123/     A86 : 23                  		inc	hl
(1) 2124/     A87 : 36 00               		ld	(hl),0
(1) 2125/     A89 : CD 92 0A            		call	.fm_keyoff
(1) 2126/     A8C : CD 9A 0A            		call	.fm_tloff
(1) 2127/     A8F : C3 E5 0E            		jp	.chnl_ulnkcut
(1) 2128/     A92 :                     
(1) 2129/     A92 :                     ; ----------------------------------------
(1) 2130/     A92 :                     
(1) 2131/     A92 :                     .fm_keyoff:
(1) 2132/     A92 : 16 28               		ld	d,28h
(1) 2133/     A94 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2134/     A97 : C3 AD 11            		jp	fm_send_1
(1) 2135/     A9A :                     .fm_tloff:
(1) 2136/     A9A : 06 04               		ld	b,4
(1) 2137/     A9C : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2138/     A9F : 79                  		ld	a,c
(1) 2139/     AA0 : E6 03               		and	011b
(1) 2140/     AA2 : F6 40               		or	40h		; TL regs
(1) 2141/     AA4 : 1E 7F               		ld	e,7Fh
(1) 2142/     AA6 :                     .tl_down:
(1) 2143/     AA6 : 57                  		ld	d,a
(1) 2144/     AA7 :                     		; e - 7Fh
(1) 2145/     AA7 : CD A9 11            		call	fm_autoreg
(1) 2146/     AAA : CF                  		rst	8
(1) 2147/     AAB : 7A                  		ld	a,d
(1) 2148/     AAC : C6 04               		add	a,4
(1) 2149/     AAE : 10 F6               		djnz	.tl_down
(1) 2150/     AB0 : C9                  		ret
(1) 2151/     AB1 :                     
(1) 2152/     AB1 :                     ; ----------------------------------------
(1) 2153/     AB1 :                     
(1) 2154/     AB1 :                     .mkfm_set:
(1) 2155/     AB1 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2156/     AB4 : CD 6B 0B            		call	.get_fmcach
(1) 2157/     AB7 : 11 1C 00            		ld	de,1Ch			; Go to last regs
(1) 2158/     ABA : 19                  		add	hl,de
(1) 2159/     ABB : 4E                  		ld	c,(hl)			; c - 0B0h from here
(1) 2160/     ABC : E5                  		push	hl			; Save point
(1) 2161/     ABD : 11 E8 FF            		ld	de,-18h			; <-- backwards relocate to TLs
(1) 2162/     AC0 : 19                  		add	hl,de
(1) 2163/     AC1 : CF                  		rst	8
(1) 2164/     AC2 :                     ; d - 40h+
(1) 2165/     AC2 :                     ; hl - TL data
(1) 2166/     AC2 :                     ; .mkfm_set:
(1) 2167/     AC2 : C5                  		push	bc
(1) 2168/     AC3 : E5                  		push	hl
(1) 2169/     AC4 : 21 63 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2170/     AC7 : 79                  		ld	a,c			; Read 0B0h copy
(1) 2171/     AC8 : E6 07               		and	0111b
(1) 2172/     ACA : 16 00               		ld	d,0
(1) 2173/     ACC : 5F                  		ld	e,a
(1) 2174/     ACD : 19                  		add	hl,de
(1) 2175/     ACE : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2176/     AD1 : E6 03               		and	011b
(1) 2177/     AD3 : F6 40               		or	40h			; TL registers
(1) 2178/     AD5 : 57                  		ld	d,a
(1) 2179/     AD6 : CF                  		rst	8
(1) 2180/     AD7 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2181/     ADA : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2182/     ADD : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2183/     AE0 : 4F                  		ld	c,a			; c - Current Volume
(1) 2184/     AE1 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2185/     AE2 : E1                  		pop	hl
(1) 2186/     AE3 : CB 08               		rrc	b			; OP1
(1) 2187/     AE5 : DC 51 0B            		call	c,.write_tl
(1) 2188/     AE8 : 23                  		inc	hl
(1) 2189/     AE9 : 14                  		inc	d
(1) 2190/     AEA : 14                  		inc	d
(1) 2191/     AEB : CF                  		rst	8
(1) 2192/     AEC : 14                  		inc	d
(1) 2193/     AED : 14                  		inc	d
(1) 2194/     AEE : CB 08               		rrc	b			; OP2
(1) 2195/     AF0 : DC 51 0B            		call	c,.write_tl
(1) 2196/     AF3 : 23                  		inc	hl
(1) 2197/     AF4 : 14                  		inc	d
(1) 2198/     AF5 : 14                  		inc	d
(1) 2199/     AF6 : 14                  		inc	d
(1) 2200/     AF7 : 14                  		inc	d
(1) 2201/     AF8 : CB 08               		rrc	b			; OP3
(1) 2202/     AFA : DC 51 0B            		call	c,.write_tl
(1) 2203/     AFD : 23                  		inc	hl
(1) 2204/     AFE : CF                  		rst	8
(1) 2205/     AFF : 14                  		inc	d
(1) 2206/     B00 : 14                  		inc	d
(1) 2207/     B01 : 14                  		inc	d
(1) 2208/     B02 : 14                  		inc	d
(1) 2209/     B03 : CB 08               		rrc	b			; OP4
(1) 2210/     B05 : DC 51 0B            		call	c,.write_tl
(1) 2211/     B08 : 23                  		inc	hl
(1) 2212/     B09 : 14                  		inc	d
(1) 2213/     B0A : 14                  		inc	d
(1) 2214/     B0B : 14                  		inc	d
(1) 2215/     B0C : 14                  		inc	d
(1) 2216/     B0D : CF                  		rst	8
(1) 2217/     B0E : C1                  		pop	bc
(1) 2218/     B0F : E1                  		pop	hl			; Restore point
(1) 2219/     B10 : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; 0B0h algorithm
(1) 2220/     B13 : 7E                  		ld	a,(hl)
(1) 2221/     B14 : 23                  		inc	hl
(1) 2222/     B15 : 5F                  		ld	e,a
(1) 2223/     B16 : 79                  		ld	a,c
(1) 2224/     B17 : E6 03               		and	011b
(1) 2225/     B19 : F6 B0               		or	0B0h
(1) 2226/     B1B : 57                  		ld	d,a
(1) 2227/     B1C : CD A9 11            		call	fm_autoreg		; Write algorithm
(1) 2228/     B1F : CF                  		rst	8
(1) 2229/     B20 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2230/     B23 : 2F                  		cpl				; REVERSE bits
(1) 2231/     B24 : E6 30               		and	00110000b
(1) 2232/     B26 : 07                  		rlca				; << 2
(1) 2233/     B27 : 07                  		rlca
(1) 2234/     B28 : 5F                  		ld	e,a			; save as e
(1) 2235/     B29 : 7E                  		ld	a,(hl)			; 0B4h %00aa0ppp
(1) 2236/     B2A : 23                  		inc	hl
(1) 2237/     B2B : E6 3F               		and	00111111b
(1) 2238/     B2D : B3                  		or	e			; Merge panning
(1) 2239/     B2E : 5F                  		ld	e,a
(1) 2240/     B2F : 79                  		ld	a,c
(1) 2241/     B30 : CF                  		rst	8
(1) 2242/     B31 : E6 03               		and	011b
(1) 2243/     B33 : F6 B4               		or	0B4h
(1) 2244/     B35 : 57                  		ld	d,a
(1) 2245/     B36 : CD A9 11            		call	fm_autoreg
(1) 2246/     B39 : 7E                  		ld	a,(hl)			; 022h
(1) 2247/     B3A : 23                  		inc	hl
(1) 2248/     B3B : CF                  		rst	8
(1) 2249/     B3C : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2250/     B3E : 28 06               		jr	z,.no_lfo
(1) 2251/     B40 : 5F                  		ld	e,a
(1) 2252/     B41 : 16 22               		ld	d,22h
(1) 2253/     B43 : CD AD 11            		call	fm_send_1
(1) 2254/     B46 :                     .no_lfo:
(1) 2255/     B46 : CF                  		rst	8
(1) 2256/     B47 : 7E                  		ld	a,(hl)			; 028h
(1) 2257/     B48 : E6 F0               		and	11110000b
(1) 2258/     B4A : B1                  		or	c			; Merge FM channel
(1) 2259/     B4B : 5F                  		ld	e,a
(1) 2260/     B4C : 16 28               		ld	d,28h
(1) 2261/     B4E : C3 AD 11            		jp	fm_send_1		; Set keys
(1) 2262/     B51 :                     
(1) 2263/     B51 :                     .write_tl:
(1) 2264/     B51 : 7E                  		ld	a,(hl)
(1) 2265/     B52 : 91                  		sub	a,c			; reg - volume
(1) 2266/     B53 : F2 58 0B            		jp	p,.keep_tlmx
(1) 2267/     B56 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2268/     B58 :                     .keep_tlmx:
(1) 2269/     B58 : C5                  		push	bc
(1) 2270/     B59 : 5F                  		ld	e,a
(1) 2271/     B5A : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2272/     B5D : CD A9 11            		call	fm_autoreg
(1) 2273/     B60 : CF                  		rst	8
(1) 2274/     B61 : C1                  		pop	bc
(1) 2275/     B62 : C9                  		ret
(1) 2276/     B63 :                     ; Jump carry list
(1) 2277/     B63 :                     .fm_cindx:
(1) 2278/     B63 : 08                  		db 1000b
(1) 2279/     B64 : 08                  		db 1000b
(1) 2280/     B65 : 08                  		db 1000b
(1) 2281/     B66 : 08                  		db 1000b
(1) 2282/     B67 : 0C                  		db 1100b
(1) 2283/     B68 : 0E                  		db 1110b
(1) 2284/     B69 : 0E                  		db 1110b
(1) 2285/     B6A : 0F                  		db 1111b
(1) 2286/     B6B :                     
(1) 2287/     B6B :                     ; --------------------------------
(1) 2288/     B6B :                     ; Input:
(1) 2289/     B6B :                     ; a - FM id (0-2,4-6)
(1) 2290/     B6B :                     ;
(1) 2291/     B6B :                     ; Ouput:
(1) 2292/     B6B :                     ; hl - instrument data
(1) 2293/     B6B :                     ; --------------------------------
(1) 2294/     B6B :                     
(1) 2295/     B6B :                     .get_fmcach:
(1) 2296/     B6B : 21 80 17            		ld	hl,fmcach_list
(1) 2297/     B6E : E6 07               		and	0111b
(1) 2298/     B70 : 16 00               		ld	d,0
(1) 2299/     B72 : CF                  		rst	8
(1) 2300/     B73 : 87                  		add	a,a
(1) 2301/     B74 : 5F                  		ld	e,a
(1) 2302/     B75 : 19                  		add	hl,de
(1) 2303/     B76 : 7E                  		ld	a,(hl)
(1) 2304/     B77 : 23                  		inc	hl
(1) 2305/     B78 : 66                  		ld	h,(hl)
(1) 2306/     B79 : 6F                  		ld	l,a
(1) 2307/     B7A : C9                  		ret
(1) 2308/     B7B :                     
(1) 2309/     B7B :                     ; --------------------------------
(1) 2310/     B7B :                     ; DAC
(1) 2311/     B7B :                     ; --------------------------------
(1) 2312/     B7B :                     
(1) 2313/     B7B :                     .mk_dac:
(1) 2314/     B7B : 78                  		ld	a,b
(1) 2315/     B7C : E6 03               		and	0011b
(1) 2316/     B7E : 28 1F               		jr	z,.dac_proc
(1) 2317/     B80 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2318/     B83 : FE FE               		cp	-2
(1) 2319/     B85 : CA 93 0B            		jp	z,.dac_cut
(1) 2320/     B88 : FE FF               		cp	-1
(1) 2321/     B8A : CA 99 0B            		jp	z,.dac_off
(1) 2322/     B8D : CD 9F 0B            		call	.dac_proc
(1) 2323/     B90 : C3 ED 11            		jp	dac_play
(1) 2324/     B93 :                     .dac_cut:
(1) 2325/     B93 : CD D8 11            		call	dac_off
(1) 2326/     B96 : C3 E5 0E            		jp	.chnl_ulnkoff
(1) 2327/     B99 :                     .dac_off:
(1) 2328/     B99 : CD D8 11            		call	dac_off
(1) 2329/     B9C : C3 E5 0E            		jp	.chnl_ulnkcut
(1) 2330/     B9F :                     .dac_proc:
(1) 2331/     B9F : 16 00               		ld	d,0			; Freq index
(1) 2332/     BA1 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2333/     BA4 : 21 69 13            		ld	hl,wavFreq_List-(2*36)
(1) 2334/     BA7 : 19                  		add	hl,de
(1) 2335/     BA8 : 7E                  		ld	a,(hl)
(1) 2336/     BA9 : 23                  		inc	hl
(1) 2337/     BAA : 66                  		ld	h,(hl)
(1) 2338/     BAB : 6F                  		ld	l,a
(1) 2339/     BAC : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2340/     BAF : CF                  		rst	8
(1) 2341/     BB0 : AF                  		xor	a			; Clear high
(1) 2342/     BB1 : 3F                  		ccf				; Clear carry
(1) 2343/     BB2 : CB 23               		sla	e			; << 1
(1) 2344/     BB4 : 9F                  		sbc	a,a			; Get carry MSB
(1) 2345/     BB5 : 57                  		ld	d,a
(1) 2346/     BB6 : 19                  		add	hl,de
(1) 2347/     BB7 : 22 F3 1C            		ld	(wave_Pitch),hl
(1) 2348/     BBA : D9                  		exx				; *
(1) 2349/     BBB : ED 5B F3 1C         		ld	de,(wave_Pitch)		; *
(1) 2350/     BBF : D9                  		exx				; *
(1) 2351/     BC0 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2352/     BC3 : 2F                  		cpl				; REVERSE bits
(1) 2353/     BC4 : E6 30               		and	00110000b
(1) 2354/     BC6 : 07                  		rlca
(1) 2355/     BC7 : 07                  		rlca
(1) 2356/     BC8 : CF                  		rst	8
(1) 2357/     BC9 : 5F                  		ld	e,a
(1) 2358/     BCA : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2359/     BCC : C3 B8 11            		jp	fm_send_2
(1) 2360/     BCF :                     
(1) 2361/     BCF :                     ; --------------------------------
(1) 2362/     BCF :                     ; PCM
(1) 2363/     BCF :                     ; --------------------------------
(1) 2364/     BCF :                     
(1) 2365/     BCF :                     .mk_pcm:
(1) 2441/     BCF : C9                  		ret
(1) 2443/     BD0 :                     
(1) 2444/     BD0 :                     ; --------------------------------
(1) 2445/     BD0 :                     ; PWM
(1) 2446/     BD0 :                     ; --------------------------------
(1) 2447/     BD0 :                     
(1) 2448/     BD0 :                     .mk_pwm:
(1) 2528/     BD0 : C9                  		ret
(1) 2530/     BD1 :                     
(1) 2531/     BD1 :                     ; --------------------------------
(1) 2532/     BD1 :                     ; SHARED routine
(1) 2533/     BD1 :                     
(1) 2534/     BD1 :                     .readfreq_pcm:
(1) 2535/     BD1 : 21 CB 13            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2536/     BD4 : 18 03               		jr	.set_wavfreq
(1) 2537/     BD6 :                     .readfreq_pwm:
(1) 2538/     BD6 : 21 69 13            		ld	hl,wavFreq_List-(2*36)
(1) 2539/     BD9 :                     .set_wavfreq:
(1) 2540/     BD9 : 16 00               		ld	d,0			; Freq index
(1) 2541/     BDB : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2542/     BDE : 19                  		add	hl,de
(1) 2543/     BDF : 7E                  		ld	a,(hl)
(1) 2544/     BE0 : 23                  		inc	hl
(1) 2545/     BE1 : 66                  		ld	h,(hl)
(1) 2546/     BE2 : 6F                  		ld	l,a
(1) 2547/     BE3 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2548/     BE6 : CF                  		rst	8
(1) 2549/     BE7 : AF                  		xor	a			; Clear high
(1) 2550/     BE8 : 3F                  		ccf				; Clear carry
(1) 2551/     BE9 : CB 23               		sla	e			; Get carry MSB
(1) 2552/     BEB : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2553/     BEC : 57                  		ld	d,a
(1) 2554/     BED : 19                  		add	hl,de
(1) 2555/     BEE : C9                  		ret
(1) 2556/     BEF :                     
(1) 2557/     BEF :                     ; ----------------------------------------
(1) 2558/     BEF :                     ; NEW effect
(1) 2559/     BEF :                     ; ----------------------------------------
(1) 2560/     BEF :                     
(1) 2561/     BEF :                     .effc:
(1) 2562/     BEF : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2563/     BF2 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2564/     BF5 : 57                  		ld	d,a
(1) 2565/     BF6 : CF                  		rst	8
(1) 2566/     BF7 : FE 04               		cp	4			; Effect D?
(1) 2567/     BF9 : 28 0F               		jr	z,.effc_D
(1) 2568/     BFB : FE 05               		cp	5			; Effect E?
(1) 2569/     BFD : 28 44               		jr	z,.effc_E
(1) 2570/     BFF : FE 06               		cp	6			; Effect F?
(1) 2571/     C01 : 28 4F               		jr	z,.effc_F
(1) 2572/     C03 : CF                  		rst	8
(1) 2573/     C04 : FE 18               		cp	24			; Effect X?
(1) 2574/     C06 : CA 63 0C            		jp	z,.effc_X
(1) 2575/     C09 : C9                  		ret
(1) 2576/     C0A :                     
(1) 2577/     C0A :                     ; ----------------------------------------
(1) 2578/     C0A :                     ; Effect D: Volume slide up/down
(1) 2579/     C0A :                     ;
(1) 2580/     C0A :                     ; 00h - DON'T USE HERE
(1) 2581/     C0A :                     ;       (Original: Keep effect)
(1) 2582/     C0A :                     ; 0xh - Slide down normal
(1) 2583/     C0A :                     ; Fxh - Slide down fine
(1) 2584/     C0A :                     ; xFh - Slide up normal
(1) 2585/     C0A :                     ; x0h - Slide up fine
(1) 2586/     C0A :                     ; ----------------------------------------
(1) 2587/     C0A :                     
(1) 2588/     C0A :                     .effc_D:
(1) 2589/     C0A : 7B                  		ld	a,e
(1) 2590/     C0B : 0F                  		rrca
(1) 2591/     C0C : 0F                  		rrca
(1) 2592/     C0D : 0F                  		rrca
(1) 2593/     C0E : 0F                  		rrca
(1) 2594/     C0F : E6 0F               		and	0Fh
(1) 2595/     C11 : 4F                  		ld	c,a
(1) 2596/     C12 :                     	; e - DOWN value: ????dddd
(1) 2597/     C12 :                     	; c - UP value:   0000uuuu
(1) 2598/     C12 :                     
(1) 2599/     C12 : 7B                  		ld	a,e
(1) 2600/     C13 : B7                  		or	a
(1) 2601/     C14 : C8                  		ret	z
(1) 2602/     C15 : E6 F0               		and	0F0h		; 0Xh
(1) 2603/     C17 : 28 1D               		jr	z,.D_down
(1) 2604/     C19 : FE F0               		cp	0F0h		; FXh
(1) 2605/     C1B : 28 14               		jr	z,.D_downhf
(1) 2606/     C1D : 7B                  		ld	a,e
(1) 2607/     C1E : E6 0F               		and	00Fh		; X0h
(1) 2608/     C20 : 28 06               		jr	z,.D_up
(1) 2609/     C22 : FE 0F               		cp	00Fh		; XFh
(1) 2610/     C24 : C0                  		ret	nz
(1) 2611/     C25 :                     ; 		jr	z,.D_uphf
(1) 2612/     C25 :                     ; Go UP
(1) 2613/     C25 :                     .D_uphf:
(1) 2614/     C25 : 79                  		ld	a,c
(1) 2615/     C26 : 18 02               		jr	.setefU_D
(1) 2616/     C28 :                     .D_up:
(1) 2617/     C28 : 79                  		ld	a,c
(1) 2618/     C29 : 87                  		add	a,a
(1) 2619/     C2A :                     .setefU_D:
(1) 2620/     C2A : 5F                  		ld	e,a
(1) 2621/     C2B : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2622/     C2E : 93                  		sub	a,e
(1) 2623/     C2F : 18 0E               		jr	.setef_mcD
(1) 2624/     C31 :                     ; Go DOWN
(1) 2625/     C31 :                     .D_downhf:
(1) 2626/     C31 : 7B                  		ld	a,e
(1) 2627/     C32 : E6 0F               		and	0Fh
(1) 2628/     C34 : 18 04               		jr	.setef_D
(1) 2629/     C36 :                     .D_down:
(1) 2630/     C36 : 7B                  		ld	a,e
(1) 2631/     C37 : E6 0F               		and	0Fh
(1) 2632/     C39 : 87                  		add	a,a
(1) 2633/     C3A :                     .setef_D:
(1) 2634/     C3A : 5F                  		ld	e,a
(1) 2635/     C3B : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2636/     C3E : 83                  		add	a,e
(1) 2637/     C3F :                     ; 		jr	.setef_mcD
(1) 2638/     C3F :                     
(1) 2639/     C3F :                     ; Write slide
(1) 2640/     C3F :                     .setef_mcD:
(1) 2641/     C3F : FD 77 08            		ld	(iy+ztbl_VolSlide),a
(1) 2642/     C42 : C9                  		ret
(1) 2643/     C43 :                     
(1) 2644/     C43 :                     ; ----------------------------------------
(1) 2645/     C43 :                     ; Effect E
(1) 2646/     C43 :                     ; ----------------------------------------
(1) 2647/     C43 :                     
(1) 2648/     C43 :                     .effc_E:
(1) 2649/     C43 : 7B                  		ld	a,e
(1) 2650/     C44 : E6 F0               		and	0F0h
(1) 2651/     C46 : FE F0               		cp	0F0h
(1) 2652/     C48 : C8                  		ret	z
(1) 2653/     C49 : FE E0               		cp	0E0h
(1) 2654/     C4B : C8                  		ret	z
(1) 2655/     C4C : CF                  		rst	8
(1) 2656/     C4D : 7B                  		ld	a,e
(1) 2657/     C4E : ED 44               		neg	a
(1) 2658/     C50 : 18 0B               		jr	.wrt_EF
(1) 2659/     C52 :                     
(1) 2660/     C52 :                     ; ----------------------------------------
(1) 2661/     C52 :                     ; Effect F
(1) 2662/     C52 :                     ; ----------------------------------------
(1) 2663/     C52 :                     
(1) 2664/     C52 :                     .effc_F:
(1) 2665/     C52 : 7B                  		ld	a,e
(1) 2666/     C53 : E6 F0               		and	0F0h
(1) 2667/     C55 : FE F0               		cp	0F0h
(1) 2668/     C57 : C8                  		ret	z
(1) 2669/     C58 : FE E0               		cp	0E0h
(1) 2670/     C5A : C8                  		ret	z
(1) 2671/     C5B : CF                  		rst	8
(1) 2672/     C5C : 7B                  		ld	a,e
(1) 2673/     C5D :                     .wrt_EF:
(1) 2674/     C5D : 87                  		add	a,a
(1) 2675/     C5E : 87                  		add	a,a
(1) 2676/     C5F : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2677/     C62 : C9                  		ret
(1) 2678/     C63 :                     
(1) 2679/     C63 :                     ; ----------------------------------------
(1) 2680/     C63 :                     ; Effect X
(1) 2681/     C63 :                     ;
(1) 2682/     C63 :                     ; Common panning values:
(1) 2683/     C63 :                     ;  00h LEFT
(1) 2684/     C63 :                     ;  80h MIDDLE
(1) 2685/     C63 :                     ; 0FFh RIGHT
(1) 2686/     C63 :                     ; ----------------------------------------
(1) 2687/     C63 :                     
(1) 2688/     C63 :                     .effc_X:
(1) 2689/     C63 : 16 00               		ld	d,0
(1) 2690/     C65 : 7E                  		ld	a,(hl)
(1) 2691/     C66 : E6 F0               		and	11110000b
(1) 2692/     C68 : FE 80               		cp	80h		; PSG?
(1) 2693/     C6A : 28 19               		jr	z,.res_pan
(1) 2694/     C6C : FE 90               		cp	90h		; PSGN?
(1) 2695/     C6E : 28 15               		jr	z,.res_pan
(1) 2696/     C70 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2697/     C72 : CC 8F 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2698/     C75 :                     
(1) 2699/     C75 :                     	; ----------------------------------------
(1) 2700/     C75 :                     	; Common panning bits: %00LR0000
(1) 2701/     C75 :                     	; (REVERSE: 0-on 1-off)
(1) 2702/     C75 : CF                  		rst	8
(1) 2703/     C76 : E5                  		push	hl
(1) 2704/     C77 : 21 B2 0C            		ld	hl,.comn_panlist
(1) 2705/     C7A : 7B                  		ld	a,e
(1) 2706/     C7B : 07                  		rlca
(1) 2707/     C7C : 07                  		rlca
(1) 2708/     C7D : 07                  		rlca
(1) 2709/     C7E : E6 07               		and	0111b
(1) 2710/     C80 :                     ; 		ld	d,0
(1) 2711/     C80 : 5F                  		ld	e,a
(1) 2712/     C81 : CF                  		rst	8
(1) 2713/     C82 : 19                  		add	hl,de
(1) 2714/     C83 : 56                  		ld	d,(hl)
(1) 2715/     C84 : E1                  		pop	hl
(1) 2716/     C85 :                     .res_pan:
(1) 2717/     C85 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2718/     C88 : E6 CF               		and	11001111b
(1) 2719/     C8A : B2                  		or	d
(1) 2720/     C8B : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2721/     C8E : C9                  		ret
(1) 2722/     C8F :                     
(1) 2723/     C8F :                     	; ----------------------------------------
(1) 2724/     C8F :                     	; MCD panning
(1) 2725/     C8F :                     .pan_mcd:
(1) 2726/     C8F : E5                  		push	hl
(1) 2727/     C90 : D5                  		push	de
(1) 2728/     C91 : 16 00               		ld	d,0
(1) 2729/     C93 : 21 BA 0C            		ld	hl,.pcm_panlist
(1) 2730/     C96 : 7B                  		ld	a,e
(1) 2731/     C97 : E6 F8               		and	0F8h
(1) 2732/     C99 : 0F                  		rrca
(1) 2733/     C9A : 0F                  		rrca
(1) 2734/     C9B : 0F                  		rrca
(1) 2735/     C9C : 5F                  		ld	e,a
(1) 2736/     C9D : 19                  		add	hl,de
(1) 2737/     C9E : 7E                  		ld	a,(hl)
(1) 2738/     C9F : 21 AB 14            		ld	hl,pcmcom+32
(1) 2739/     CA2 : 16 00               		ld	d,0
(1) 2740/     CA4 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2741/     CA7 : 19                  		add	hl,de
(1) 2742/     CA8 : 2F                  		cpl
(1) 2743/     CA9 : 77                  		ld	(hl),a
(1) 2744/     CAA : D1                  		pop	de
(1) 2745/     CAB : E1                  		pop	hl
(1) 2746/     CAC : 3E 01               		ld	a,1
(1) 2747/     CAE : 32 87 17            		ld	(mcdUpd),a
(1) 2748/     CB1 : C9                  		ret
(1) 2749/     CB2 :                     
(1) 2750/     CB2 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2751/     CB2 :                     ; 00LR0000b
(1) 2752/     CB2 :                     .comn_panlist:
(1) 2753/     CB2 : 10                  		db 00010000b
(1) 2754/     CB3 : 10                  		db 00010000b
(1) 2755/     CB4 : 10                  		db 00010000b
(1) 2756/     CB5 : 00                  		db 00000000b
(1) 2757/     CB6 : 00                  		db 00000000b
(1) 2758/     CB7 : 20                  		db 00100000b
(1) 2759/     CB8 : 20                  		db 00100000b
(1) 2760/     CB9 : 20                  		db 00100000b
(1) 2761/     CBA :                     
(1) 2762/     CBA :                     ; REVERSE OUTPUT BITS
(1) 2763/     CBA :                     ; RRRR | LLLL
(1) 2764/     CBA :                     .pcm_panlist:
(1) 2765/     CBA : F0                  		db 0F0h	; 00h
(1) 2766/     CBB : E0                  		db 0E0h
(1) 2767/     CBC : D0                  		db 0D0h	; 10h
(1) 2768/     CBD : C0                  		db 0C0h
(1) 2769/     CBE : B0                  		db 0B0h	; 20h
(1) 2770/     CBF : A0                  		db 0A0h
(1) 2771/     CC0 : 90                  		db 090h	; 30h
(1) 2772/     CC1 : 80                  		db 080h
(1) 2773/     CC2 : 70                  		db 070h	; 40h
(1) 2774/     CC3 : 60                  		db 060h
(1) 2775/     CC4 : 50                  		db 050h	; 50h
(1) 2776/     CC5 : 40                  		db 040h
(1) 2777/     CC6 : 30                  		db 030h	; 60h
(1) 2778/     CC7 : 20                  		db 020h
(1) 2779/     CC8 : 10                  		db 010h	; 70h
(1) 2780/     CC9 : 00                  		db 000h
(1) 2781/     CCA : 00                  		db 000h ; 80h
(1) 2782/     CCB : 01                  		db 001h
(1) 2783/     CCC : 02                  		db 002h ; 90h
(1) 2784/     CCD : 03                  		db 003h
(1) 2785/     CCE : 04                  		db 004h ; A0h
(1) 2786/     CCF : 05                  		db 005h
(1) 2787/     CD0 : 06                  		db 006h ; B0h
(1) 2788/     CD1 : 07                  		db 007h
(1) 2789/     CD2 : 08                  		db 008h ; C0h
(1) 2790/     CD3 : 09                  		db 009h
(1) 2791/     CD4 : 0A                  		db 00Ah ; D0h
(1) 2792/     CD5 : 0B                  		db 00Bh
(1) 2793/     CD6 : 0C                  		db 00Ch ; E0h
(1) 2794/     CD7 : 0D                  		db 00Dh
(1) 2795/     CD8 : 0E                  		db 00Eh ; F0h
(1) 2796/     CD9 : 0F                  		db 00Fh
(1) 2797/     CDA :                     
(1) 2798/     CDA :                     ; ----------------------------------------
(1) 2799/     CDA :                     ; NEW volume
(1) 2800/     CDA :                     ; ----------------------------------------
(1) 2801/     CDA :                     
(1) 2802/     CDA :                     .volu:
(1) 2803/     CDA : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2804/     CDD : D6 40               		sub	a,64
(1) 2805/     CDF : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2806/     CE2 : C9                  		ret
(1) 2807/     CE3 :                     
(1) 2808/     CE3 :                     ; ----------------------------------------
(1) 2809/     CE3 :                     ; NEW instrument
(1) 2810/     CE3 :                     ; ----------------------------------------
(1) 2811/     CE3 :                     
(1) 2812/     CE3 :                     .inst:
(1) 2813/     CE3 : 7E                  		ld	a,(hl)
(1) 2814/     CE4 : E6 F0               		and	11110000b
(1) 2815/     CE6 : FE 80               		cp	080h
(1) 2816/     CE8 : 28 24               		jr	z,.ins_psg
(1) 2817/     CEA : FE 90               		cp	090h
(1) 2818/     CEC : 28 1A               		jr	z,.ins_psgn
(1) 2819/     CEE : FE A0               		cp	0A0h
(1) 2820/     CF0 : 28 52               		jr	z,.ins_fm
(1) 2821/     CF2 : CF                  		rst	8
(1) 2822/     CF3 : FE B0               		cp	0B0h
(1) 2823/     CF5 : 28 4D               		jr	z,.ins_fm
(1) 2824/     CF7 : FE C0               		cp	0C0h
(1) 2825/     CF9 : CA BF 0D            		jp	z,.ins_dac
(1) 2826/     CFC : FE D0               		cp	0D0h
(1) 2827/     CFE : CA 13 0E            		jp	z,.ins_pcm
(1) 2828/     D01 : FE E0               		cp	0E0h
(1) 2829/     D03 : CA 50 0E            		jp	z,.ins_pwm
(1) 2830/     D06 : CF                  		rst	8
(1) 2831/     D07 :                     .invl_ins:
(1) 2832/     D07 : C9                  		ret
(1) 2833/     D08 :                     
(1) 2834/     D08 :                     ; ----------------------------------------
(1) 2835/     D08 :                     ; PSG
(1) 2836/     D08 :                     
(1) 2837/     D08 :                     .ins_psgn:
(1) 2838/     D08 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2839/     D09 : E6 07               		and	0111b
(1) 2840/     D0B : 32 F6 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2841/     D0E :                     .ins_psg:
(1) 2842/     D0E : CF                  		rst	8
(1) 2843/     D0F : DD E5               		push	ix
(1) 2844/     D11 : E5                  		push	hl
(1) 2845/     D12 : 23                  		inc	hl		; Skip ID
(1) 2846/     D13 : DD 21 03 15         		ld	ix,psgcom	; Read psg control
(1) 2847/     D17 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2848/     D1A : 16 00               		ld	d,0
(1) 2849/     D1C : DD 19               		add	ix,de
(1) 2850/     D1E : 7E                  		ld	a,(hl)
(1) 2851/     D1F : CF                  		rst	8
(1) 2852/     D20 : 23                  		inc	hl
(1) 2853/     D21 : 7E                  		ld	a,(hl)
(1) 2854/     D22 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2855/     D25 : 23                  		inc	hl
(1) 2856/     D26 : 7E                  		ld	a,(hl)
(1) 2857/     D27 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2858/     D2A : 23                  		inc	hl
(1) 2859/     D2B : 7E                  		ld	a,(hl)
(1) 2860/     D2C : CF                  		rst	8
(1) 2861/     D2D : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2862/     D30 : 23                  		inc	hl
(1) 2863/     D31 : 7E                  		ld	a,(hl)
(1) 2864/     D32 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2865/     D35 : 23                  		inc	hl
(1) 2866/     D36 : 7E                  		ld	a,(hl)
(1) 2867/     D37 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2868/     D3A : 23                  		inc	hl
(1) 2869/     D3B : 7E                  		ld	a,(hl)
(1) 2870/     D3C : CF                  		rst	8
(1) 2871/     D3D : DD 77 2C            		ld	(ix+ARP),a	; ARP
(1) 2872/     D40 : E1                  		pop	hl
(1) 2873/     D41 : DD E1               		pop	ix
(1) 2874/     D43 : C9                  		ret
(1) 2875/     D44 :                     
(1) 2876/     D44 :                     ; ----------------------------------------
(1) 2877/     D44 :                     ; FM/FM3
(1) 2878/     D44 :                     
(1) 2879/     D44 :                     .ins_fm:
(1) 2880/     D44 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2881/     D47 : E6 07               		and	0111b
(1) 2882/     D49 : 16 00               		ld	d,0
(1) 2883/     D4B : 87                  		add	a,a
(1) 2884/     D4C : 5F                  		ld	e,a
(1) 2885/     D4D : DD E5               		push	ix
(1) 2886/     D4F : E5                  		push	hl
(1) 2887/     D50 : C5                  		push	bc
(1) 2888/     D51 : DD 21 80 17         		ld	ix,fmcach_list
(1) 2889/     D55 : DD 19               		add	ix,de
(1) 2890/     D57 : CF                  		rst	8
(1) 2891/     D58 : DD 5E 00            		ld	e,(ix)
(1) 2892/     D5B : DD 23               		inc	ix
(1) 2893/     D5D : DD 56 00            		ld	d,(ix)
(1) 2894/     D60 : DD 21 2F 16         		ld	ix,fmlist_rsave
(1) 2895/     D64 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2896/     D67 : 87                  		add	a,a
(1) 2897/     D68 : 87                  		add	a,a
(1) 2898/     D69 : 06 00               		ld	b,0
(1) 2899/     D6B : 4F                  		ld	c,a
(1) 2900/     D6C : DD 09               		add	ix,bc
(1) 2901/     D6E : 23                  		inc	hl			; Skip id and pitch
(1) 2902/     D6F : 23                  		inc	hl
(1) 2903/     D70 : 46                  		ld	b,(hl)
(1) 2904/     D71 : 23                  		inc	hl
(1) 2905/     D72 : 7E                  		ld	a,(hl)
(1) 2906/     D73 : 23                  		inc	hl
(1) 2907/     D74 : 6E                  		ld	l,(hl)
(1) 2908/     D75 : 67                  		ld	h,a
(1) 2909/     D76 :                     	;   ix - last MID and LOW bytes
(1) 2910/     D76 :                     	;   de - current FM cache
(1) 2911/     D76 :                     	; b,hl - 24-bit ROM address
(1) 2912/     D76 : DD 7E 02            		ld	a,(ix+2)
(1) 2913/     D79 : B8                  		cp	b
(1) 2914/     D7A : 20 0E               		jr	nz,.new_romdat
(1) 2915/     D7C : CF                  		rst	8
(1) 2916/     D7D : DD 7E 01            		ld	a,(ix+1)
(1) 2917/     D80 : BC                  		cp	h
(1) 2918/     D81 : 20 07               		jr	nz,.new_romdat
(1) 2919/     D83 : DD 7E 00            		ld	a,(ix)
(1) 2920/     D86 : BD                  		cp	l
(1) 2921/     D87 : 28 31               		jr	z,.same_patch
(1) 2922/     D89 : CF                  		rst	8
(1) 2923/     D8A :                     .new_romdat:
(1) 2924/     D8A : DD 70 02            		ld	(ix+2),b
(1) 2925/     D8D : DD 74 01            		ld	(ix+1),h
(1) 2926/     D90 : DD 75 00            		ld	(ix),l
(1) 2927/     D93 : 78                  		ld	a,b
(1) 2928/     D94 : 01 28 00            		ld	bc,28h			; <- size
(1) 2929/     D97 : D5                  		push	de
(1) 2930/     D98 : CD 89 0F            		call	readRom		; *** ROM ACCESS ***
(1) 2931/     D9B : E1                  		pop	hl
(1) 2932/     D9C : E7                  		rst	20h
(1) 2933/     D9D : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2934/     DA0 :                     	; hl - fmcach intrument
(1) 2935/     DA0 :                     	; de - FM reg and data: 3000h
(1) 2936/     DA0 :                     	;  c - FM keyChannel
(1) 2937/     DA0 : 79                  		ld	a,c
(1) 2938/     DA1 : E6 03               		and	011b
(1) 2939/     DA3 : F6 30               		or	30h			; Start at reg 30h
(1) 2940/     DA5 : 57                  		ld	d,a
(1) 2941/     DA6 : 1E 00               		ld	e,0
(1) 2942/     DA8 : CF                  		rst	8
(1) 2943/     DA9 : 06 1C               		ld	b,7*4			; Write ALL base FM registers
(1) 2944/     DAB :                     .fm_setrlist:
(1) 2945/     DAB : 5E                  		ld	e,(hl)
(1) 2946/     DAC : 23                  		inc	hl
(1) 2947/     DAD : CD A9 11            		call	fm_autoreg
(1) 2948/     DB0 : 00                  		nop
(1) 2949/     DB1 : 00                  		nop
(1) 2950/     DB2 : CF                  		rst	8
(1) 2951/     DB3 : 00                  		nop
(1) 2952/     DB4 : 14                  		inc	d		; +4
(1) 2953/     DB5 : 14                  		inc	d
(1) 2954/     DB6 : 14                  		inc	d
(1) 2955/     DB7 : 14                  		inc	d
(1) 2956/     DB8 : 10 F1               		djnz	.fm_setrlist
(1) 2957/     DBA :                     .same_patch:
(1) 2958/     DBA : C1                  		pop	bc
(1) 2959/     DBB : E1                  		pop	hl
(1) 2960/     DBC : DD E1               		pop	ix
(1) 2961/     DBE : C9                  		ret
(1) 2962/     DBF :                     
(1) 2963/     DBF :                     ; ----------------------------------------
(1) 2964/     DBF :                     
(1) 2965/     DBF :                     .ins_dac:
(1) 2966/     DBF : E5                  		push	hl
(1) 2967/     DC0 : C5                  		push	bc
(1) 2968/     DC1 : CD D8 11            		call	dac_off
(1) 2969/     DC4 : 7E                  		ld	a,(hl)
(1) 2970/     DC5 : E6 0F               		and	00001111b
(1) 2971/     DC7 : 32 F5 1C            		ld	(wave_Flags),a
(1) 2972/     DCA : CF                  		rst	8
(1) 2973/     DCB : 23                  		inc	hl
(1) 2974/     DCC : 23                  		inc	hl
(1) 2975/     DCD : 5E                  		ld	e,(hl)
(1) 2976/     DCE : 23                  		inc	hl
(1) 2977/     DCF : 7E                  		ld	a,(hl)
(1) 2978/     DD0 : 23                  		inc	hl
(1) 2979/     DD1 : 6E                  		ld	l,(hl)
(1) 2980/     DD2 : 67                  		ld	h,a
(1) 2981/     DD3 : E5                  		push	hl
(1) 2982/     DD4 : 7B                  		ld	a,e
(1) 2983/     DD5 : 01 06 00            		ld	bc,6		; Skip head
(1) 2984/     DD8 : 09                  		add	hl,bc
(1) 2985/     DD9 : CE 00               		adc	a,0
(1) 2986/     DDB : 22 EA 1C            		ld	(wave_Start),hl	; Set START point
(1) 2987/     DDE : 32 EC 1C            		ld	(wave_Start+2),a
(1) 2988/     DE1 : E1                  		pop	hl
(1) 2989/     DE2 : 7B                  		ld	a,e
(1) 2990/     DE3 : 11 79 1F            		ld	de,sampleHead
(1) 2991/     DE6 : 01 06 00            		ld	bc,6
(1) 2992/     DE9 : D5                  		push	de
(1) 2993/     DEA : CF                  		rst	8
(1) 2994/     DEB : CD 89 0F            		call	readRom	; *** ROM ACCESS ***
(1) 2995/     DEE : E1                  		pop	hl
(1) 2996/     DEF :                     	; hl - temporal header
(1) 2997/     DEF : 5E                  		ld	e,(hl)
(1) 2998/     DF0 : 23                  		inc	hl
(1) 2999/     DF1 : 56                  		ld	d,(hl)
(1) 3000/     DF2 : 23                  		inc	hl
(1) 3001/     DF3 : 7E                  		ld	a,(hl)
(1) 3002/     DF4 : 23                  		inc	hl
(1) 3003/     DF5 : ED 53 ED 1C         		ld	(wave_Len),de	; LEN
(1) 3004/     DF9 : 32 EF 1C            		ld	(wave_Len+2),a
(1) 3005/     DFC : 5E                  		ld	e,(hl)
(1) 3006/     DFD : 23                  		inc	hl
(1) 3007/     DFE : CF                  		rst	8
(1) 3008/     DFF : 56                  		ld	d,(hl)
(1) 3009/     E00 : 23                  		inc	hl
(1) 3010/     E01 : 7E                  		ld	a,(hl)
(1) 3011/     E02 : 23                  		inc	hl
(1) 3012/     E03 : ED 53 F0 1C         		ld	(wave_Loop),de	; LOOP
(1) 3013/     E07 : 32 F2 1C            		ld	(wave_Loop+2),a
(1) 3014/     E0A : 11 06 28            		ld	de,2806h	; keys off
(1) 3015/     E0D : CD AD 11            		call	fm_send_1
(1) 3016/     E10 : C1                  		pop	bc
(1) 3017/     E11 : E1                  		pop	hl
(1) 3018/     E12 :                     ; .same_dac:
(1) 3019/     E12 : C9                  		ret
(1) 3020/     E13 :                     
(1) 3021/     E13 :                     ; ----------------------------------------
(1) 3022/     E13 :                     
(1) 3023/     E13 :                     .ins_pcm:
(1) 3024/     E13 : DD E5               		push	ix
(1) 3025/     E15 : E5                  		push	hl
(1) 3026/     E16 : C5                  		push	bc
(1) 3027/     E17 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3028/     E18 : E6 01               		and	00000001b	; Read loop bit
(1) 3029/     E1A : 0F                  		rrca			; Move to MSB
(1) 3030/     E1B : CF                  		rst	8
(1) 3031/     E1C : 23                  		inc	hl		; Skip ID and Pitch
(1) 3032/     E1D : 23                  		inc	hl
(1) 3033/     E1E : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3034/     E1F : B3                  		or	e
(1) 3035/     E20 : 5F                  		ld	e,a
(1) 3036/     E21 : 23                  		inc	hl
(1) 3037/     E22 : 7E                  		ld	a,(hl)
(1) 3038/     E23 : 23                  		inc	hl
(1) 3039/     E24 : 6E                  		ld	l,(hl)
(1) 3040/     E25 : 67                  		ld	h,a
(1) 3041/     E26 :                     	; d    - Loop enable bit
(1) 3042/     E26 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3043/     E26 : DD 21 8B 14         		ld	ix,pcmcom
(1) 3044/     E2A : 06 00               		ld	b,0
(1) 3045/     E2C : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3046/     E2F : DD 09               		add	ix,bc
(1) 3047/     E31 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3048/     E34 : DD 09               		add	ix,bc
(1) 3049/     E36 : 01 08 00            		ld	bc,8
(1) 3050/     E39 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3051/     E3C : DD 09               		add	ix,bc
(1) 3052/     E3E : DD 74 00            		ld	(ix),h
(1) 3053/     E41 : DD 09               		add	ix,bc
(1) 3054/     E43 : DD 75 00            		ld	(ix),l
(1) 3055/     E46 : C1                  		pop	bc
(1) 3056/     E47 : E1                  		pop	hl
(1) 3057/     E48 : DD E1               		pop	ix
(1) 3058/     E4A : 3E 01               		ld	a,1
(1) 3059/     E4C : 32 87 17            		ld	(mcdUpd),a
(1) 3060/     E4F : C9                  		ret
(1) 3061/     E50 :                     
(1) 3062/     E50 :                     ; ----------------------------------------
(1) 3063/     E50 :                     
(1) 3064/     E50 :                     .ins_pwm:
(1) 3065/     E50 : DD E5               		push	ix
(1) 3066/     E52 : E5                  		push	hl
(1) 3067/     E53 : C5                  		push	bc
(1) 3068/     E54 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3069/     E55 : E6 03               		and	00000011b
(1) 3070/     E57 : 0F                  		rrca
(1) 3071/     E58 : 0F                  		rrca
(1) 3072/     E59 : 4F                  		ld	c,a
(1) 3073/     E5A : CF                  		rst	8
(1) 3074/     E5B : 23                  		inc	hl		; Skip ID and Pitch
(1) 3075/     E5C : 23                  		inc	hl
(1) 3076/     E5D : 56                  		ld	d,(hl)
(1) 3077/     E5E : 23                  		inc	hl
(1) 3078/     E5F : 5E                  		ld	e,(hl)
(1) 3079/     E60 : 23                  		inc	hl
(1) 3080/     E61 : 7E                  		ld	a,(hl)
(1) 3081/     E62 : 23                  		inc	hl
(1) 3082/     E63 : 6E                  		ld	l,(hl)
(1) 3083/     E64 : 67                  		ld	h,a
(1) 3084/     E65 : 79                  		ld	a,c
(1) 3085/     E66 : B2                  		or	d
(1) 3086/     E67 : 57                  		ld	d,a
(1) 3087/     E68 : CF                  		rst	8
(1) 3088/     E69 :                     	; de,hl - 32-bit PWM pointer
(1) 3089/     E69 : DD 21 CB 14         		ld	ix,pwmcom
(1) 3090/     E6D : 06 00               		ld	b,0
(1) 3091/     E6F : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3092/     E72 : DD 09               		add	ix,bc
(1) 3093/     E74 : 01 18 00            		ld	bc,24
(1) 3094/     E77 : DD 09               		add	ix,bc		; Move to PWOUTF
(1) 3095/     E79 : 01 08 00            		ld	bc,8
(1) 3096/     E7C : DD 72 00            		ld	(ix),d
(1) 3097/     E7F : DD 09               		add	ix,bc
(1) 3098/     E81 : DD 73 00            		ld	(ix),e
(1) 3099/     E84 : DD 09               		add	ix,bc
(1) 3100/     E86 : DD 74 00            		ld	(ix),h
(1) 3101/     E89 : DD 09               		add	ix,bc
(1) 3102/     E8B : DD 75 00            		ld	(ix),l
(1) 3103/     E8E : C1                  		pop	bc
(1) 3104/     E8F : E1                  		pop	hl
(1) 3105/     E90 : DD E1               		pop	ix
(1) 3106/     E92 : 3E 01               		ld	a,1
(1) 3107/     E94 : 32 86 17            		ld	(marsUpd),a
(1) 3108/     E97 : C9                  		ret
(1) 3109/     E98 :                     
(1) 3110/     E98 :                     ; ----------------------------------------
(1) 3111/     E98 :                     ; NEW note
(1) 3112/     E98 :                     ; ----------------------------------------
(1) 3113/     E98 :                     
(1) 3114/     E98 :                     .note:
(1) 3115/     E98 : 78                  		ld	a,b			; Volume bit?
(1) 3116/     E99 : E6 04               		and	0100b
(1) 3117/     E9B : 20 05               		jr	nz,.fm_hasvol
(1) 3118/     E9D : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3119/     EA1 : CF                  		rst	8
(1) 3120/     EA2 :                     .fm_hasvol:
(1) 3121/     EA2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3122/     EA5 : 4F                  		ld	c,a
(1) 3123/     EA6 : FE FF               		cp	-1
(1) 3124/     EA8 : C8                  		ret	z
(1) 3125/     EA9 : FE FE               		cp	-2
(1) 3126/     EAB : C8                  		ret	z
(1) 3127/     EAC : E7                  		rst	20h
(1) 3128/     EAD : CF                  		rst	8
(1) 3129/     EAE : 7E                  		ld	a,(hl)
(1) 3130/     EAF : E6 F0               		and	11110000b
(1) 3131/     EB1 : FE A0               		cp	0A0h
(1) 3132/     EB3 : 28 0B               		jr	z,.n_fm
(1) 3133/     EB5 :                     
(1) 3134/     EB5 :                     ; --------------------------------
(1) 3135/     EB5 :                     
(1) 3136/     EB5 :                     .n_indx:
(1) 3137/     EB5 : 79                  		ld	a,c
(1) 3138/     EB6 :                     .n_stfreq:
(1) 3139/     EB6 : 23                  		inc	hl			; Skip ID
(1) 3140/     EB7 : 5E                  		ld	e,(hl)			; Read pitch
(1) 3141/     EB8 : 2B                  		dec	hl
(1) 3142/     EB9 : 83                  		add	a,e			; Note + pitch
(1) 3143/     EBA : CF                  		rst	8
(1) 3144/     EBB : 87                  		add	a,a			; * 2
(1) 3145/     EBC : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3146/     EBF : C9                  		ret
(1) 3147/     EC0 :                     
(1) 3148/     EC0 :                     ; --------------------------------
(1) 3149/     EC0 :                     ; FM custom search
(1) 3150/     EC0 :                     
(1) 3151/     EC0 :                     .n_fm:
(1) 3152/     EC0 : 79                  		ld	a,c
(1) 3153/     EC1 : 23                  		inc	hl		; Skip ID
(1) 3154/     EC2 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3155/     EC3 : 2B                  		dec	hl
(1) 3156/     EC4 : CF                  		rst	8
(1) 3157/     EC5 : 83                  		add	a,e		; Note + pitch
(1) 3158/     EC6 :                     	; Search for octave and note...
(1) 3159/     EC6 : 0E 00               		ld	c,0		; c - octave
(1) 3160/     EC8 : 16 07               		ld	d,7
(1) 3161/     ECA :                     .get_oct:
(1) 3162/     ECA : 5F                  		ld	e,a		; e - note
(1) 3163/     ECB : D6 0C               		sub	12
(1) 3164/     ECD : FA D4 0E            		jp	m,.fnd_oct
(1) 3165/     ED0 : 0C                  		inc	c
(1) 3166/     ED1 : 15                  		dec	d
(1) 3167/     ED2 : 20 F6               		jr	nz,.get_oct
(1) 3168/     ED4 :                     .fnd_oct:
(1) 3169/     ED4 : CF                  		rst	8
(1) 3170/     ED5 : 7B                  		ld	a,e
(1) 3171/     ED6 : 87                  		add	a,a		; Note * 2
(1) 3172/     ED7 : E6 1F               		and	00011111b
(1) 3173/     ED9 : CB 09               		rrc	c
(1) 3174/     EDB : CB 09               		rrc	c
(1) 3175/     EDD : CB 09               		rrc	c
(1) 3176/     EDF : CF                  		rst	8
(1) 3177/     EE0 : B1                  		or	c
(1) 3178/     EE1 : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3179/     EE4 : C9                  		ret
(1) 3180/     EE5 :                     
(1) 3181/     EE5 :                     ; ----------------------------------------
(1) 3182/     EE5 :                     
(1) 3183/     EE5 :                     .chnl_ulnkcut:
(1) 3184/     EE5 :                     
(1) 3185/     EE5 :                     .chnl_ulnkoff:
(1) 3186/     EE5 :                     
(1) 3187/     EE5 :                     .chnl_ulnk:
(1) 3188/     EE5 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 3189/     EE8 : CF                  		rst	8
(1) 3190/     EE9 : FD E5               		push	iy
(1) 3191/     EEB : E1                  		pop	hl
(1) 3192/     EEC :                     ; 		jp	tblz_clear
(1) 3193/     EEC :                     
(1) 3194/     EEC :                     ; ----------------------------------------
(1) 3195/     EEC :                     ; Reset all table
(1) 3196/     EEC :                     ;
(1) 3197/     EEC :                     ; hl - Current channel table
(1) 3198/     EEC :                     ; d - Silence chip
(1) 3199/     EEC :                     ;
(1) 3200/     EEC :                     ; Uses:
(1) 3201/     EEC :                     ; b
(1) 3202/     EEC :                     ; ----------------------------------------
(1) 3203/     EEC :                     
(1) 3204/     EEC :                     tblz_clear:
(1) 3205/     EEC : CF                  		rst	8
(1) 3206/     EED : 36 00               		ld	(hl),0			; Delete link
(1) 3207/     EEF : 23                  		inc	hl
(1) 3208/     EF0 : 36 00               		ld	(hl),0
(1) 3209/     EF2 : 23                  		inc	hl
(1) 3210/     EF3 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 3211/     EF4 : C9                  		ret
(1) 3212/     EF5 :                     
(1) 3213/     EF5 :                     ; ============================================================
(1) 3214/     EF5 :                     ; --------------------------------------------------------
(1) 3215/     EF5 :                     ; Communication with the SCD and 32X
(1) 3216/     EF5 :                     ;
(1) 3217/     EF5 :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3218/     EF5 :                     ;    | Uses: commM,comm18-1F
(1) 3219/     EF5 :                     ;    |
(1) 3220/     EF5 :                     ; 32X: Interrupts Slave SH2
(1) 3221/     EF5 :                     ;    | Uses: comm8-comm11 (CMD request)
(1) 3222/     EF5 :                     ;    | two bits of comm14
(1) 3223/     EF5 :                     ; --------------------------------------------------------
(1) 3224/     EF5 :                     
(1) 3225/     EF5 :                     ; NOTE: careful modifing this
(1) 3226/     EF5 :                     
(1) 3227/     EF5 :                     zmars_send:
(1) 3228/     EF5 :                     	; ----------------------------------------
(1) 3229/     EF5 :                     	; Send PCM table
(1) 3313/     EF5 :                     	; ----------------------------------------
(1) 3314/     EF5 :                     	; Send PWM table
(1) 3397/     EF5 : C9                  		ret
(1) 3398/     EF6 :                     
(1) 3399/     EF6 :                     ; --------------------------------------------------------
(1) 3400/     EF6 :                     ; Set bank to $A10000 area
(1) 3416/     EF6 :                     
(1) 3417/     EF6 :                     ; ====================================================================
(1) 3418/     EF6 :                     ; ----------------------------------------------------------------
(1) 3419/     EF6 :                     ; Subroutines
(1) 3420/     EF6 :                     ; ----------------------------------------------------------------
(1) 3421/     EF6 :                     
(1) 3422/     EF6 :                     ; --------------------------------------------------------
(1) 3423/     EF6 :                     ; Init sound engine
(1) 3424/     EF6 :                     ; --------------------------------------------------------
(1) 3425/     EF6 :                     
(1) 3426/     EF6 :                     gema_init:
(1) 3427/     EF6 : CD E7 12            		call	gema_lastbank		; Set last bank slot, solves bus problem with 32X
(1) 3428/     EF9 : CD D8 11            		call	dac_off
(1) 3429/     EFC : AF                  		xor	a
(1) 3430/     EFD : 32 86 17            		ld	(marsUpd),a
(1) 3431/     F00 : 32 87 17            		ld	(mcdUpd),a
(1) 3432/     F03 : 32 30 00            		ld	(cdRamLen),a
(1) 3433/     F06 : FD 21 8E 17         		ld	iy,nikona_BuffList
(1) 3434/     F0A : 0E 01               		ld	c,1			; Start at this priority
(1) 3435/     F0C :                     .setup_list:
(1) 3436/     F0C : FD 7E 00            		ld	a,(iy)
(1) 3437/     F0F : FE FF               		cp	-1
(1) 3438/     F11 : 28 24               		jr	z,.end_setup
(1) 3439/     F13 : FD 23               		inc	iy
(1) 3440/     F15 : 6F                  		ld	l,a
(1) 3441/     F16 : FD 66 00            		ld	h,(iy)
(1) 3442/     F19 : E5                  		push	hl
(1) 3443/     F1A : DD E1               		pop	ix
(1) 3444/     F1C : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3445/     F1F : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3446/     F23 : FD 23               		inc	iy
(1) 3447/     F25 :                     	; iy - src
(1) 3448/     F25 :                     	; hl - dst
(1) 3449/     F25 : 11 04 00            		ld	de,trk_Blocks
(1) 3450/     F28 : 19                  		add	hl,de
(1) 3451/     F29 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3452/     F2B :                     .st_copy:
(1) 3453/     F2B : FD 7E 00            		ld	a,(iy)
(1) 3454/     F2E : 77                  		ld	(hl),a
(1) 3455/     F2F : FD 23               		inc	iy
(1) 3456/     F31 : 23                  		inc	hl
(1) 3457/     F32 : 10 F7               		djnz	.st_copy
(1) 3458/     F34 : 0C                  		inc	c
(1) 3459/     F35 : 18 D5               		jr	.setup_list
(1) 3460/     F37 :                     .end_setup:
(1) 3461/     F37 :                     
(1) 3462/     F37 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3463/     F3A : CD AD 11            		call	fm_send_1
(1) 3464/     F3D : 11 00 27            		ld	de,2700h	; CH3 special/timers OFF
(1) 3465/     F40 : CD AD 11            		call	fm_send_1
(1) 3466/     F43 :                     ; 		ld	de,2800h
(1) 3467/     F43 : 14                  		inc	d		; FM KEYS off
(1) 3468/     F44 : CD AD 11            		call	fm_send_1
(1) 3469/     F47 : 1C                  		inc	e
(1) 3470/     F48 : CD AD 11            		call	fm_send_1
(1) 3471/     F4B : 1C                  		inc	e
(1) 3472/     F4C : CD AD 11            		call	fm_send_1
(1) 3473/     F4F : 1C                  		inc	e
(1) 3474/     F50 : 1C                  		inc	e
(1) 3475/     F51 : CD AD 11            		call	fm_send_1
(1) 3476/     F54 : 1C                  		inc	e
(1) 3477/     F55 : CD AD 11            		call	fm_send_1
(1) 3478/     F58 : 1C                  		inc	e
(1) 3479/     F59 : CD AD 11            		call	fm_send_1
(1) 3480/     F5C : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3481/     F5F : 36 9F               		ld	(hl),09Fh
(1) 3482/     F61 : 36 BF               		ld	(hl),0BFh
(1) 3483/     F63 : 36 DF               		ld	(hl),0DFh
(1) 3484/     F65 : 36 FF               		ld	(hl),0FFh
(1) 3485/     F67 : C9                  		ret
(1) 3486/     F68 :                     
(1) 3487/     F68 :                     ; --------------------------------------------------------
(1) 3488/     F68 :                     ; get_tick
(1) 3489/     F68 :                     ;
(1) 3490/     F68 :                     ; Checks if VBlank triggred a TICK
(1) 3491/     F68 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3492/     F68 :                     ; --------------------------------------------------------
(1) 3493/     F68 :                     
(1) 3494/     F68 :                     get_tick:
(1) 3495/     F68 : F3                  		di				; Disable ints
(1) 3496/     F69 : F5                  		push	af
(1) 3497/     F6A : E5                  		push	hl
(1) 3498/     F6B : 21 F9 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3499/     F6E : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3500/     F6F : B7                  		or 	a
(1) 3501/     F70 : 28 13               		jr	z,.ctnotick
(1) 3502/     F72 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3503/     F74 : 23                  		inc	hl			; Move to tickCnt
(1) 3504/     F75 : 34                  		inc	(hl)			; and increment
(1) 3505/     F76 : CF                  		rst	8
(1) 3506/     F77 : D5                  		push	de
(1) 3507/     F78 : 2A FC 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3508/     F7B : ED 5B FE 1C         		ld	de,(sbeatPtck)
(1) 3509/     F7F : CF                  		rst	8
(1) 3510/     F80 : 19                  		add	hl,de
(1) 3511/     F81 : 22 FC 1C            		ld	(sbeatAcc),hl
(1) 3512/     F84 : D1                  		pop	de
(1) 3513/     F85 :                     .ctnotick:
(1) 3514/     F85 : E1                  		pop	hl
(1) 3515/     F86 : F1                  		pop	af
(1) 3516/     F87 : FB                  		ei				; Enable ints again
(1) 3517/     F88 : C9                  		ret
(1) 3518/     F89 :                     
(1) 3519/     F89 :                     ; --------------------------------------------------------
(1) 3520/     F89 :                     ; readRom
(1) 3521/     F89 :                     ;
(1) 3522/     F89 :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3523/     F89 :                     ; This also tells to 68k that we want to access ROM
(1) 3524/     F89 :                     ;
(1) 3525/     F89 :                     ; Input:
(1) 3526/     F89 :                     ; a  | 68K Address $xx0000
(1) 3527/     F89 :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3528/     F89 :                     ; hl | 68K Address $00xxxx
(1) 3529/     F89 :                     ; de | Destination pointer
(1) 3530/     F89 :                     ;
(1) 3531/     F89 :                     ; Uses:
(1) 3532/     F89 :                     ; b
(1) 3533/     F89 :                     ;
(1) 3534/     F89 :                     ; Notes:
(1) 3535/     F89 :                     ; call RST 20h first, so the currenty playing DAC
(1) 3536/     F89 :                     ; sample has enough data before getting busy here.
(1) 3537/     F89 :                     ; --------------------------------------------------------
(1) 3538/     F89 :                     
(1) 3539/     F89 :                     readRom:
(1) 3540/     F89 : DD E5               		push	ix
(1) 3541/     F8B : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3542/     F8F : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3543/     F91 : 28 3D               		jr	z,.from_ram
(1) 3544/     F93 : CF                  		rst	8
(1) 3545/     F94 : 22 60 1F            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3546/     F97 : CB BC               		res	7,h
(1) 3547/     F99 : 06 00               		ld	b,0
(1) 3548/     F9B : 0B                  		dec	bc
(1) 3549/     F9C : 09                  		add	hl,bc
(1) 3550/     F9D : CB 7C               		bit	7,h
(1) 3551/     F9F : 20 0B               		jr	nz,.double
(1) 3552/     FA1 : 2A 60 1F            		ld	hl,(x68ksrclsb)
(1) 3553/     FA4 : 0C                  		inc	c
(1) 3554/     FA5 : 47                  		ld	b,a
(1) 3555/     FA6 : CD F0 0F            		call	.transfer
(1) 3556/     FA9 : DD E1               		pop	ix
(1) 3557/     FAB : C9                  		ret
(1) 3558/     FAC :                     .double:
(1) 3559/     FAC : CF                  		rst	8
(1) 3560/     FAD : 47                  		ld	b,a
(1) 3561/     FAE : C5                  		push	bc
(1) 3562/     FAF : E5                  		push	hl
(1) 3563/     FB0 : 79                  		ld	a,c
(1) 3564/     FB1 : 95                  		sub	a,l
(1) 3565/     FB2 : 4F                  		ld	c,a
(1) 3566/     FB3 : 2A 60 1F            		ld	hl,(x68ksrclsb)
(1) 3567/     FB6 : CD F0 0F            		call	.transfer
(1) 3568/     FB9 : E1                  		pop	hl
(1) 3569/     FBA : C1                  		pop	bc
(1) 3570/     FBB : 4D                  		ld	c,l
(1) 3571/     FBC : 0C                  		inc	c
(1) 3572/     FBD : 3A 61 1F            		ld	a,(x68ksrcmid)
(1) 3573/     FC0 : E6 80               		and	80h
(1) 3574/     FC2 : C6 80               		add	a,80h
(1) 3575/     FC4 : 67                  		ld	h,a
(1) 3576/     FC5 : 2E 00               		ld	l,0
(1) 3577/     FC7 : 30 01               		jr	nc,.x68knocarry
(1) 3578/     FC9 : 04                  		inc	b
(1) 3579/     FCA :                     .x68knocarry:
(1) 3580/     FCA : CD F0 0F            		call	.transfer
(1) 3581/     FCD : DD E1               		pop	ix
(1) 3582/     FCF : C9                  		ret
(1) 3583/     FD0 :                     
(1) 3584/     FD0 :                     ; ------------------------------------------------
(1) 3585/     FD0 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3586/     FD0 :                     ;
(1) 3587/     FD0 :                     ; On the 68K side YOU MUST CALL
(1) 3588/     FD0 :                     ; gemaUpdate manually if you have the oportunity
(1) 3589/     FD0 :                     ;
(1) 3590/     FD0 :                     ; Normally from a Vblank wait loop.
(1) 3591/     FD0 :                     ; ------------------------------------------------
(1) 3592/     FD0 :                     
(1) 3593/     FD0 :                     .from_ram:
(1) 3594/     FD0 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3595/     FD4 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3596/     FD7 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3597/     FDA : CD E7 12            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3598/     FDD : CF                  		rst	8
(1) 3599/     FDE : 79                  		ld	a,c
(1) 3600/     FDF : 32 30 00            		ld	(cdRamLen),a
(1) 3601/     FE2 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** 68K LABEL **
(1) 3602/     FE5 : 36 01               		ld	(hl),1				; WRITE flag
(1) 3603/     FE7 :                     .wait:
(1) 3604/     FE7 :                     	; Get stuck here until 68K finishes
(1) 3605/     FE7 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3606/     FEA : B7                  		or	a
(1) 3607/     FEB : 20 FA               		jr	nz,.wait
(1) 3608/     FED : DD E1               		pop	ix
(1) 3609/     FEF : C9                  		ret
(1) 3610/     FF0 :                     
(1) 3611/     FF0 :                     ; ------------------------------------------------
(1) 3612/     FF0 :                     ; b  - Source ROM $xx0000
(1) 3613/     FF0 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3614/     FF0 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3615/     FF0 :                     ; de - Output location
(1) 3616/     FF0 :                     ; ix - ROM-block flag
(1) 3617/     FF0 :                     ; ------------------------------------------------
(1) 3618/     FF0 :                     
(1) 3619/     FF0 :                     .transfer:
(1) 3620/     FF0 : CF                  		rst	8
(1) 3621/     FF1 : D5                  		push	de
(1) 3622/     FF2 : 11 00 60            		ld	de,6000h
(1) 3623/     FF5 : 7C                  		ld	a,h
(1) 3624/     FF6 : 07                  		rlca
(1) 3625/     FF7 : 12                  		ld	(de),a
(1) 3626/     FF8 : 78                  		ld	a,b
(1) 3627/     FF9 : CF                  		rst	8
(1) 3628/     FFA : 12                  		ld	(de),a
(1) 3629/     FFB : 0F                  		rrca
(1) 3630/     FFC : 12                  		ld	(de),a
(1) 3631/     FFD : 0F                  		rrca
(1) 3632/     FFE : 12                  		ld	(de),a
(1) 3633/     FFF : 0F                  		rrca
(1) 3634/    1000 : 12                  		ld	(de),a
(1) 3635/    1001 : 0F                  		rrca
(1) 3636/    1002 : CF                  		rst	8
(1) 3637/    1003 : 12                  		ld	(de),a
(1) 3638/    1004 : 0F                  		rrca
(1) 3639/    1005 : 12                  		ld	(de),a
(1) 3640/    1006 : 0F                  		rrca
(1) 3641/    1007 : 12                  		ld	(de),a
(1) 3642/    1008 : 0F                  		rrca
(1) 3643/    1009 : 12                  		ld	(de),a
(1) 3644/    100A : D1                  		pop	de
(1) 3645/    100B : CB FC               		set	7,h
(1) 3646/    100D : CF                  		rst	8
(1) 3647/    100E :                     	; Transfer ROM data in packets
(1) 3648/    100E :                     	; while playing the cache'd sample
(1) 3649/    100E :                     	; *** CRITICAL PROCESS ***
(1) 3650/    100E :                     	;
(1) 3651/    100E :                     	; pseudo-ref for ldir:
(1) 3652/    100E :                     	; ld (de),(hl)	; load memory (hl) to (de)
(1) 3653/    100E :                     	; inc de	; incr de + 1
(1) 3654/    100E :                     	; inc hl	; incr hl + 1
(1) 3655/    100E :                     	; dec bc	; decr bc - 1
(1) 3656/    100E : 06 00               		ld	b,0
(1) 3657/    1010 : 79                  		ld	a,c		; a - Size counter
(1) 3658/    1011 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3659/    1013 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3660/    1015 :                     .x68kloop:
(1) 3661/    1015 : CF                  		rst	8
(1) 3662/    1016 : 00                  		nop
(1) 3663/    1017 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3664/    1019 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3665/    101D : C4 37 10            		call	nz,.x68klpwt
(1) 3666/    1020 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3667/    1022 : CF                  		rst	8
(1) 3668/    1023 : 00                  		nop
(1) 3669/    1024 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3670/    1026 : D2 15 10            		jp	nc,.x68kloop
(1) 3671/    1029 :                     ; last block
(1) 3672/    1029 :                     .x68klast:
(1) 3673/    1029 : C6 08               		add	a,MAX_TRFRPZ
(1) 3674/    102B : 4F                  		ld	c,a
(1) 3675/    102C : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3676/    1030 : C4 37 10            		call	nz,.x68klpwt
(1) 3677/    1033 : ED B0               		ldir
(1) 3678/    1035 : CF                  		rst	8
(1) 3679/    1036 : C9                  		ret
(1) 3680/    1037 :                     
(1) 3681/    1037 :                     ; Wait here until Genesis unlocks ROM
(1) 3682/    1037 :                     .x68klpwt:
(1) 3683/    1037 : 00                  		nop
(1) 3684/    1038 : 00                  		nop
(1) 3686/    1039 : 00                  		nop
(1) 3687/    103A : 00                  		nop
(1) 3689/    103B : CF                  		rst	8
(1) 3691/    103C : 00                  		nop
(1) 3692/    103D : 00                  		nop
(1) 3694/    103E : 00                  		nop
(1) 3695/    103F : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3696/    1043 : 20 F2               		jr	nz,.x68klpwt
(1) 3697/    1045 : C9                  		ret
(1) 3698/    1046 :                     
(1) 3699/    1046 :                     ; ====================================================================
(1) 3700/    1046 :                     ; ----------------------------------------------------------------
(1) 3701/    1046 :                     ; Sound chip routines
(1) 3702/    1046 :                     ; ----------------------------------------------------------------
(1) 3703/    1046 :                     
(1) 3704/    1046 :                     ; --------------------------------------------------------
(1) 3705/    1046 :                     ; chip_env
(1) 3706/    1046 :                     ;
(1) 3707/    1046 :                     ; Process the PSG
(1) 3708/    1046 :                     ; --------------------------------------------------------
(1) 3709/    1046 :                     
(1) 3710/    1046 :                     chip_env:
(1) 3714/    1046 : FD 21 06 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3715/    104A : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3716/    104E : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3717/    1050 : 06 04               		ld	b,4			; b - 4 channels
(1) 3718/    1052 :                     .vloop:
(1) 3719/    1052 : CF                  		rst	8
(1) 3720/    1053 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3721/    1056 : FD 36 00 00         		ld	(iy+COM),0
(1) 3722/    105A :                     
(1) 3723/    105A :                     	; ----------------------------
(1) 3724/    105A :                     	; bit 2 - stop sound
(1) 3725/    105A : CB 53               		bit	2,e
(1) 3726/    105C : 28 0C               		jr	z,.ckof
(1) 3727/    105E : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3728/    1062 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3729/    1066 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3730/    106A :                     .ckof:
(1) 3731/    106A :                     	; ----------------------------
(1) 3732/    106A :                     	; bit 1 - key off
(1) 3733/    106A : CB 4B               		bit	1,e
(1) 3734/    106C : 28 0F               		jr      z,.ckon
(1) 3735/    106E : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3736/    1071 : B7                  		or	a
(1) 3737/    1072 : 28 09               		jr	z,.ckon
(1) 3738/    1074 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3739/    1078 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3740/    107C : CF                  		rst	8
(1) 3741/    107D :                     .ckon:
(1) 3742/    107D :                     	; ----------------------------
(1) 3743/    107D :                     	; bit 0 - key on
(1) 3744/    107D : CB 43               		bit	0,e
(1) 3745/    107F : 28 1A               		jr	z,.envproc
(1) 3746/    1081 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3747/    1085 : 78                  		ld	a,b
(1) 3748/    1086 : FE 04               		cp	4			; NOISE channel?
(1) 3749/    1088 : 20 08               		jr	nz,.nskip
(1) 3750/    108A : CF                  		rst	8			; Set NOISE mode
(1) 3751/    108B : 3A F6 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3752/    108E : B1                  		or	c
(1) 3753/    108F : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3754/    1092 :                     .nskip:
(1) 3755/    1092 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3756/    1096 : CF                  		rst	8
(1) 3757/    1097 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3758/    109B :                     .nblock:
(1) 3759/    109B :                     
(1) 3760/    109B :                     	; ----------------------------
(1) 3761/    109B :                     	; Process effects
(1) 3762/    109B :                     	; ----------------------------
(1) 3763/    109B :                     .envproc:
(1) 3764/    109B : FD 7E 18            		ld	a,(iy+MODE)
(1) 3765/    109E : B7                  		or	a			; no modes
(1) 3766/    109F : CA 25 11            		jp	z,.vedlp
(1) 3767/    10A2 : FE 01               		cp 	001b			; Attack mode
(1) 3768/    10A4 : 20 2C               		jr	nz,.chk2
(1) 3769/    10A6 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3770/    10AA : FD 5E 24            		ld	e,(iy+ALV)
(1) 3771/    10AD : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3772/    10B0 : B7                  		or	a
(1) 3773/    10B1 : 28 16               		jr	z,.atkend
(1) 3774/    10B3 : 57                  		ld	d,a			; c - attack rate
(1) 3775/    10B4 : 7B                  		ld	a,e			; a - attack level
(1) 3776/    10B5 : CF                  		rst	8
(1) 3777/    10B6 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3778/    10B9 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3779/    10BA : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3780/    10BC : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3781/    10BE : BB                  		cp	e			; attack rate == level?
(1) 3782/    10BF : 38 08               		jr	c,.atkend
(1) 3783/    10C1 : 28 06               		jr	z,.atkend
(1) 3784/    10C3 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3785/    10C6 : CF                  		rst	8
(1) 3786/    10C7 : 18 5C               		jr	.vedlp
(1) 3787/    10C9 :                     .atkend:
(1) 3788/    10C9 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3789/    10CC :                     .atkzero:
(1) 3790/    10CC : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3791/    10D0 : 18 53               		jr	.vedlp
(1) 3792/    10D2 :                     .chk2:
(1) 3793/    10D2 :                     
(1) 3794/    10D2 : FE 02               		cp	010b			; Decay mode
(1) 3795/    10D4 : 20 31               		jr	nz,.chk4
(1) 3796/    10D6 :                     .dectmr:
(1) 3797/    10D6 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3798/    10DA : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3799/    10DD : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3800/    10E0 : BB                  		cp	e
(1) 3801/    10E1 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3802/    10E3 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3803/    10E5 : CF                  		rst	8
(1) 3804/    10E6 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3805/    10E9 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3806/    10EB : BB                  		cp	e			; compare level
(1) 3807/    10EC : 38 0F               		jr	c,.dkyend		; and finish
(1) 3808/    10EE : 18 08               		jr	.dksav
(1) 3809/    10F0 :                     .dkadd:
(1) 3810/    10F0 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3811/    10F3 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3812/    10F5 : BB                  		cp	e			; compare level
(1) 3813/    10F6 : 30 05               		jr	nc,.dkyend
(1) 3814/    10F8 :                     .dksav:
(1) 3815/    10F8 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3816/    10FB : 18 28               		jr	.vedlp
(1) 3817/    10FD :                     .dkyend:
(1) 3818/    10FD : CF                  		rst	8
(1) 3819/    10FE : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3820/    1101 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3821/    1105 : 18 1E               		jr	.vedlp
(1) 3822/    1107 :                     .chk4:
(1) 3823/    1107 : FE 04               		cp	100b			; Sustain phase
(1) 3824/    1109 : 20 1A               		jr	nz,.vedlp
(1) 3825/    110B : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3826/    110F : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3827/    1112 : CF                  		rst	8
(1) 3828/    1113 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3829/    1116 : 38 05               		jr	c,.killenv		; release done
(1) 3830/    1118 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3831/    111B : 18 08               		jr	.vedlp
(1) 3832/    111D :                     .killenv:
(1) 3833/    111D : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3834/    1121 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3835/    1125 :                     .vedlp:
(1) 3836/    1125 :                     	; ----------------------------
(1) 3837/    1125 :                     	; PSG UPDATE
(1) 3838/    1125 :                     	; ----------------------------
(1) 3839/    1125 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3840/    1128 : B7                  		or	a
(1) 3841/    1129 : 28 72               		jr	z,.noupd
(1) 3842/    112B : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3843/    112F : 59                  		ld	e,c
(1) 3844/    1130 : 3A F6 1C            		ld	a,(psgHatMode)
(1) 3845/    1133 : 57                  		ld	d,a
(1) 3846/    1134 : E6 03               		and	011b
(1) 3847/    1136 : FE 03               		cp	011b
(1) 3848/    1138 : 20 1D               		jr	nz,.normal
(1) 3849/    113A : CF                  		rst	8
(1) 3850/    113B : 78                  		ld	a,b		; Channel 4?
(1) 3851/    113C : FE 03               		cp	3
(1) 3852/    113E : 28 13               		jr	z,.silnc_3
(1) 3853/    1140 : FE 04               		cp	4
(1) 3854/    1142 : 20 18               		jr	nz,.do_nfreq
(1) 3855/    1144 : 3A F6 1C            		ld	a,(psgHatMode)
(1) 3856/    1147 : 57                  		ld	d,a
(1) 3857/    1148 : E6 03               		and	011b
(1) 3858/    114A : CF                  		rst	8
(1) 3859/    114B : FE 03               		cp	011b
(1) 3860/    114D : 20 30               		jr	nz,.vonly
(1) 3861/    114F : 1E C0               		ld	e,0C0h
(1) 3862/    1151 : 18 09               		jr	.do_nfreq
(1) 3863/    1153 :                     .silnc_3:
(1) 3864/    1153 : 3E FF               		ld	a,-1
(1) 3865/    1155 : 18 32               		jr	.vlmuch
(1) 3866/    1157 :                     .normal:
(1) 3867/    1157 : 78                  		ld	a,b
(1) 3868/    1158 : FE 04               		cp	4
(1) 3869/    115A : 28 23               		jr	z,.vonly
(1) 3870/    115C :                     .do_nfreq:
(1) 3871/    115C : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3872/    115F : FD 66 20            		ld	h,(iy+DTH)
(1) 3873/    1162 :                     	; freq effects go here
(1) 3874/    1162 :                     	; (save e FIRST.)
(1) 3875/    1162 :                     	;	push	de
(1) 3876/    1162 :                     	;	pop	de
(1) 3877/    1162 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3878/    1163 : E6 0F               		and	00001111b
(1) 3879/    1165 : B3                  		or	e		; OR with channel set in e
(1) 3880/    1166 : CF                  		rst	8
(1) 3881/    1167 : DD 77 00            		ld	(ix),a		; write it
(1) 3882/    116A : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3883/    116B : 0F                  		rrca
(1) 3884/    116C : 0F                  		rrca
(1) 3885/    116D : 0F                  		rrca
(1) 3886/    116E : 0F                  		rrca
(1) 3887/    116F : E6 0F               		and	00001111b
(1) 3888/    1171 : 5F                  		ld	e,a
(1) 3889/    1172 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3890/    1173 : CF                  		rst	8
(1) 3891/    1174 : 07                  		rlca
(1) 3892/    1175 : 07                  		rlca
(1) 3893/    1176 : 07                  		rlca
(1) 3894/    1177 : 07                  		rlca
(1) 3895/    1178 : E6 30               		and	00110000b
(1) 3896/    117A : B3                  		or	e
(1) 3897/    117B : DD 77 00            		ld	(ix),a
(1) 3898/    117E : CF                  		rst	8
(1) 3899/    117F :                     .vonly:
(1) 3900/    117F : FD 7E 30            		ld	a,(iy+MVOL)		; c - Level
(1) 3901/    1182 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3902/    1185 : 30 02               		jr	nc,.vlmuch
(1) 3903/    1187 : 3E FF               		ld	a,-1
(1) 3904/    1189 :                     .vlmuch:
(1) 3905/    1189 : CB 3F               		srl	a			; (Level >> 4)
(1) 3906/    118B : CB 3F               		srl	a
(1) 3907/    118D : CB 3F               		srl	a
(1) 3908/    118F : CF                  		rst	8
(1) 3909/    1190 : CB 3F               		srl	a
(1) 3910/    1192 : E6 0F               		and	00001111b		; Filter volume value
(1) 3911/    1194 : B1                  		or	c			; and OR with current channel
(1) 3912/    1195 : F6 90               		or	90h			; Set volume-set mode
(1) 3913/    1197 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3914/    119A : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3915/    119D :                     .noupd:
(1) 3916/    119D :                     	; ----------------------------
(1) 3917/    119D : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3918/    119F : 79                  		ld	a,c
(1) 3919/    11A0 : CF                  		rst	8
(1) 3920/    11A1 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3921/    11A3 : 4F                  		ld	c,a
(1) 3922/    11A4 : 05                  		dec	b
(1) 3923/    11A5 : C2 52 10            		jp	nz,.vloop
(1) 3924/    11A8 : C9                  		ret
(1) 3925/    11A9 :                     
(1) 3926/    11A9 :                     ; ---------------------------------------------
(1) 3927/    11A9 :                     ; FM register writes
(1) 3928/    11A9 :                     ;
(1) 3929/    11A9 :                     ; Input:
(1) 3930/    11A9 :                     ; d - ctrl
(1) 3931/    11A9 :                     ; e - data
(1) 3932/    11A9 :                     ; ---------------------------------------------
(1) 3933/    11A9 :                     
(1) 3934/    11A9 :                     ; c - KeyID
(1) 3935/    11A9 :                     fm_autoreg:
(1) 3936/    11A9 : CB 51               		bit	2,c
(1) 3937/    11AB : 20 0B               		jr	nz,fm_send_2
(1) 3938/    11AD :                     
(1) 3939/    11AD :                     ; Channels 1-3 and global registers
(1) 3940/    11AD :                     fm_send_1:
(1) 3941/    11AD : 7A                  		ld	a,d
(1) 3942/    11AE : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3943/    11B1 : 00                  		nop
(1) 3944/    11B2 : 7B                  		ld	a,e
(1) 3945/    11B3 : 32 01 40            		ld	(Zym_data_1),a
(1) 3946/    11B6 : 00                  		nop
(1) 3947/    11B7 : C9                  		ret
(1) 3948/    11B8 :                     ; Channels 4-6
(1) 3949/    11B8 :                     fm_send_2:
(1) 3950/    11B8 : 7A                  		ld	a,d
(1) 3951/    11B9 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3952/    11BC : 00                  		nop
(1) 3953/    11BD : 7B                  		ld	a,e
(1) 3954/    11BE : 32 03 40            		ld	(Zym_data_2),a
(1) 3955/    11C1 : 00                  		nop
(1) 3956/    11C2 : C9                  		ret
(1) 3957/    11C3 :                     
(1) 3958/    11C3 :                     ; --------------------------------------------------------
(1) 3959/    11C3 :                     ; brute-force WAVE ON/OFF playback
(1) 3960/    11C3 :                     ; --------------------------------------------------------
(1) 3961/    11C3 :                     
(1) 3962/    11C3 :                     dac_on:
(1) 3963/    11C3 : 3E 2B               		ld	a,2Bh
(1) 3964/    11C5 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3965/    11C8 : 3E 80               		ld	a,80h
(1) 3966/    11CA : 32 01 40            		ld	(Zym_data_1),a
(1) 3967/    11CD : 3E D9               		ld 	a,zopcExx
(1) 3968/    11CF : 32 08 00            		ld	(dac_me),a
(1) 3969/    11D2 : 3E F5               		ld 	a,zopcPushAf
(1) 3970/    11D4 : 32 20 00            		ld	(dac_fill),a
(1) 3971/    11D7 : C9                  		ret
(1) 3972/    11D8 :                     dac_off:
(1) 3973/    11D8 : 3E 2B               		ld	a,2Bh
(1) 3974/    11DA : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3975/    11DD : 3E 00               		ld	a,00h
(1) 3976/    11DF : 32 01 40            		ld	(Zym_data_1),a
(1) 3977/    11E2 : 3E C9               		ld 	a,zopcRet
(1) 3978/    11E4 : 32 08 00            		ld	(dac_me),a
(1) 3979/    11E7 : 3E C9               		ld 	a,zopcRet
(1) 3980/    11E9 : 32 20 00            		ld	(dac_fill),a
(1) 3981/    11EC : C9                  		ret
(1) 3982/    11ED :                     
(1) 3983/    11ED :                     ; --------------------------------------------------------
(1) 3984/    11ED :                     ; dac_play
(1) 3985/    11ED :                     ;
(1) 3986/    11ED :                     ; Plays a new sample
(1) 3987/    11ED :                     ;
(1) 3988/    11ED :                     ; NOTE:
(1) 3989/    11ED :                     ; Set wave_Flags and wave_Pitch externally
(1) 3990/    11ED :                     ; getting here.
(1) 3991/    11ED :                     ; --------------------------------------------------------
(1) 3992/    11ED :                     
(1) 3993/    11ED :                     dac_play:
(1) 3994/    11ED : F3                  		di
(1) 3995/    11EE : CD D8 11            		call	dac_off
(1) 3996/    11F1 : D9                  		exx				; flip exx regs
(1) 3997/    11F2 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3998/    11F5 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3999/    11F9 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4000/    11FC : D9                  		exx				; move them back
(1) 4001/    11FD : 2A EA 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4002/    1200 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4003/    1203 : 22 63 1F            		ld	(dDacPntr),hl
(1) 4004/    1206 : 32 65 1F            		ld	(dDacPntr+2),a
(1) 4005/    1209 : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4006/    120C : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4007/    120F : 22 66 1F            		ld	(dDacCntr),hl
(1) 4008/    1212 : 32 68 1F            		ld	(dDacCntr+2),a
(1) 4009/    1215 : AF                  		xor	a
(1) 4010/    1216 : 32 62 1F            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4011/    1219 : CD 21 12            		call	dac_refill
(1) 4012/    121C : CD C3 11            		call	dac_on
(1) 4013/    121F : FB                  		ei
(1) 4014/    1220 : C9                  		ret
(1) 4015/    1221 :                     
(1) 4016/    1221 :                     ; --------------------------------------------------------
(1) 4017/    1221 :                     
(1) 4018/    1221 :                     dac_refill:
(1) 4019/    1221 : CF                  		rst	8
(1) 4020/    1222 : C5                  		push	bc
(1) 4021/    1223 : D5                  		push	de
(1) 4022/    1224 : E5                  		push	hl
(1) 4023/    1225 : 3A F5 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4024/    1228 : FE 07               		cp	111b
(1) 4025/    122A : D2 E0 12            		jp	nc,.dacfill_end
(1) 4026/    122D : 3A 68 1F            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4027/    1230 : 2A 66 1F            		ld	hl,(dDacCntr)
(1) 4028/    1233 : 01 80 00            		ld	bc,80h
(1) 4029/    1236 : 37                  		scf
(1) 4030/    1237 : 3F                  		ccf
(1) 4031/    1238 : ED 42               		sbc	hl,bc
(1) 4032/    123A : DE 00               		sbc	a,0
(1) 4033/    123C : 32 68 1F            		ld	(dDacCntr+2),a
(1) 4034/    123F : 22 66 1F            		ld	(dDacCntr),hl
(1) 4035/    1242 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4036/    1244 : B7                  		or	a
(1) 4037/    1245 : FA 6F 12            		jp	m,.dac_over
(1) 4038/    1248 : 3A 62 1F            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4039/    124B : 5F                  		ld	e,a
(1) 4040/    124C : C6 80               		add 	a,80h
(1) 4041/    124E : 32 62 1F            		ld	(dDacFifoMid),a
(1) 4042/    1251 : 2A 63 1F            		ld	hl,(dDacPntr)
(1) 4043/    1254 : 3A 65 1F            		ld	a,(dDacPntr+2)
(1) 4044/    1257 : CD 89 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4045/    125A : 2A 63 1F            		ld	hl,(dDacPntr)
(1) 4046/    125D : 3A 65 1F            		ld	a,(dDacPntr+2)
(1) 4047/    1260 : 01 80 00            		ld	bc,80h
(1) 4048/    1263 : 09                  		add	hl,bc
(1) 4049/    1264 : CE 00               		adc	a,0
(1) 4050/    1266 : 22 63 1F            		ld	(dDacPntr),hl
(1) 4051/    1269 : 32 65 1F            		ld	(dDacPntr+2),a
(1) 4052/    126C : C3 E3 12            		jp	.dacfill_ret
(1) 4053/    126F :                     ; NOTE: This doesn't finish at the exact END point
(1) 4054/    126F :                     ; but the USER won't notice it.
(1) 4055/    126F :                     .dac_over:
(1) 4056/    126F : 16 1D               		ld	d,dWaveBuff>>8
(1) 4057/    1271 : 3A F5 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4058/    1274 : E6 01               		and	001b
(1) 4059/    1276 : C2 99 12            		jp	nz,.dacfill_loop
(1) 4060/    1279 : 7D                  		ld	a,l
(1) 4061/    127A : C6 80               		add	a,80h
(1) 4062/    127C : 4F                  		ld	c,a
(1) 4063/    127D : 06 00               		ld	b,0
(1) 4064/    127F : C5                  		push	bc
(1) 4065/    1280 : 3A 62 1F            		ld	a,(dDacFifoMid)
(1) 4066/    1283 : 5F                  		ld	e,a
(1) 4067/    1284 : C6 80               		add	a,80h
(1) 4068/    1286 : 32 62 1F            		ld	(dDacFifoMid),a
(1) 4069/    1289 : C1                  		pop	bc
(1) 4070/    128A : 79                  		ld	a,c
(1) 4071/    128B : B0                  		or	b
(1) 4072/    128C : 28 52               		jr	z,.dacfill_end
(1) 4073/    128E : 2A 63 1F            		ld	hl,(dDacPntr)
(1) 4074/    1291 : 3A 65 1F            		ld	a,(dDacPntr+2)
(1) 4075/    1294 : CD 89 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4076/    1297 : 18 47               		jr	.dacfill_end
(1) 4077/    1299 :                     ; loop sample
(1) 4078/    1299 :                     .dacfill_loop:
(1) 4079/    1299 : C5                  		push	bc
(1) 4080/    129A : D5                  		push	de
(1) 4081/    129B : 3A F2 1C            		ld	a,(wave_Loop+2)
(1) 4082/    129E : 4F                  		ld	c,a
(1) 4083/    129F : ED 5B F0 1C         		ld	de,(wave_Loop)
(1) 4084/    12A3 : 2A EA 1C            		ld	hl,(wave_Start)
(1) 4085/    12A6 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4086/    12A9 : 81                  		add	a,c
(1) 4087/    12AA : 19                  		add	hl,de
(1) 4088/    12AB : CE 00               		adc	a,0
(1) 4089/    12AD : 22 63 1F            		ld	(dDacPntr),hl
(1) 4090/    12B0 : 32 65 1F            		ld	(dDacPntr+2),a
(1) 4091/    12B3 : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4092/    12B6 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4093/    12B9 : 91                  		sub	a,c
(1) 4094/    12BA : 37                  		scf
(1) 4095/    12BB : 3F                  		ccf
(1) 4096/    12BC : ED 52               		sbc	hl,de
(1) 4097/    12BE : DE 00               		sbc	a,0
(1) 4098/    12C0 : 22 66 1F            		ld	(dDacCntr),hl
(1) 4099/    12C3 : 32 68 1F            		ld	(dDacCntr+2),a
(1) 4100/    12C6 : D1                  		pop	de
(1) 4101/    12C7 : C1                  		pop	bc
(1) 4102/    12C8 : 78                  		ld	a,b
(1) 4103/    12C9 : B1                  		or	c
(1) 4104/    12CA : 28 17               		jr	z,.dacfill_ret
(1) 4105/    12CC : 3A 62 1F            		ld	a,(dDacFifoMid)
(1) 4106/    12CF : 5F                  		ld	e,a
(1) 4107/    12D0 : C6 80               		add	a,80h
(1) 4108/    12D2 : 32 62 1F            		ld	(dDacFifoMid),a
(1) 4109/    12D5 : 2A 63 1F            		ld	hl,(dDacPntr)
(1) 4110/    12D8 : 3A 65 1F            		ld	a,(dDacPntr+2)
(1) 4111/    12DB : CD 89 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4112/    12DE : 18 03               		jr	.dacfill_ret
(1) 4113/    12E0 :                     .dacfill_end:
(1) 4114/    12E0 : CD D8 11            		call	dac_off		; DAC finished
(1) 4115/    12E3 :                     .dacfill_ret:
(1) 4116/    12E3 : E1                  		pop	hl
(1) 4117/    12E4 : D1                  		pop	de
(1) 4118/    12E5 : C1                  		pop	bc
(1) 4119/    12E6 : C9                  		ret
(1) 4120/    12E7 :                     
(1) 4121/    12E7 :                     ; ----------------------------------------------------------------
(1) 4122/    12E7 :                     ; gema_lastbank
(1) 4123/    12E7 :                     ;
(1) 4124/    12E7 :                     ; Two purposes:
(1) 4125/    12E7 :                     ; - Set the BANK to the very last part of memory for the
(1) 4126/    12E7 :                     ;   readRom to read from RAM
(1) 4127/    12E7 :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4128/    12E7 :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4129/    12E7 :                     ;
(1) 4130/    12E7 :                     ; Uses:
(1) 4131/    12E7 :                     ; hl,b
(1) 4132/    12E7 :                     ; ----------------------------------------------------------------
(1) 4133/    12E7 :                     
(1) 4134/    12E7 :                     gema_lastbank:
(1) 4135/    12E7 : 21 00 60            		ld	hl,6000h
(1) 4136/    12EA : 06 09               		ld	b,9		; 9 bits
(1) 4137/    12EC :                     .write:
(1) 4138/    12EC : 36 01               		ld	(hl),1
(1) 4139/    12EE : 10 FC               		djnz	.write
(1) 4140/    12F0 : C9                  		ret
(1) 4141/    12F1 :                     
(1) 4142/    12F1 :                     ; ====================================================================
(1) 4143/    12F1 :                     ; ----------------------------------------------------------------
(1) 4144/    12F1 :                     ; Frequency tables
(1) 4145/    12F1 :                     ; ----------------------------------------------------------------
(1) 4146/    12F1 :                     
(1) 4147/    12F1 : 84 02               fmFreq_List:	dw 644
(1) 4148/    12F3 : A9 02               		dw 681
(1) 4149/    12F5 : D2 02               		dw 722
(1) 4150/    12F7 : FD 02               		dw 765
(1) 4151/    12F9 : 2A 03               		dw 810
(1) 4152/    12FB : 5A 03               		dw 858
(1) 4153/    12FD : 8E 03               		dw 910
(1) 4154/    12FF : C4 03               		dw 964
(1) 4155/    1301 : FD 03               		dw 1021
(1) 4156/    1303 : 39 04               		dw 1081
(1) 4157/    1305 : 7A 04               		dw 1146
(1) 4158/    1307 : BE 04               		dw 1214
(1) 4159/    1309 :                     
(1) 4160/    1309 :                     ; ----------------------------------------
(1) 4161/    1309 :                     ; DAC and PWM
(1) 4162/    1309 :                     ; ----------------------------------------
(1) 4163/    1309 :                     
(1) 4164/    1309 :                     psgFreq_List:
(1) 4165/    1309 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4166/    1309 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4167/    1309 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4168/    1309 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             130F : FF FF FF FF FF FF 
             1315 : FF FF FF FF FF FF 
             131B : F8 03 BF 03 89 03 
(1) 4169/    1321 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1327 : CE 02 A5 02 80 02 
             132D : 5C 02 3A 02 1A 02 
             1333 : FB 01 DF 01 C4 01 
(1) 4170/    1339 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             133F : 67 01 53 01 40 01 
             1345 : 2E 01 1D 01 0D 01 
             134B : FE 00 EF 00 E2 00 
(1) 4171/    1351 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             1357 : B4 00 A9 00 A0 00 
             135D : 97 00 8F 00 87 00 
             1363 : 7F 00 78 00 71 00 
(1) 4172/    1369 : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             136F : 5A 00 55 00 50 00 
             1375 : 4B 00 47 00 43 00 
             137B : 40 00 3C 00 39 00 
(1) 4173/    1381 : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             1387 : 2D 00 2B 00 28 00 
             138D : 26 00 24 00 22 00 
             1393 : 20 00 1F 00 1D 00 
(1) 4174/    1399 : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             139F : 17 00 16 00 15 00 
             13A5 : 13 00 12 00 11 00 
             13AB : 10 00 09 00 01 00 
(1) 4175/    13B1 :                     
(1) 4176/    13B1 :                     ; ----------------------------------------
(1) 4177/    13B1 :                     ; DAC and PWM shared list
(1) 4178/    13B1 :                     ; ----------------------------------------
(1) 4179/    13B1 :                     
(1) 4180/    13B1 :                     wavFreq_List:
(1) 4181/    13B1 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4182/    13B1 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4183/    13B1 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4184/    13B1 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4185/    13B1 : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0051h,0056h,005Bh,0060h,0066h,006Ch,0073h,0079h	; x-3 4000 ok
             13B7 : 4C 00 51 00 56 00 
             13BD : 5B 00 60 00 66 00 
             13C3 : 6C 00 73 00 79 00 
(1) 4186/    13C9 : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,0099h,00A2h,00ACh,00B6h,00C1h,00CCh,00D8h,00E5h,00F2h	; x-4 8000 ok
             13CF : 99 00 A2 00 AC 00 
             13D5 : B6 00 C1 00 CC 00 
             13DB : D8 00 E5 00 F2 00 
(1) 4187/    13E1 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,0132h,0145h,0158h,016Ch,0182h,0198h,01AEh,01C7h,01E0h	; x-5 16000 ok
             13E7 : 32 01 45 01 58 01 
             13ED : 6C 01 82 01 98 01 
             13F3 : AE 01 C7 01 E0 01 
(1) 4188/    13F9 : 00 02 20 02 40 02   	dw 0200h,0220h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0328h,0352h,0390h,03C8h	; x-6 32000 bad/ok
             13FF : 60 02 80 02 A0 02 
             1405 : D0 02 F8 02 28 03 
             140B : 52 03 90 03 C8 03 
(1) 4189/    1411 : 00 04               	dw 0400h;,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4190/    1413 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4191/    1413 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4192/    1413 :                     
(1) 4193/    1413 :                     ; ----------------------------------------
(1) 4194/    1413 :                     ; SegaCD PCM
(1) 4195/    1413 :                     ; ----------------------------------------
(1) 4196/    1413 :                     wavFreq_CdPcm:
(1) 4197/    1413 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4198/    1413 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4199/    1413 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4200/    1413 : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             1419 : 28 01 3C 01 4C 01 
             141F : 60 01 7C 01 88 01 
             1425 : AA 01 BC 01 DC 01 
(1) 4201/    142B : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             1431 : 58 02 7C 02 A0 02 
             1437 : C8 02 FC 02 1C 03 
             143D : 54 03 7C 03 B8 03 
(1) 4202/    1443 : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1449 : AC 04 EC 04 40 05 
             144F : 90 05 E4 05 3C 06 
             1455 : 98 06 04 07 60 07 
(1) 4203/    145B : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             1461 : 60 09 F0 09 64 0A 
             1467 : 04 0B AA 0B 60 0C 
             146D : 18 0D E4 0D B8 0E 
(1) 4204/    1473 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 untested
             1479 : 80 12 9C 13 C8 14 
             147F : 24 16 4C 17 DC 18 
             1485 : 38 1A E0 1B 94 1D 
(1) 4205/    148B :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4206/    148B :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4207/    148B :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4208/    148B :                     
(1) 4209/    148B :                     ; ====================================================================
(1) 4210/    148B :                     ; ----------------------------------------------------------------
(1) 4211/    148B :                     ; Chip buffers
(1) 4212/    148B :                     ; ----------------------------------------------------------------
(1) 4213/    148B :                     
(1) 4214/    148B : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             1491 : 00 00             
(1) 4215/    1493 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             1499 : 00 00             
(1) 4216/    149B : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14A1 : 00 00             
(1) 4217/    14A3 : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 24 - Volume
             14A9 : FF FF             
(1) 4218/    14AB : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 32 - CURRENT Panning %RRRRLLLL
             14B1 : FF FF             
(1) 4219/    14B3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             14B9 : 00 00             
(1) 4220/    14BB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14C1 : 00 00             
(1) 4221/    14C3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14C9 : 00 00             
(1) 4222/    14CB :                     
(1) 4223/    14CB : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14D1 : 00 00             
(1) 4224/    14D3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14D9 : 00 00             
(1) 4225/    14DB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14E1 : 00 00             
(1) 4226/    14E3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             14E9 : 00 00             
(1) 4227/    14EB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             14F1 : 00 00             
(1) 4228/    14F3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             14F9 : 00 00             
(1) 4229/    14FB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1501 : 00 00             
(1) 4230/    1503 :                     
(1) 4231/    1503 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4232/    1507 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4233/    150B : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4234/    150F : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4235/    1513 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4236/    1517 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4237/    151B : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4238/    151F : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4239/    1523 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4240/    1527 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4241/    152B : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4242/    152F : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4243/    1533 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4244/    1537 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4245/    153B : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4246/    153F :                     
(1) 4247/    153F :                     ; --------------------------------------------------------
(1) 4248/    153F :                     fmcach_1	ds 28h
(1) 4249/    1567 :                     fmcach_2	ds 28h
(1) 4250/    158F :                     fmcach_3	ds 28h
(1) 4251/    15B7 :                     fmcach_4	ds 28h
(1) 4252/    15DF :                     fmcach_5	ds 28h
(1) 4253/    1607 :                     fmcach_6	ds 28h
(1) 4254/    162F :                     fmlist_rsave	ds 4*3		; 4 bytes per channel: 0000h,00h,00h
(1) 4255/    163B :                     trkInfoCach	ds 4
(1) 4256/    163F :                     		ds 4*3		; _rsave followup
(1) 4257/    164B :                     
(1) 4258/    164B :                     ; ====================================================================
(1) 4259/    164B :                     ; ----------------------------------------------------------------
(1) 4260/    164B :                     ; Track buffers
(1) 4261/    164B :                     ; ----------------------------------------------------------------
(1) 4262/    164B :                     
(1) 4263/    164B :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4264/    166B :                     trkHdrs_1	ds 8*4
(1) 4265/    168B :                     trkHdrs_2	ds 8*4
(1) 4266/    16AB :                     trkBlks_0	ds 8
(1) 4267/    16B3 :                     trkBlks_1	ds 8
(1) 4268/    16BB :                     trkBlks_2	ds 8
(1) 4269/    16C3 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4270/    1702 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4271/    1741 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4272/    1780 : 3F 15               fmcach_list:	dw fmcach_1
(1) 4273/    1782 : 67 15               		dw fmcach_2
(1) 4274/    1784 : 8F 15               		dw fmcach_3
(1) 4275/    1786 : 00                  marsUpd		db 0			; Flag to request a PWM transfer
(1) 4276/    1787 : 00                  mcdUpd		db 0			; Flag to request a PCM transfer
(1) 4277/    1788 : B7 15               		dw fmcach_4		; Followup
(1) 4278/    178A : DF 15               		dw fmcach_5
(1) 4279/    178C : 07 16               		dw fmcach_6
(1) 4280/    178E :                     
(1) 4281/    178E :                     ; ====================================================================
(1) 4282/    178E :                     ; --------------------------------------------------------
(1) 4283/    178E :                     ; MASTER buffers list
(1) 4284/    178E :                     ;
(1) 4285/    178E :                     ; dw track_buffer
(1) 4286/    178E :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4287/    178E :                     ;
(1) 4288/    178E :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4289/    178E :                     ; --------------------------------------------------------
(1) 4290/    178E :                     
(1) 4291/    178E :                     nikona_BuffList:
(1) 4292/    178E : C3 16 AB 16 4B 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1794 : 00 1F             
(1) 4293/    1796 : 02 17 B3 16 6B 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             179C : 20 1F             
(1) 4294/    179E : 41 17 BB 16 8B 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             17A4 : 40 1F             
(1) 4295/    17A6 :                     nikona_BuffList_e:
(1) 4296/    17A6 : FF FF               	dw -1	; ENDOFLIST
(1) 4297/    17A8 :                     
(1) 4298/    17A8 :                     ; ====================================================================
(1) 4299/    17A8 :                     ; --------------------------------------------------------
(1) 4300/    17A8 :                     ; Channel tables
(1) 4301/    17A8 :                     ;
(1) 4302/    17A8 :                     ; PSG   80h
(1) 4303/    17A8 :                     ; PSGN  90h
(1) 4304/    17A8 :                     ; FM   0A0h
(1) 4305/    17A8 :                     ; FM3  0B0h
(1) 4306/    17A8 :                     ; DAC  0C0h
(1) 4307/    17A8 :                     ; PCM  0D0h
(1) 4308/    17A8 :                     ; PWM  0E0h
(1) 4309/    17A8 :                     ; --------------------------------------------------------
(1) 4310/    17A8 :                     
(1) 4311/    1B00 :                     		org 1B00h			; <-- MUST BE x0h ALIGNED
(1) 4312/    1B00 : 0E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4313/    1B02 : 46 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4314/    1B04 : A0 00               		dw tblFM-tblList		; 0A0h
(1) 4315/    1B06 : E8 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4316/    1B08 : FA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4317/    1B0A : 0E 00               		dw tblPCM-tblList		; 0D0h
(1) 4318/    1B0C : 58 01               		dw tblPWM-tblList		; 0E0h
(1) 4319/    1B0E :                     ; 		dw 0				; 0F0h
(1) 4320/    1B0E :                     ; --------------------------------------------------------
(1) 4321/    1B0E : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B14 : 00 00 00 00       
(1) 4322/    1B18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1E : 00 00             
(1) 4323/    1B20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1B26 : 00 00 00 00       
(1) 4324/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4325/    1B32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1B38 : 00 00 00 00       
(1) 4326/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4327/    1B44 : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1B4A : 00 00 00 00       
(1) 4328/    1B4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B54 : 00 00             
(1) 4329/    1B56 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1B5C : 00 00 00 00       
(1) 4330/    1B60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B66 : 00 00             
(1) 4331/    1B68 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1B6E : 00 00 00 00       
(1) 4332/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4333/    1B7A : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1B80 : 00 00 00 00       
(1) 4334/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4335/    1B8C : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1B92 : 00 00 00 00       
(1) 4336/    1B96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9C : 00 00             
(1) 4337/    1B9E : FF FF               		dw -1	; end-of-list
(1) 4338/    1BA0 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BA6 : 00 00 00 00       
(1) 4339/    1BAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB0 : 00 00             
(1) 4340/    1BB2 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1BB8 : 00 00 00 00       
(1) 4341/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4342/    1BC4 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 4 <--
             1BCA : 00 00 00 00       
(1) 4343/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4344/    1BD6 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 5
             1BDC : 00 00 00 00       
(1) 4345/    1BE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BE6 : 00 00             
(1) 4346/    1BE8 : 00 00 00 02 00 00   tblFM3:		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3 <--
             1BEE : 00 00 00 00       
(1) 4347/    1BF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF8 : 00 00             
(1) 4348/    1BFA : 00 00 00 06 00 00   tblFM6:		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 6 <--
             1C00 : 00 00 00 00       
(1) 4349/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4350/    1C0C : FF FF               		dw -1	; end-of-list
(1) 4351/    1C0E : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C14 : 00 00 00 00       
(1) 4352/    1C18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1E : 00 00             
(1) 4353/    1C20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C26 : 00 00 00 00       
(1) 4354/    1C2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C30 : 00 00             
(1) 4355/    1C32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C38 : 00 00 00 00       
(1) 4356/    1C3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C42 : 00 00             
(1) 4357/    1C44 : FF FF               		dw -1	; end-of-list
(1) 4358/    1C46 : 00 00 00 03 00 00   tblPSGN:	db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Noise
             1C4C : 00 00 00 00       
(1) 4359/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4360/    1C58 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C5E : 00 00 00 00       
(1) 4361/    1C62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C68 : 00 00             
(1) 4362/    1C6A : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C70 : 00 00 00 00       
(1) 4363/    1C74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C7A : 00 00             
(1) 4364/    1C7C : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C82 : 00 00 00 00       
(1) 4365/    1C86 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8C : 00 00             
(1) 4366/    1C8E : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1C94 : 00 00 00 00       
(1) 4367/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4368/    1CA0 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1CA6 : 00 00 00 00       
(1) 4369/    1CAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB0 : 00 00             
(1) 4370/    1CB2 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1CB8 : 00 00 00 00       
(1) 4371/    1CBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC2 : 00 00             
(1) 4372/    1CC4 : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1CCA : 00 00 00 00       
(1) 4373/    1CCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD4 : 00 00             
(1) 4374/    1CD6 : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1CDC : 00 00 00 00       
(1) 4375/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4376/    1CE8 : FF FF               		dw -1	; end-of-list
(1) 4377/    1CEA :                     
(1) 4378/    1CEA :                     ; ----------------------------------------------------------------
(1) 4379/    1CEA :                     ; Variables inside 1B00h-1CFFh
(1) 4380/    1CEA :                     
(1) 4381/    1CEA : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4382/    1CEC : 00                  		db 0
(1) 4383/    1CED : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4384/    1CEF : 00                  		db 0
(1) 4385/    1CF0 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4386/    1CF2 : 00                  		db 0
(1) 4387/    1CF3 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4388/    1CF5 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4389/    1CF6 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4390/    1CF7 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4391/    1CF8 : 00                  tickSpSet	db 0		; **
(1) 4392/    1CF9 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4393/    1CFA : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4394/    1CFB : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4395/    1CFC : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4396/    1CFE : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4397/    1D00 :                     
(1) 4398/    1D00 :                     ; ====================================================================
(1) 4399/    1D00 :                     ; ----------------------------------------------------------------
(1) 4400/    1D00 :                     ; Special aligned buffers
(1) 4401/    1D00 :                     ;
(1) 4402/    1D00 :                     ; Located at 1D00h
(1) 4403/    1D00 :                     ; ----------------------------------------------------------------
(1) 4404/    1D00 :                     
(1) 4405/    1D00 :                     		org 1D00h
(1) 4406/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes
(1) 4407/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4408/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4409/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4410/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4411/    1F60 :                     ; trkCach_3	ds MAX_RCACH
(1) 4412/    1F60 :                     ; --------------------------------------------------------
(1) 4413/    1F60 : 00                  x68ksrclsb	db 0		; readRom temporal LSB
(1) 4414/    1F61 : 00                  x68ksrcmid	db 0		; readRom temporal MID
(1) 4415/    1F62 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4416/    1F63 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4417/    1F66 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4418/    1F69 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4419/    1F77 :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4420/    1F79 :                     sampleHead	ds 006h
(1) 4421/    1F7F :                     instListOut	ds 8
(1) 4422/    1F87 :                     ; --------------------------------------------------------
(1) 4423/    3E63 :                     		dephase
(1) 4424/    3E63 :                     		cpu 68000		; [AS] Return to 68k
(1) 4425/    3E63 :                     		padding off		; [AS] NO padding
(1) 4426/    3E63 :                     		align 2
(1) 4427/    3E64 :                     
     317/    3E64 :                     Z80_CODE_END:
     324/    3E64 :                     Z80_CODE_FILE_E:
     325/    3E64 :                     
     326/    3E64 :                     ; ====================================================================
     327/    3E64 :                     ; --------------------------------------------------------
     328/    3E64 :                     ; SEGA CD SUB-CPU data
     329/    3E64 :                     ; --------------------------------------------------------
     330/    3E64 :                     
     345/    3E64 :                     
     346/    3E64 :                     ; ====================================================================
     347/    3E64 :                     ; ----------------------------------------------------------------
     348/    3E64 :                     ; SH2 code sent to SDRAM area
     349/    3E64 :                     ; ----------------------------------------------------------------
     350/    3E64 :                     
     356/    3E64 :                     MARS_RAMCODE:
     362/    3E64 :                     		align 4
     364/    3E64 :                     MARS_RAMCODE_E:
     369/    3E64 :                     
     370/    3E64 :                     ; ====================================================================
     371/    3E64 :                     ; --------------------------------------------------------
     372/    3E64 :                     ; CODE BLOCK (banks)
     373/    3E64 :                     ; --------------------------------------------------------
     374/    3E64 :                     
     375/    3E64 :                     		include "game/incl_code.asm"
(1)    1/    3E64 :                     ; ============================================================
(1)    2/    3E64 :                     ; --------------------------------------------------------
(1)    3/    3E64 :                     ; CODE BANKS section
(1)    4/    3E64 :                     ;
(1)    5/    3E64 :                     ; Usage:
(1)    6/    3E64 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/    3E64 :                     ;
(1)    8/    3E64 :                     ; NOTES:
(1)    9/    3E64 :                     ; - Screen order is at game/screens.asm
(1)   10/    3E64 :                     ; - DATA banks are loaded separately inside the
(1)   11/    3E64 :                     ;   screen's code
(1)   12/    3E64 :                     ; --------------------------------------------------------
(1)   13/    3E64 :                     
(1)   14/    3E64 :                     	;screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/    3E64 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/sound_test.asm"
(1)   15/    3E64 : =$3E64               MD_SCREEN00 label *
(1)   15/    3E64 :                     
(1)   15/    3E64 :                     mctopscrn:
(1)   15/    3E64 :                     mcscrn_s:
(1)   15/    3E64 :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/    3E64 :                     ; ===========================================================================
(2)    2/    3E64 :                     ; ----------------------------------------------------------------
(2)    3/    3E64 :                     ; GEMA SOUND TESTER
(2)    4/    3E64 :                     ; ----------------------------------------------------------------
(2)    5/    3E64 :                     
(2)    6/    3E64 :                     ; ====================================================================
(2)    7/    3E64 :                     ; ------------------------------------------------------
(2)    8/    3E64 :                     ; Variables
(2)    9/    3E64 :                     ; ------------------------------------------------------
(2)   10/    3E64 :                     
(2)   11/    3E64 : =$7                  MAX_SNDPICK		equ 7
(2)   12/    3E64 : =$16                 SET_SNDVIEWY		equ 22
(2)   13/    3E64 :                     
(2)   14/    3E64 :                     ; ====================================================================
(2)   15/    3E64 :                     ; ------------------------------------------------------
(2)   16/    3E64 :                     ; Structs
(2)   17/    3E64 :                     ; ------------------------------------------------------
(2)   18/    3E64 :                     
(2)   19/    3E64 :  (MACRO-2)           			memory 2
(2)   19/    3E64 : =$3E64               GLBL_LASTPC     := *
(2)   19/    3E64 :                                     dephase
(2)   19/       2 :                                     phase 2
(2)   19/       2 : =$2                  GLBL_LASTORG    := *
(2)   20/       2 :                     setVram_Dodo		ds.b $30
(2)   21/      32 :                     setVram_Mimi		ds.b $30
(2)   22/      62 :                     setVram_Fifi		ds.b $30
(2)   23/      92 :  (MACRO-2)           			endmemory
(2)   23/    3EF4 :                     .here:          dephase
(2)   23/    3EF4 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   23/    3E64 :                                     phase GLBL_LASTPC
(2)   24/    3E64 :                     
(2)   25/    3E64 :                     ; ====================================================================
(2)   26/    3E64 :                     ; ------------------------------------------------------
(2)   27/    3E64 :                     ; This mode's RAM
(2)   28/    3E64 :                     ; ------------------------------------------------------
(2)   29/    3E64 :                     
(2)   30/    3E64 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   30/    3E64 : =$3E64               GLBL_LASTPC     := *
(2)   30/    3E64 :                                     dephase
(2)   30/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   30/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   31/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   32/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   33/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 4
(2)   34/FFFFFFFFFFFFB820 :                     RAM_GemaCache_FM3	ds.l 1
(2)   35/FFFFFFFFFFFFB824 :                     RAM_GemaCache_FM6	ds.l 1
(2)   36/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   37/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   38/FFFFFFFFFFFFB868 :                     
(2)   39/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   40/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   41/FFFFFFFFFFFFB86C :                     RAM_GemaIndx		ds.w 1		; DONT MOVE
(2)   42/FFFFFFFFFFFFB86E :                     RAM_GemaSeq		ds.w 1		; ''
(2)   43/FFFFFFFFFFFFB870 :                     RAM_GemaBlk		ds.w 1		; ''
(2)   44/FFFFFFFFFFFFB872 :                     RAM_GemaStatus		ds.w 4
(2)   45/FFFFFFFFFFFFB87A :                     RAM_FairyVars		ds.w 1
(2)   46/FFFFFFFFFFFFB87C :                     RAM_CurrBeats		ds.w 1
(2)   47/FFFFFFFFFFFFB87E :                     RAM_Copy_fmSpecial	ds.w 1
(2)   48/FFFFFFFFFFFFB880 :                     RAM_Copy_HasDac		ds.w 1
(2)   49/FFFFFFFFFFFFB882 :                     
(2)   50/FFFFFFFFFFFFB882 :                     sizeof_thisbuff		ds.l 0
(2)   51/FFFFFFFFFFFFB888 :  (MACRO-2)           			endmemory
(2)   51/    3EEC :                     .here:          dephase
(2)   51/    3EEC :                                     ds.b -(.here-GLBL_LASTORG)
(2)   51/    3E64 :                                     phase GLBL_LASTPC
(2)   52/    3E64 :                     
(2)   53/    3E64 :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   54/    3E64 :                     
(2)   55/    3E64 :                     ; ====================================================================
(2)   56/    3E64 :                     ; ------------------------------------------------------
(2)   57/    3E64 :                     ; Init
(2)   58/    3E64 :                     ; ------------------------------------------------------
(2)   59/    3E64 :                     
(2)   60/    3E64 : 6100 CAFE           		bsr	Video_DisplayOff
(2)   61/    3E68 : 6100 DAD4           		bsr	System_Default
(2)   62/    3E6C :                     	; ----------------------------------------------
(2)   63/    3E6C :                     	; Load assets
(2)   64/    3E6C :                     ; 	if MARS|MARSCD
(2)   65/    3E6C :                     ; 		lea	file_tscrn_mars(pc),a0			; Load DATA BANK for 32X stuff
(2)   66/    3E6C :                     ; 		bsr	System_SetDataBank
(2)   67/    3E6C :                     ; 		lea	(PalMars_STest),a0
(2)   68/    3E6C :                     ; 		move.w	#0,d0
(2)   69/    3E6C :                     ; 		move.w	#256,d1
(2)   70/    3E6C :                     ; 		moveq	#0,d2
(2)   71/    3E6C :                     ; 		bsr	Video_MdMars_FadePal
(2)   72/    3E6C :                     ; 		clr.w	(RAM_MdMars_PalFd).w
(2)   73/    3E6C :                     ; 		lea	(ArtMars_Test2D),a0
(2)   74/    3E6C :                     ; 		move.l	#0,a1
(2)   75/    3E6C :                     ; 		move.l	#ArtMars_Test2D_e-ArtMars_Test2D,d0
(2)   76/    3E6C :                     ; 		bsr	Video_MdMars_LoadVram
(2)   77/    3E6C :                     ; 		lea	(RAM_MdMars_Models).w,a0
(2)   78/    3E6C :                     ; 		move.l	#MarsObj_test_2,mmdl_data(a0)
(2)   79/    3E6C :                     ; 		move.l	#0,mmdl_z_pos(a0)
(2)   80/    3E6C :                     ; 		moveq	#2,d0					; 32X 3D mode
(2)   81/    3E6C :                     ; 		bsr	Video_MdMars_VideoMode
(2)   82/    3E6C :                     ; 	endif
(2)   83/    3E6C :                     	; ----------------------------------------------
(2)   84/    3E6C :                     	; Load assets
(2)   85/    3E6C : 41FA 03DA           		lea	file_tscrn_main(pc),a0		; ** LOAD BANK **
(2)   86/    3E70 : 6100 DDCE           		bsr	System_SetDataBank
(2)   87/    3E74 :                     	; ----------------------------------------------
(2)   88/    3E74 : 203C 0000 D73E      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   89/    3E7A : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   90/    3E7E : 6100 D30C           		bsr	Video_PrintInit
(2)   91/    3E82 : 203C 0000 E33E      		move.l	#ASCII_FONT_W,d0
(2)   92/    3E88 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   93/    3E8C : 6100 D2F8           		bsr	Video_PrintInitW
(2)   94/    3E90 : 41F8 D610           		lea	(RAM_PaletteFade+$40).w,a0	; Palette line 4:
(2)   95/    3E94 : 30BC 0000           		move.w	#$0000,(a0)
(2)   96/    3E98 : 317C 00E0 0002      		move.w	#$00E0,2(a0)
(2)   97/    3E9E : 317C 00A0 0004      		move.w	#$00A0,4(a0)
(2)   98/    3EA4 : 317C 0080 0004      		move.w	#$0080,4(a0)
(2)   99/    3EAA : D0FC 0020           		adda	#$20,a0
(2)  100/    3EAE : 30BC 0000           		move.w	#$0000,(a0)
(2)  101/    3EB2 : 317C 0EEE 0002      		move.w	#$0EEE,2(a0)
(2)  102/    3EB8 : 317C 0AAA 0004      		move.w	#$0AAA,4(a0)
(2)  103/    3EBE : 317C 0888 0004      		move.w	#$0888,4(a0)
(2)  104/    3EC4 : 41F9 0001 0D24      		lea	(objPal_Dodo+2),a0
(2)  105/    3ECA : 7001                		moveq	#1,d0
(2)  106/    3ECC : 323C 000F           		move.w	#15,d1
(2)  107/    3ED0 : 6100 D23E           		bsr	Video_FadePal
(2)  108/    3ED4 : 41FA 04CC           		lea	ArtList_Stuff(pc),a0
(2)  109/    3ED8 : 6100 CD04           		bsr	Video_LoadArt_List
(2)  110/    3EDC :                     
(2)  111/    3EDC :                     	; ----------------------------------------------
(2)  112/    3EDC : 41FA 04DE           		lea	str_TesterTitle(pc),a0
(2)  113/    3EE0 : 7006                		moveq	#6,d0
(2)  114/    3EE2 : 7202                		moveq	#2,d1
(2)  115/    3EE4 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  116/    3EE8 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  117/    3EEE : 6100 D3B6           		bsr	Video_PrintW
(2)  118/    3EF2 : 41FA 04E6           		lea	str_TesterInfo(pc),a0
(2)  119/    3EF6 : 7006                		moveq	#6,d0
(2)  120/    3EF8 : 7206                		moveq	#6,d1
(2)  121/    3EFA : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  122/    3EFE : 6100 D2B4           		bsr	Video_Print
(2)  123/    3F02 : 41FA 04F2           		lea	str_Instruc(pc),a0
(2)  124/    3F06 : 7002                		moveq	#2,d0
(2)  125/    3F08 :                     ; 		moveq	#14,d1
(2)  126/    3F08 : 7213                		moveq	#19,d1
(2)  127/    3F0A : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  128/    3F0E : 6100 D2A4           		bsr	Video_Print
(2)  129/    3F12 : 6100 0156           		bsr	.gema_viewinit
(2)  130/    3F16 :                     ; 		bsr	.show_cursor
(2)  131/    3F16 :                     	; ----------------------------------------------
(2)  132/    3F16 : 6100 C3FC           		bsr	gemaReset				; Load default GEMA sound data
(2)  133/    3F1A :                     ; 		moveq	#1,d0
(2)  134/    3F1A :                     ; 		moveq	#%10,d1
(2)  135/    3F1A :                     ; 		bsr	Video_Resolution
(2)  136/    3F1A :                     	; ----------------------------------------------
(2)  137/    3F1A : 6100 010E           		bsr	.show_me
(2)  138/    3F1E : 6100 0162           		bsr	.gema_view
(2)  139/    3F22 :                     ; 		bsr	.steal_vars
(2)  140/    3F22 :                     	; ----------------------------------------------
(2)  141/    3F22 : 6100 CA34           		bsr	Video_DisplayOn
(2)  142/    3F26 : 6100 DD2A           		bsr	Object_Run
(2)  143/    3F2A : 6100 C7D0           		bsr	Video_BuildSprites
(2)  144/    3F2E : 6100 D714           		bsr	System_Render
(2)  145/    3F32 : 6100 D178           		bsr	Video_FadeIn_Full
(2)  146/    3F36 :                     
(2)  147/    3F36 :                     ; ====================================================================
(2)  148/    3F36 :                     ; ------------------------------------------------------
(2)  149/    3F36 :                     ; Loop
(2)  150/    3F36 :                     ; ------------------------------------------------------
(2)  151/    3F36 :                     
(2)  152/    3F36 :                     .loop:
(2)  153/    3F36 : 6100 D70C           		bsr	System_Render
(2)  154/    3F3A :                     ; 		bsr	.show_cursor
(2)  155/    3F3A : 6100 0146           		bsr	.gema_view
(2)  156/    3F3E : 6100 DD12           		bsr	Object_Run
(2)  157/    3F42 : 6100 C7B8           		bsr	Video_BuildSprites
(2)  158/    3F46 :                     ; 	if MARS|MARSCD
(2)  159/    3F46 :                     ; 		lea	(RAM_MdMars_Models).w,a0
(2)  160/    3F46 :                     ; 		add.l	#1,mmdl_y_rot(a0)
(2)  161/    3F46 :                     ; 		add.l	#1,mmdl_x_rot(a0)
(2)  162/    3F46 :                     ; 	endif
(2)  163/    3F46 :                     
(2)  164/    3F46 :                     
(2)  165/    3F46 :                     ; 		lea	str_Info(pc),a0
(2)  166/    3F46 :                     ; 		moveq	#31,d0
(2)  167/    3F46 :                     ; 		moveq	#4,d1
(2)  168/    3F46 :                     ; 		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  169/    3F46 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  170/    3F46 :                     ; 		bsr	Video_PrintW
(2)  171/    3F46 :                     
(2)  172/    3F46 :                     	; NEW controls
(2)  173/    3F46 : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)  174/    3F4A : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  175/    3F4E : 0807 0007           		btst	#bitJoyStart,d7
(2)  176/    3F52 : 6600 00C6           		bne	.exit_all
(2)  177/    3F56 :                     	; LEFT/RIGHT
(2)  178/    3F56 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  179/    3F5A : 0247 000C           		andi.w	#JoyLeft+JoyRight,d7
(2)  180/    3F5E : 6718                		beq.s	.lr_seq
(2)  181/    3F60 : 7001                		moveq	#1,d0
(2)  182/    3F62 : 0247 0004           		andi.w	#JoyLeft,d7
(2)  183/    3F66 : 6708                		beq.s	.lr_right
(2)  184/    3F68 : 4A78 B86E           		tst.w	(RAM_GemaSeq).w
(2)  185/    3F6C : 670A                		beq.s	.lr_seq
(2)  186/    3F6E : 4440                		neg.w	d0
(2)  187/    3F70 :                     .lr_right:
(2)  188/    3F70 : D178 B86E           		add.w	d0,(RAM_GemaSeq).w
(2)  189/    3F74 : 6100 00B4           		bsr	.show_me
(2)  190/    3F78 :                     .lr_seq:
(2)  191/    3F78 :                     
(2)  192/    3F78 :                     	; UP/DOWN
(2)  193/    3F78 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  194/    3F7C : 0247 0003           		andi.w	#JoyUp+JoyDown,d7
(2)  195/    3F80 : 6718                		beq.s	.ud_seq
(2)  196/    3F82 : 7001                		moveq	#1,d0
(2)  197/    3F84 :                     ; 		andi.w	#JoyUp,d7
(2)  198/    3F84 : 0247 0001           		andi.w	#JoyUp,d7
(2)  199/    3F88 : 6708                		beq.s	.ud_right
(2)  200/    3F8A : 4A78 B870           		tst.w	(RAM_GemaBlk).w
(2)  201/    3F8E : 670A                		beq.s	.ud_seq
(2)  202/    3F90 : 4440                		neg.w	d0
(2)  203/    3F92 :                     .ud_right:
(2)  204/    3F92 : D178 B870           		add.w	d0,(RAM_GemaBlk).w
(2)  205/    3F96 : 6100 0092           		bsr	.show_me
(2)  206/    3F9A :                     .ud_seq:
(2)  207/    3F9A :                     
(2)  208/    3F9A :                     	; X/Y
(2)  209/    3F9A : 3E2E 0004           		move.w	on_press(a6),d7
(2)  210/    3F9E : 0247 0600           		andi.w	#JoyX+JoyY,d7
(2)  211/    3FA2 : 6716                		beq.s	.xy_seq
(2)  212/    3FA4 : 7001                		moveq	#1,d0
(2)  213/    3FA6 : 0247 0400           		andi.w	#JoyX,d7
(2)  214/    3FAA : 6708                		beq.s	.xy_right
(2)  215/    3FAC : 4A78 B86C           		tst.w	(RAM_GemaIndx).w
(2)  216/    3FB0 : 6708                		beq.s	.xy_seq
(2)  217/    3FB2 : 4440                		neg.w	d0
(2)  218/    3FB4 :                     .xy_right:
(2)  219/    3FB4 : D178 B86C           		add.w	d0,(RAM_GemaIndx).w
(2)  220/    3FB8 : 6170                		bsr	.show_me
(2)  221/    3FBA :                     .xy_seq:
(2)  222/    3FBA :                     
(2)  223/    3FBA :                     	; C BUTTON
(2)  224/    3FBA : 3E2E 0004           		move.w	on_press(a6),d7
(2)  225/    3FBE : 0247 0120           		andi.w	#JoyC+JoyZ,d7
(2)  226/    3FC2 : 672E                		beq.s	.c_press
(2)  227/    3FC4 : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  228/    3FC8 :                     
(2)  229/    3FC8 : 341D                		move.w	(a5)+,d2
(2)  230/    3FCA : 0247 0100           		andi.w	#JoyZ,d7
(2)  231/    3FCE : 6702                		beq.s	.not_auto
(2)  232/    3FD0 : 74FF                		moveq	#-1,d2
(2)  233/    3FD2 :                     .not_auto:
(2)  234/    3FD2 : 301D                		move.w	(a5)+,d0
(2)  235/    3FD4 : 321D                		move.w	(a5)+,d1
(2)  236/    3FD6 : 6100 C494           		bsr	gemaPlaySeq
(2)  237/    3FDA :                     
(2)  238/    3FDA : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  239/    3FDE : 3200                		move.w	d0,d1
(2)  240/    3FE0 : D241                		add.w	d1,d1
(2)  241/    3FE2 : 41FA 038E           		lea	exgema_beats(pc),a0
(2)  242/    3FE6 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  243/    3FEA : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  244/    3FEE : 6100 C52C           		bsr	gemaSetBeats
(2)  245/    3FF2 :                     .c_press:
(2)  246/    3FF2 :                     	; B BUTTON
(2)  247/    3FF2 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  248/    3FF6 : 0247 0010           		andi.w	#JoyB,d7
(2)  249/    3FFA : 670C                		beq.s	.b_press
(2)  250/    3FFC : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  251/    4000 : 321D                		move.w	(a5)+,d1
(2)  252/    4002 : 301D                		move.w	(a5)+,d0
(2)  253/    4004 : 6100 C4A6           		bsr	gemaStopSeq
(2)  254/    4008 :                     .b_press:
(2)  255/    4008 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  256/    400C : 0247 0040           		andi.w	#JoyA,d7
(2)  257/    4010 : 6704                		beq.s	.a_press
(2)  258/    4012 : 6100 C4B4           		bsr	gemaStopAll
(2)  259/    4016 :                     .a_press:
(2)  260/    4016 :                     
(2)  261/    4016 :                     
(2)  262/    4016 :                     ; 		move.w	on_hold(a6),d7
(2)  263/    4016 :                     ; 		andi.w	#JoyA+JoyB+JoyC,d7
(2)  264/    4016 :                     ; 		bne.s	.n_up
(2)  265/    4016 :                     ; 		move.w	on_press(a6),d7
(2)  266/    4016 :                     ; 		btst	#bitJoyDown,d7
(2)  267/    4016 :                     ; 		beq.s	.n_down
(2)  268/    4016 :                     ; 		addq.w	#1,(a5)
(2)  269/    4016 :                     ; 		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  270/    4016 :                     ; 		ble.s	.n_downd
(2)  271/    4016 :                     ; 		clr.w	(a5)
(2)  272/    4016 :                     ; .n_downd:
(2)  273/    4016 :                     ; 		bsr.s	.show_me
(2)  274/    4016 :                     ; .n_down:
(2)  275/    4016 :                     ; 		move.w	on_press(a6),d7
(2)  276/    4016 :                     ; 		btst	#bitJoyUp,d7
(2)  277/    4016 :                     ; 		beq.s	.n_up
(2)  278/    4016 :                     ; 		subq.w	#1,(a5)
(2)  279/    4016 :                     ; 		bpl.s	.n_ups
(2)  280/    4016 :                     ; 		move.w	#MAX_SNDPICK,(a5)
(2)  281/    4016 :                     ; .n_ups:
(2)  282/    4016 :                     ; 		bsr.s	.show_me
(2)  283/    4016 :                     ; .n_up:
(2)  284/    4016 :                     ; 		move.w	(RAM_CurrPick).w,d7
(2)  285/    4016 :                     ; 		lsl.w	#2,d7
(2)  286/    4016 :                     ; 		jsr	.jump_list(pc,d7.w)
(2)  287/    4016 :                     ; 		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  288/    4016 :                     ; 		bpl.s	.n_cbtn
(2)  289/    4016 :                     
(2)  290/    4016 :                     ; .n_cbtn:
(2)  291/    4016 : 6000 FF1E           		bra	.loop
(2)  292/    401A :                     
(2)  293/    401A :                     ; ------------------------------------------------------
(2)  294/    401A :                     
(2)  295/    401A :                     .exit_all:
(2)  296/    401A : 6100 C4AC           		bsr	gemaStopAll
(2)  297/    401E : 6100 D09E           		bsr	Video_FadeOut_Full
(2)  298/    4022 : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(2)  299/    4028 : 4E75                		rts				; EXIT
(2)  300/    402A :                     
(2)  301/    402A :                     ; ------------------------------------------------------
(2)  302/    402A :                     
(2)  303/    402A :                     .show_me:
(2)  304/    402A : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  305/    402E : 3200                		move.w	d0,d1
(2)  306/    4030 : D241                		add.w	d1,d1
(2)  307/    4032 : 41FA 033E           		lea	exgema_beats(pc),a0
(2)  308/    4036 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  309/    403A : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  310/    403E :                     
(2)  311/    403E : 41FA 0690           		lea	str_ShowBeats(pc),a0
(2)  312/    4042 : 700D                		moveq	#13,d0
(2)  313/    4044 : 720B                		moveq	#11,d1
(2)  314/    4046 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  315/    404A : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  316/    4050 : 6100 D162           		bsr	Video_Print
(2)  317/    4054 : 41FA 0666           		lea	str_ShowVars(pc),a0
(2)  318/    4058 : 7007                		moveq	#7,d0
(2)  319/    405A : 7208                		moveq	#8,d1
(2)  320/    405C : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  321/    4060 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  322/    4066 : 6000 D23E           		bra	Video_PrintW
(2)  323/    406A :                     
(2)  324/    406A :                     ; ; ------------------------------------------------------
(2)  325/    406A :                     ;
(2)  326/    406A :                     ; .jump_list:
(2)  327/    406A :                     ; 		bra.w	.nothing
(2)  328/    406A :                     ; 		bra.w	.option_1
(2)  329/    406A :                     ; 		bra.w	.option_2
(2)  330/    406A :                     ; 		bra.w	.option_3
(2)  331/    406A :                     ; 		bra.w	.option_4
(2)  332/    406A :                     ; 		bra.w	.option_5
(2)  333/    406A :                     ; 		bra.w	.option_6
(2)  334/    406A :                     ; 		bra.w	.option_7
(2)  335/    406A :                     ;
(2)  336/    406A :                     ; ; ------------------------------------------------------
(2)  337/    406A :                     ; ; OPTION 0
(2)  338/    406A :                     ; ; ------------------------------------------------------
(2)  339/    406A :                     ;
(2)  340/    406A :                     ; .nothing:
(2)  341/    406A :                     ; 		move.w	on_press(a6),d7
(2)  342/    406A :                     ; 		btst	#bitJoyStart,d7
(2)  343/    406A :                     ; 		beq.s	.no_press
(2)  344/    406A :                     ; 		bsr.s	.show_me
(2)  345/    406A :                     ; 		bra	gemaTest
(2)  346/    406A :                     ; .no_press:
(2)  347/    406A :                     ; 		rts
(2)  348/    406A :                     ;
(2)  349/    406A :                     ; ------------------------------------------------------
(2)  350/    406A :                     ; OPTION 1
(2)  351/    406A :                     ; ------------------------------------------------------
(2)  352/    406A :                     
(2)  353/    406A :                     ; 		bra.s	.show_me
(2)  354/    406A :                     ; .option1_args:
(2)  355/    406A :                     ; 		move.w	on_hold(a6),d7
(2)  356/    406A :                     ; 		move.w	d7,d6
(2)  357/    406A :                     ; 		andi.w	#JoyA+JoyB+JoyC,d6
(2)  358/    406A :                     ; 		beq.s	.no_press
(2)  359/    406A :                     ; 		btst	#bitJoyB,d7
(2)  360/    406A :                     ; 		beq.s	.d2_opt
(2)  361/    406A :                     ; 		adda	#2,a5
(2)  362/    406A :                     ; .d2_opt:
(2)  363/    406A :                     ; 		btst	#bitJoyC,d7
(2)  364/    406A :                     ; 		beq.s	.d3_opt
(2)  365/    406A :                     ; 		adda	#4,a5
(2)  366/    406A :                     ; .d3_opt:
(2)  367/    406A :                     ; 		move.w	on_press(a6),d7
(2)  368/    406A :                     ; 		btst	#bitJoyRight,d7
(2)  369/    406A :                     ; 		beq.s	.op1_right
(2)  370/    406A :                     ; 		addq.w	#1,(a5)
(2)  371/    406A :                     ; 		bra	.show_me
(2)  372/    406A :                     ; .op1_right:
(2)  373/    406A :                     ; 		btst	#bitJoyLeft,d7
(2)  374/    406A :                     ; 		beq.s	.op1_left
(2)  375/    406A :                     ; 		subq.w	#1,(a5)
(2)  376/    406A :                     ; 		bra	.show_me
(2)  377/    406A :                     ; .op1_left:
(2)  378/    406A :                     ; 		move.w	on_hold(a6),d7
(2)  379/    406A :                     ; 		btst	#bitJoyUp,d7
(2)  380/    406A :                     ; 		beq.s	.op1_down
(2)  381/    406A :                     ; 		addq.w	#1,(a5)
(2)  382/    406A :                     ; 		bra	.show_me
(2)  383/    406A :                     ; .op1_down:
(2)  384/    406A :                     ; 		btst	#bitJoyDown,d7
(2)  385/    406A :                     ; 		beq.s	.op1_up
(2)  386/    406A :                     ; 		subq.w	#1,(a5)
(2)  387/    406A :                     ; 		bra	.show_me
(2)  388/    406A :                     ; .op1_up:
(2)  389/    406A :                     ;
(2)  390/    406A :                     ; 		rts
(2)  391/    406A :                     ;
(2)  392/    406A :                     ; ; ------------------------------------------------------
(2)  393/    406A :                     ; ; OPTION 2
(2)  394/    406A :                     ; ; ------------------------------------------------------
(2)  395/    406A :                     ;
(2)  396/    406A :                     ; .option_2:
(2)  397/    406A :                     ; 		lea	(RAM_GemaIndx).w,a5
(2)  398/    406A :                     ; 		move.w	on_press(a6),d7
(2)  399/    406A :                     ; 		btst	#bitJoyStart,d7
(2)  400/    406A :                     ; 		beq.s	.option1_args
(2)  401/    406A :                     ; 		move.w	(a5)+,d0
(2)  402/    406A :                     ; 		move.w	(a5)+,d1
(2)  403/    406A :                     ; 		bra	gemaStopSeq
(2)  404/    406A :                     ;
(2)  405/    406A :                     ; ; ------------------------------------------------------
(2)  406/    406A :                     ; ; OPTION 3
(2)  407/    406A :                     ; ; ------------------------------------------------------
(2)  408/    406A :                     ;
(2)  409/    406A :                     ; .option_3:
(2)  410/    406A :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  411/    406A :                     ; 		move.w	on_press(a6),d7
(2)  412/    406A :                     ; 		btst	#bitJoyStart,d7
(2)  413/    406A :                     ; 		beq	.option1_args
(2)  414/    406A :                     ; 		move.w	(a5)+,d0
(2)  415/    406A :                     ; 		move.w	(a5)+,d1
(2)  416/    406A :                     ; 		bra	gemaFadeSeq
(2)  417/    406A :                     ;
(2)  418/    406A :                     ; ; ------------------------------------------------------
(2)  419/    406A :                     ; ; OPTION 4
(2)  420/    406A :                     ; ; ------------------------------------------------------
(2)  421/    406A :                     ;
(2)  422/    406A :                     ; .option_4:
(2)  423/    406A :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  424/    406A :                     ; 		move.w	on_press(a6),d7
(2)  425/    406A :                     ; 		btst	#bitJoyStart,d7
(2)  426/    406A :                     ; 		beq	.option1_args
(2)  427/    406A :                     ; 		move.w	(a5)+,d0
(2)  428/    406A :                     ; 		move.w	(a5)+,d1
(2)  429/    406A :                     ; 		bra	gemaSetSeqVol
(2)  430/    406A :                     ;
(2)  431/    406A :                     ; ; ------------------------------------------------------
(2)  432/    406A :                     ; ; OPTION 5
(2)  433/    406A :                     ; ; ------------------------------------------------------
(2)  434/    406A :                     ;
(2)  435/    406A :                     ; .option_5:
(2)  436/    406A :                     ; 		move.w	on_press(a6),d7
(2)  437/    406A :                     ; 		btst	#bitJoyStart,d7
(2)  438/    406A :                     ; 		beq.s	.no_press2
(2)  439/    406A :                     ; 		bsr	.show_me
(2)  440/    406A :                     ; 		bra	gemaStopAll
(2)  441/    406A :                     ; .no_press2:
(2)  442/    406A :                     ; 		rts
(2)  443/    406A :                     ;
(2)  444/    406A :                     ; ; ------------------------------------------------------
(2)  445/    406A :                     ; ; OPTION 6
(2)  446/    406A :                     ; ; ------------------------------------------------------
(2)  447/    406A :                     ;
(2)  448/    406A :                     ; .option_6:
(2)  449/    406A :                     ; 		lea	(RAM_GemaArg6).w,a5
(2)  450/    406A :                     ; 		move.w	on_hold(a6),d7
(2)  451/    406A :                     ; 		andi.w	#JoyA,d7
(2)  452/    406A :                     ; 		beq.s	.no_press2
(2)  453/    406A :                     ; 		move.w	on_press(a6),d7
(2)  454/    406A :                     ; 		btst	#bitJoyRight,d7
(2)  455/    406A :                     ; 		beq.s	.op2_right
(2)  456/    406A :                     ; 		addq.w	#1,(a5)
(2)  457/    406A :                     ; 		bra	.show_me_2
(2)  458/    406A :                     ; .op2_right:
(2)  459/    406A :                     ; 		btst	#bitJoyLeft,d7
(2)  460/    406A :                     ; 		beq.s	.op2_left
(2)  461/    406A :                     ; 		subq.w	#1,(a5)
(2)  462/    406A :                     ; 		bsr	.show_me_2
(2)  463/    406A :                     ; .op2_left:
(2)  464/    406A :                     ; 		move.w	on_hold(a6),d7
(2)  465/    406A :                     ; 		btst	#bitJoyDown,d7
(2)  466/    406A :                     ; 		beq.s	.op2_down
(2)  467/    406A :                     ; 		addq.w	#1,(a5)
(2)  468/    406A :                     ; 		bsr	.show_me_2
(2)  469/    406A :                     ; .op2_down:
(2)  470/    406A :                     ; 		btst	#bitJoyUp,d7
(2)  471/    406A :                     ; 		beq.s	.op2_up
(2)  472/    406A :                     ; 		subq.w	#1,(a5)
(2)  473/    406A :                     ; 		bsr	.show_me_2
(2)  474/    406A :                     ; .op2_up:
(2)  475/    406A :                     ; 		move.w	on_press(a6),d7
(2)  476/    406A :                     ; 		btst	#bitJoyStart,d7
(2)  477/    406A :                     ; 		beq.s	.no_press2
(2)  478/    406A :                     ; .show_me_2:
(2)  479/    406A :                     ; 		bsr	.show_me
(2)  480/    406A :                     ; 		move.w	(a5),d0
(2)  481/    406A :                     ; 		bra	gemaSetBeats
(2)  482/    406A :                     ;
(2)  483/    406A :                     ; ; ------------------------------------------------------
(2)  484/    406A :                     ; ; OPTION 7
(2)  485/    406A :                     ; ; ------------------------------------------------------
(2)  486/    406A :                     ;
(2)  487/    406A :                     ; .option_7:
(2)  488/    406A :                     ; 		move.w	on_press(a6),d7
(2)  489/    406A :                     ; 		btst	#bitJoyStart,d7
(2)  490/    406A :                     ; 		beq.s	.no_press2
(2)  491/    406A :                     ; 		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  492/    406A :                     ; 		rts
(2)  493/    406A :                     
(2)  494/    406A :                     ; ------------------------------------------------------
(2)  495/    406A :                     
(2)  496/    406A :                     .gema_viewinit:
(2)  497/    406A : 203C 0000 425A      		move.l	#obj_Fairy,d0
(2)  498/    4070 : 7400                		moveq	#0,d2
(2)  499/    4072 : 6100 DC10           		bsr	Object_Make
(2)  500/    4076 : 5242                		addq.w	#1,d2
(2)  501/    4078 : 6100 DC0A           		bsr	Object_Make
(2)  502/    407C : 5242                		addq.w	#1,d2
(2)  503/    407E : 6100 DC04           		bsr	Object_Make
(2)  504/    4082 :                     ; 		lea	str_VmInfo(pc),a0
(2)  505/    4082 :                     ; 		moveq	#2,d0
(2)  506/    4082 :                     ; 		moveq	#SET_SNDVIEWY,d1
(2)  507/    4082 :                     ; 		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  508/    4082 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  509/    4082 :                     ; 		bsr	Video_Print
(2)  510/    4082 :                     .gema_view:
(2)  511/    4082 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
             4088 : 1100             
(2)  512/    408A : 43F8 B872           		lea	(RAM_GemaStatus),a1
(2)  513/    408E : 7000                		moveq	#0,d0
(2)  514/    4090 : 7200                		moveq	#0,d1
(2)  515/    4092 : 7400                		moveq	#0,d2
(2)  516/    4094 : 0839 0000 00A1      .wait:		btst	#0,(z80_bus).l
             409A : 1100             
(2)  517/    409C : 66F6                		bne.s	.wait
(2)  518/    409E : 1039 00A0 16C3      		move.b	(z80_cpu+trkBuff_0),d0
(2)  519/    40A4 : 1239 00A0 1702      		move.b	(z80_cpu+trkBuff_1),d1
(2)  520/    40AA : 1439 00A0 1741      		move.b	(z80_cpu+trkBuff_2),d2
(2)  521/    40B0 : 6100 C2DA           		bsr	sndUnlockZ80
(2)  522/    40B4 : 32C0                		move.w	d0,(a1)+
(2)  523/    40B6 : 32C1                		move.w	d1,(a1)+
(2)  524/    40B8 : 32C2                		move.w	d2,(a1)+
(2)  525/    40BA : 4E75                		rts
(2)  526/    40BC :                     
(2)  527/    40BC : 6100 C2BA           		bsr	sndLockZ80
(2)  528/    40C0 : 41F9 00A0 1C0E      		lea	(z80_cpu+tblPSG),a0
(2)  529/    40C6 : 43F8 B800           		lea	(RAM_GemaCache_PSG),a1
(2)  530/    40CA : 7E02                		moveq	#3-1,d7
(2)  531/    40CC : 6100 00F0           		bsr	.copy_me
(2)  532/    40D0 : 41F9 00A0 1C46      		lea	(z80_cpu+tblPSGN),a0
(2)  533/    40D6 : 43F8 B80C           		lea	(RAM_GemaCache_PSGN),a1
(2)  534/    40DA : 7E00                		moveq	#1-1,d7
(2)  535/    40DC : 6100 00E0           		bsr	.copy_me
(2)  536/    40E0 : 41F9 00A0 1BA0      		lea	(z80_cpu+tblFM),a0
(2)  537/    40E6 : 43F8 B810           		lea	(RAM_GemaCache_FM),a1
(2)  538/    40EA : 7E05                		moveq	#6-1,d7
(2)  539/    40EC : 6100 00D0           		bsr	.copy_me
(2)  540/    40F0 : 41F9 00A0 1B0E      		lea	(z80_cpu+tblPCM),a0
(2)  541/    40F6 : 43F8 B828           		lea	(RAM_GemaCache_PCM),a1
(2)  542/    40FA : 7E07                		moveq	#8-1,d7
(2)  543/    40FC : 6100 00C0           		bsr	.copy_me
(2)  544/    4100 : 41F9 00A0 1C58      		lea	(z80_cpu+tblPWM),a0
(2)  545/    4106 : 43F8 B848           		lea	(RAM_GemaCache_PWM),a1
(2)  546/    410A : 7E07                		moveq	#8-1,d7
(2)  547/    410C : 6100 00B0           		bsr	.copy_me
(2)  548/    4110 : 7E00                		moveq	#0,d7
(2)  549/    4112 : 1E39 00A0 1CF7      		move.b	(z80_cpu+fmSpecial),d7
(2)  550/    4118 : 31C7 B87E           		move.w	d7,(RAM_Copy_fmSpecial).w
(2)  551/    411C : 1E39 00A0 0008      		move.b	(z80_cpu+8),d7
(2)  552/    4122 : 31C7 B880           		move.w	d7,(RAM_Copy_HasDac).w
(2)  553/    4126 : 6100 C264           		bsr	sndUnlockZ80
(2)  554/    412A :                     
(2)  555/    412A : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  556/    412E : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  557/    4134 : 47F8 B800           		lea	(RAM_GemaCache_PSG),a3
(2)  558/    4138 : 7007                		moveq	#7,d0
(2)  559/    413A : 7216                		moveq	#SET_SNDVIEWY,d1
(2)  560/    413C : 7E02                		moveq	#3-1,d7
(2)  561/    413E : 6100 00E6           		bsr	.show_table
(2)  562/    4142 : 47F8 B80C           		lea	(RAM_GemaCache_PSGN),a3
(2)  563/    4146 : 7013                		moveq	#7+12,d0
(2)  564/    4148 : 7216                		moveq	#SET_SNDVIEWY,d1
(2)  565/    414A : 7E00                		moveq	#1-1,d7
(2)  566/    414C : 6100 00D8           		bsr	.show_table
(2)  567/    4150 : 47F8 B810           		lea	(RAM_GemaCache_FM),a3
(2)  568/    4154 : 7007                		moveq	#7,d0
(2)  569/    4156 : 7217                		moveq	#SET_SNDVIEWY+1,d1
(2)  570/    4158 : 7E04                		moveq	#5-1,d7
(2)  571/    415A : 6100 0084           		bsr	.show_table_fm
(2)  572/    415E : 47F8 B820           		lea	(RAM_GemaCache_FM3),a3
(2)  573/    4162 : 7017                		moveq	#7+16,d0
(2)  574/    4164 : 7217                		moveq	#SET_SNDVIEWY+1,d1
(2)  575/    4166 : 3E38 B87E           		move.w	(RAM_Copy_fmSpecial).w,d7
(2)  576/    416A : 4A07                		tst.b	d7
(2)  577/    416C : 6712                		beq.s	.no_spec
(2)  578/    416E : 41F8 466C           		lea	(strL_FmOnly),a0
(2)  579/    4172 : 4A53                		tst.w	(a3)
(2)  580/    4174 : 6B04                		bmi.s	.no_prnt3
(2)  581/    4176 : 41F8 46B4           		lea	(str_Speci),a0
(2)  582/    417A :                     .no_prnt3:
(2)  583/    417A : 6100 D038           		bsr	Video_Print
(2)  584/    417E : 6004                		bra.s	.b_sampl
(2)  585/    4180 :                     .no_spec:
(2)  586/    4180 : 7E00                		moveq	#1-1,d7
(2)  587/    4182 : 615C                		bsr	.show_table_fm
(2)  588/    4184 :                     .b_sampl:
(2)  589/    4184 :                     
(2)  590/    4184 : 701B                		moveq	#7+20,d0
(2)  591/    4186 : 7217                		moveq	#SET_SNDVIEWY+1,d1
(2)  592/    4188 : 3E38 B880           		move.w	(RAM_Copy_HasDac).w,d7
(2)  593/    418C : BE3C 00D9           		cmp.b	#$D9,d7
(2)  594/    4190 : 660A                		bne.s	.no_sampl
(2)  595/    4192 : 41F8 46B8           		lea	(str_Sampl),a0
(2)  596/    4196 : 6100 D01C           		bsr	Video_Print
(2)  597/    419A : 6008                		bra.s	.c_sampl
(2)  598/    419C :                     .no_sampl:
(2)  599/    419C : 47F8 B824           		lea	(RAM_GemaCache_FM6),a3
(2)  600/    41A0 : 7E00                		moveq	#1-1,d7
(2)  601/    41A2 : 613C                		bsr	.show_table_fm
(2)  602/    41A4 :                     .c_sampl:
(2)  603/    41A4 : 47F8 B828           		lea	(RAM_GemaCache_PCM),a3
(2)  604/    41A8 : 7007                		moveq	#7,d0
(2)  605/    41AA : 7218                		moveq	#SET_SNDVIEWY+2,d1
(2)  606/    41AC : 7E07                		moveq	#8-1,d7
(2)  607/    41AE : 6176                		bsr	.show_table
(2)  608/    41B0 : 47F8 B848           		lea	(RAM_GemaCache_PWM),a3
(2)  609/    41B4 : 7007                		moveq	#7,d0
(2)  610/    41B6 : 7219                		moveq	#SET_SNDVIEWY+3,d1
(2)  611/    41B8 : 7E07                		moveq	#8-1,d7
(2)  612/    41BA : 616A                		bsr	.show_table
(2)  613/    41BC : 4E75                		rts
(2)  614/    41BE :                     
(2)  615/    41BE :                     ; ----------------------------------------------
(2)  616/    41BE :                     
(2)  617/    41BE :                     .copy_me:
(2)  618/    41BE : 7200                		moveq	#0,d1
(2)  619/    41C0 :                     ; 		bsr	sndLockZ80
(2)  620/    41C0 : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  621/    41C4 : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  622/    41C8 : 1010                		move.b	ztbl_Link(a0),d0
(2)  623/    41CA :                     ; 		bsr	sndUnlockZ80
(2)  624/    41CA : 8002                		or.b	d2,d0
(2)  625/    41CC : 6602                		bne.s	.link_ok
(2)  626/    41CE : 72FF                		moveq	#-1,d1
(2)  627/    41D0 :                     .link_ok:
(2)  628/    41D0 : 3281                		move.w	d1,(a1)
(2)  629/    41D2 : D0FC 0012           		adda	#MAX_TBLSIZE,a0		; *** EXTERNAL LABEL
(2)  630/    41D6 : D2FC 0004           		adda	#4,a1
(2)  631/    41DA : 51CF FFE2           		dbf	d7,.copy_me
(2)  632/    41DE : 4E75                		rts
(2)  633/    41E0 :                     
(2)  634/    41E0 :                     ; ----------------------------------------------
(2)  635/    41E0 :                     
(2)  636/    41E0 :                     .show_table_fm:
(2)  637/    41E0 : 41F8 466C           		lea	(strL_FmOnly),a0
(2)  638/    41E4 : 7C00                		moveq	#0,d6
(2)  639/    41E6 : 7A00                		moveq	#0,d5
(2)  640/    41E8 : 3C13                		move.w	(a3),d6
(2)  641/    41EA : 6A06                		bpl.s	.is_fmgood
(2)  642/    41EC : 6100 CFC6           		bsr	Video_Print
(2)  643/    41F0 : 6028                		bra.s	.from_fmbad
(2)  644/    41F2 :                     .is_fmgood:
(2)  645/    41F2 : 3A06                		move.w	d6,d5
(2)  646/    41F4 : D0FC 0004           		adda	#4,a0
(2)  647/    41F8 : 0246 001F           		andi.w	#%00011111,d6
(2)  648/    41FC : E34E                		lsl.w	#1,d6
(2)  649/    41FE : D0C6                		adda	d6,a0
(2)  650/    4200 : 6100 CFB2           		bsr	Video_Print
(2)  651/    4204 : 3800                		move.w	d0,d4
(2)  652/    4206 : 5440                		addq.w	#2,d0
(2)  653/    4208 : 0245 00E0           		andi.w	#%11100000,d5
(2)  654/    420C : E84D                		lsr.w	#4,d5
(2)  655/    420E : 41F8 46A0           		lea	(strL_LazyVal),a0
(2)  656/    4212 : D0C5                		adda	d5,a0
(2)  657/    4214 : 6100 CF9E           		bsr	Video_Print
(2)  658/    4218 : 3004                		move.w	d4,d0
(2)  659/    421A :                     .from_fmbad:
(2)  660/    421A :                     ; 		addq.w	#1,d1
(2)  661/    421A : 5840                		addq.w	#4,d0
(2)  662/    421C : D6FC 0004           		adda	#4,a3
(2)  663/    4220 : 51CF FFBE           		dbf	d7,.show_table_fm
(2)  664/    4224 : 4E75                		rts
(2)  665/    4226 :                     
(2)  666/    4226 :                     .show_table:
(2)  667/    4226 : 41F8 4488           		lea	(strL_NoteList),a0
(2)  668/    422A : 7C00                		moveq	#0,d6
(2)  669/    422C : 3C13                		move.w	(a3),d6
(2)  670/    422E : 6B08                		bmi.s	.val_bad
(2)  671/    4230 : D0FC 0004           		adda	#4,a0
(2)  672/    4234 : DC46                		add.w	d6,d6
(2)  673/    4236 : D0C6                		adda	d6,a0
(2)  674/    4238 :                     .val_bad:
(2)  675/    4238 : 6100 CF7A           		bsr	Video_Print
(2)  676/    423C :                     ; 		addq.w	#1,d1
(2)  677/    423C : 5840                		addq.w	#4,d0
(2)  678/    423E : D6FC 0004           		adda	#4,a3
(2)  679/    4242 : 51CF FFE2           		dbf	d7,.show_table
(2)  680/    4246 : 4E75                		rts
(2)  681/    4248 :                     
(2)  682/    4248 :                     ; ====================================================================
(2)  683/    4248 :                     ; ------------------------------------------------------
(2)  684/    4248 :                     ; DATA asset locations
(2)  685/    4248 :                     ; ------------------------------------------------------
(2)  686/    4248 :                     
(2)  687/    4248 :                     file_tscrn_main:
(2)  688/    4248 : 0000 46DC           		dc.l DATA_BANK0
(2)  689/    424C : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             4252 : 494E 2E42 494E 00 
(2)  690/    4259 :                     		align 2
(2)  691/    425A :                     ; file_tscrn_mars:
(2)  692/    425A :                     ; 		dc.l DATA_BANK1
(2)  693/    425A :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  694/    425A :                     ; 		align 2
(2)  695/    425A :                     
(2)  696/    425A :                     ; ====================================================================
(2)  697/    425A :                     ; ------------------------------------------------------
(2)  698/    425A :                     ; Objects
(2)  699/    425A :                     ; ------------------------------------------------------
(2)  700/    425A :                     
(2)  701/    425A :                     ; ====================================================================
(2)  702/    425A :                     ; ------------------------------------------------------
(2)  703/    425A :                     ; Objects
(2)  704/    425A :                     ; ------------------------------------------------------
(2)  705/    425A :                     
(2)  706/    425A :                     ; --------------------------------------------------
(2)  707/    425A :                     ; Sisi
(2)  708/    425A :                     ; --------------------------------------------------
(2)  709/    425A :                     
(2)  710/    425A :                     obj_Fairy:
(2)  711/    425A : 7000                		moveq	#0,d0
(2)  712/    425C : 102E 001C           		move.b	obj_index(a6),d0
(2)  713/    4260 : D040                		add.w	d0,d0
(2)  714/    4262 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  715/    4266 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  716/    426A :                     ; ----------------------------------------------
(2)  717/    426A : 0004                .list:		dc.w .init-.list
(2)  718/    426C : 0038                		dc.w .main-.list
(2)  719/    426E :                     ; ----------------------------------------------
(2)  720/    426E :                     .init:
(2)  721/    426E : 1D7C 0001 001C      		move.b	#1,obj_index(a6)
(2)  722/    4274 : 426E 0020           		clr.w	obj_frame(a6)
(2)  723/    4278 : 6100 DA74           		bsr	object_ResetAnim
(2)  724/    427C :                     
(2)  725/    427C : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  726/    4280 : 3C07                		move.w	d7,d6
(2)  727/    4282 : E54E                		lsl.w	#2,d6
(2)  728/    4284 : 41FA 00E0           		lea	.fixd_pos(pc),a0
(2)  729/    4288 : 43EE 0028           		lea	obj_ram(a6),a1
(2)  730/    428C : D0C6                		adda	d6,a0
(2)  731/    428E : 32D8                		move.w	(a0)+,(a1)+
(2)  732/    4290 : 32D8                		move.w	(a0)+,(a1)+
(2)  733/    4292 :                     
(2)  734/    4292 : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  735/    4296 : CEFC 002A           		mulu.w	#42,d7
(2)  736/    429A : E94F                		lsl.w	#4,d7
(2)  737/    429C : 4447                		neg.w	d7
(2)  738/    429E : 3347 0004           		move.w	d7,4(a1)
(2)  739/    42A2 :                     
(2)  740/    42A2 :                     ; ----------------------------------------------
(2)  741/    42A2 :                     .main:
(2)  742/    42A2 : 4BEE 0028           		lea	obj_ram(a6),a5
(2)  743/    42A6 : 49F8 B872           		lea	(RAM_GemaStatus).w,a4
(2)  744/    42AA :                     	; a5
(2)  745/    42AA :                     	; 0 - X base
(2)  746/    42AA :                     	; 2 - Y base
(2)  747/    42AA :                     	; 4 - Tan
(2)  748/    42AA : 7600                		moveq	#0,d3
(2)  749/    42AC : 162E 001D           		move.b	obj_subid(a6),d3
(2)  750/    42B0 : D643                		add.w	d3,d3
(2)  751/    42B2 : D8C3                		adda	d3,a4
(2)  752/    42B4 :                     ; 		lsl.w	#3,d3
(2)  753/    42B4 : 3415                		move.w	(a5),d2
(2)  754/    42B6 : 362D 0002           		move.w	2(a5),d3
(2)  755/    42BA : 383C 0001           		move.w	#1,d4			; Multiply
(2)  756/    42BE : 082C 0007 0001      		btst	#7,1(a4)
(2)  757/    42C4 : 6704                		beq.s	.not_enbls
(2)  758/    42C6 : 383C 0004           		move.w	#4,d4
(2)  759/    42CA :                     .not_enbls:
(2)  760/    42CA : 302D 0004           		move.w	4(a5),d0
(2)  761/    42CE : E848                		lsr.w	#4,d0
(2)  762/    42D0 : 6100 D71A           		bsr	System_SineWave
(2)  763/    42D4 : C3C4                		muls.w	d4,d1
(2)  764/    42D6 : E041                		asr.w	#8,d1
(2)  765/    42D8 : 9441                		sub.w	d1,d2
(2)  766/    42DA : 302D 0004           		move.w	4(a5),d0
(2)  767/    42DE : E848                		lsr.w	#4,d0
(2)  768/    42E0 : 082C 0000 0001      		btst	#0,1(a4)
(2)  769/    42E6 : 6702                		beq.s	.not_enbl2
(2)  770/    42E8 : D040                		add.w	d0,d0
(2)  771/    42EA :                     .not_enbl2:
(2)  772/    42EA : 6100 D6F6           		bsr	System_SineWave_Cos
(2)  773/    42EE : C3C4                		muls.w	d4,d1
(2)  774/    42F0 : E041                		asr.w	#8,d1
(2)  775/    42F2 : 9641                		sub.w	d1,d3
(2)  776/    42F4 :                     
(2)  777/    42F4 : 383C 0040           		move.w	#$40,d4
(2)  778/    42F8 : 082C 0007 0001      		btst	#7,1(a4)
(2)  779/    42FE : 6704                		beq.s	.not_enbl
(2)  780/    4300 : 383C 0090           		move.w	#$90,d4
(2)  781/    4304 :                     .not_enbl:
(2)  782/    4304 : D96D 0004           		addi.w	d4,4(a5)
(2)  783/    4308 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  784/    430C : 3D43 0008           		move.w	d3,obj_y(a6)
(2)  785/    4310 :                     
(2)  786/    4310 :                     .not_mouse:
(2)  787/    4310 : 41FA 002E           		lea	.anim_data(pc),a0
(2)  788/    4314 : 6100 DA10           		bsr	object_Animate
(2)  789/    4318 :                     
(2)  790/    4318 : 7000                		moveq	#0,d0
(2)  791/    431A : 102E 001D           		move.b	obj_subid(a6),d0
(2)  792/    431E : E748                		lsl.w	#3,d0
(2)  793/    4320 : 41FB 002C           		lea	.sub_ids(pc,d0.w),a0
(2)  794/    4324 : 3428 0004           		move.w	4(a0),d2
(2)  795/    4328 : 2250                		move.l	(a0),a1
(2)  796/    432A : 207C 0000 0000      		move.l	#0,a0
(2)  797/    4330 : 302E 0004           		move.w	obj_x(a6),d0
(2)  798/    4334 : 322E 0008           		move.w	obj_y(a6),d1
(2)  799/    4338 : 362E 0020           		move.w	obj_frame(a6),d3
(2)  800/    433C : 6000 D1EE           		bra	Video_MakeSprMap
(2)  801/    4340 :                     
(2)  802/    4340 :                     ; ----------------------------------------------
(2)  803/    4340 :                     
(2)  804/    4340 :                     .anim_data:
(2)  805/    4340 : 0002                		dc.w .anim_00-.anim_data
(2)  806/    4342 :                     .anim_00:
(2)  807/    4342 : 0008                		dc.w 8
(2)  808/    4344 : 0000 0001 0002      		dc.w 0,1,2,1
             434A : 0001             
(2)  809/    434C : FFFE                		dc.w -2
(2)  810/    434E :                     		align 2
(2)  811/    434E :                     .sub_ids:
(2)  812/    434E : 0001 0D42           		dc.l objMap_Dodo
(2)  813/    4352 : 0002 0000           		dc.w setVram_Dodo,0
(2)  814/    4356 : 0001 0D66           		dc.l objMap_Mimi
(2)  815/    435A : 0032 0000           		dc.w setVram_Mimi,0
(2)  816/    435E : 0001 0D8A           		dc.l objMap_Fifi
(2)  817/    4362 : 0062 0000           		dc.w setVram_Fifi,0
(2)  818/    4366 :                     		align 2
(2)  819/    4366 :                     
(2)  820/    4366 :                     .fixd_pos:
(2)  821/    4366 : 00B8 0040           		dc.w $B8,$40
(2)  822/    436A : 00DC 0040           		dc.w $B8+$24,$40
(2)  823/    436E : 0100 0040           		dc.w $B8+$48,$40
(2)  824/    4372 :                     		align 2
(2)  825/    4372 :                     
(2)  826/    4372 :                     ; ====================================================================
(2)  827/    4372 :                     ; ------------------------------------------------------
(2)  828/    4372 :                     ; Subroutines
(2)  829/    4372 :                     ; ------------------------------------------------------
(2)  830/    4372 :                     
(2)  831/    4372 :                     ; ====================================================================
(2)  832/    4372 :                     ; ------------------------------------------------------
(2)  833/    4372 :                     ; Includes for this screen
(2)  834/    4372 :                     ; ------------------------------------------------------
(2)  835/    4372 :                     
(2)  836/    4372 :                     ; ====================================================================
(2)  837/    4372 :                     ; ------------------------------------------------------
(2)  838/    4372 :                     ; Custom VBlank
(2)  839/    4372 :                     ; ------------------------------------------------------
(2)  840/    4372 :                     
(2)  841/    4372 :                     ; ------------------------------------------------------
(2)  842/    4372 :                     ; Custom HBlank
(2)  843/    4372 :                     ; ------------------------------------------------------
(2)  844/    4372 :                     
(2)  845/    4372 :                     ; ====================================================================
(2)  846/    4372 :                     ; ------------------------------------------------------
(2)  847/    4372 :                     ; Small data section
(2)  848/    4372 :                     ; ------------------------------------------------------
(2)  849/    4372 :                     
(2)  850/    4372 :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  851/    4372 :                     exgema_beats:
(2)  852/    4372 : 00D6                	dc.w 214
(2)  853/    4374 : 00D6                	dc.w 214
(2)  854/    4376 : 00D6                	dc.w 214
(2)  855/    4378 : 00C0                	dc.w 192
(2)  856/    437A : 00C0                	dc.w 192
(2)  857/    437C : 00D6                	dc.w 214
(2)  858/    437E : 00B8                	dc.w $00B8
(2)  859/    4380 : 00C0                	dc.w 192
(2)  860/    4382 : 00C0                	dc.w 192
(2)  861/    4384 : 00D6                	dc.w 214
(2)  862/    4386 : 00D6                	dc.w 214
(2)  863/    4388 : 00D6                	dc.w 214
(2)  864/    438A : 00D6                	dc.w 214
(2)  865/    438C : 00D6                	dc.w 214
(2)  866/    438E : 00D6                	dc.w 214
(2)  867/    4390 : 00D6                	dc.w 214
(2)  868/    4392 : 00D6                	dc.w 214
(2)  869/    4394 : 00D6                	dc.w 214
(2)  870/    4396 : 00D6                	dc.w 214
(2)  871/    4398 : 00D6                	dc.w 214
(2)  872/    439A : 00D6                	dc.w 214
(2)  873/    439C : 00D6                	dc.w 214
(2)  874/    439E : 00D6                	dc.w 214
(2)  875/    43A0 : 00D6                	dc.w 214
(2)  876/    43A2 :                     
(2)  877/    43A2 :                     ArtList_Stuff:
(2)  878/    43A2 : 0003                		dc.w 3
(2)  879/    43A4 : 0000 FB3E           		dc.l Art_FairyDodo
(2)  880/    43A8 : 0040                		dc.w cell_vram(setVram_Dodo)
(2)  881/    43AA : 0600                		dc.w cell_vram($30)
(2)  882/    43AC : 0001 013E           		dc.l Art_FairyMimi
(2)  883/    43B0 : 0640                		dc.w cell_vram(setVram_Mimi)
(2)  884/    43B2 : 0600                		dc.w cell_vram($30)
(2)  885/    43B4 : 0001 073E           		dc.l Art_FairyFifi
(2)  886/    43B8 : 0C40                		dc.w cell_vram(setVram_Fifi)
(2)  887/    43BA : 0600                		dc.w cell_vram($30)
(2)  888/    43BC :                     
(2)  889/    43BC :                     str_TesterTitle:
(2)  890/    43BC : 4745 4D41 2053      		dc.b "GEMA Sound driver   V1.0-dev",0
             43C2 : 6F75 6E64 2064 
             43C8 : 7269 7665 7220 
             43CE : 2020 5631 2E30 
             43D4 : 2D64 6576 00       
(2)  891/    43D9 :                     		align 2
(2)  892/    43DA :                     str_TesterInfo:
(2)  893/    43DA : 5365 7123 2042      		dc.b "Seq# Blk# Indx",$0A
             43E0 : 6C6B 2320 496E 
             43E6 : 6478 0A          
(2)  894/    43E9 : 0A0A 0A0A           		dc.b $0A,$0A,$0A,$0A
(2)  895/    43ED : 4265 6174 733A 20   		dc.b "Beats: "
(2)  896/    43F4 : 00                  		dc.b 0
(2)  897/    43F5 :                     		align 2
(2)  898/    43F6 :                     str_Instruc:
(2)  899/    43F6 : 4C52 202D 2053      		dc.b "LR - Seq. Num#   XY - Track index",$0A
             43FC : 6571 2E20 4E75 
             4402 : 6D23 2020 2058 
             4408 : 5920 2D20 5472 
             440E : 6163 6B20 696E 
             4414 : 6465 780A          
(2)  900/    4418 : 5544 202D 2053      		dc.b "UD - Seq. Blk#",$0A
             441E : 6571 2E20 426C 
             4424 : 6B23 0A          
(2)  901/    4427 : 2041 202D 2053      		dc.b " A - STOP ALL",$0A
             442D : 544F 5020 414C 
             4433 : 4C0A             
(2)  902/    4435 : 2042 202D 2053      		dc.b " B - STOP Seq.",$0A
             443B : 544F 5020 5365 
             4441 : 712E 0A          
(2)  903/    4444 : 2043 202D 2050      		dc.b " C - PLAY Seq.    Z - PLAY auto-fill",$0A,$0A
             444A : 4C41 5920 5365 
             4450 : 712E 2020 2020 
             4456 : 5A20 2D20 504C 
             445C : 4159 2061 7574 
             4462 : 6F2D 6669 6C6C 
             4468 : 0A0A             
(2)  904/    446A : 5354 4152 5420      		dc.b "START - Exit"
             4470 : 2D20 4578 6974    
(2)  905/    4476 : 00                  		dc.b 0
(2)  906/    4477 :                     		align 2
(2)  907/    4478 :                     
(2)  908/    4478 :                     str_VmInfo:
(2)  909/    4478 : 5053 470A           		dc.b "PSG",$0A
(2)  910/    447C : 464D 0A             		dc.b "FM",$0A
(2)  911/    447F : 5043 4D0A           		dc.b "PCM",$0A
(2)  912/    4483 : 5057 4D             		dc.b "PWM"
(2)  913/    4486 : 00                  		dc.b 0
(2)  914/    4487 :                     		align 2
(2)  915/    4488 :                     
(2)  916/    4488 : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  917/    448C : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
             4492 : 3000 442D 3000 
             4498 : 4423 3000 452D 
             449E : 3000 462D 3000 
             44A4 : 4623 3000 472D 
             44AA : 3000 4723 3000 
             44B0 : 412D 3000 4123 
             44B6 : 3000 422D 3000    
(2)  918/    44BC : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
             44C2 : 3100 442D 3100 
             44C8 : 4423 3100 452D 
             44CE : 3100 462D 3100 
             44D4 : 4623 3100 472D 
             44DA : 3100 4723 3100 
             44E0 : 412D 3100 4123 
             44E6 : 3100 422D 3100    
(2)  919/    44EC : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
             44F2 : 3200 442D 3200 
             44F8 : 4423 3200 452D 
             44FE : 3200 462D 3200 
             4504 : 4623 3200 472D 
             450A : 3200 4723 3200 
             4510 : 412D 3200 4123 
             4516 : 3200 422D 3200    
(2)  920/    451C : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
             4522 : 3300 442D 3300 
             4528 : 4423 3300 452D 
             452E : 3300 462D 3300 
             4534 : 4623 3300 472D 
             453A : 3300 4723 3300 
             4540 : 412D 3300 4123 
             4546 : 3300 422D 3300    
(2)  921/    454C : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
             4552 : 3400 442D 3400 
             4558 : 4423 3400 452D 
             455E : 3400 462D 3400 
             4564 : 4623 3400 472D 
             456A : 3400 4723 3400 
             4570 : 412D 3400 4123 
             4576 : 3400 422D 3400    
(2)  922/    457C : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
             4582 : 3500 442D 3500 
             4588 : 4423 3500 452D 
             458E : 3500 462D 3500 
             4594 : 4623 3500 472D 
             459A : 3500 4723 3500 
             45A0 : 412D 3500 4123 
             45A6 : 3500 422D 3500    
(2)  923/    45AC : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
             45B2 : 3600 442D 3600 
             45B8 : 4423 3600 452D 
             45BE : 3600 462D 3600 
             45C4 : 4623 3600 472D 
             45CA : 3600 4723 3600 
             45D0 : 412D 3600 4123 
             45D6 : 3600 422D 3600    
(2)  924/    45DC : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
             45E2 : 3700 442D 3700 
             45E8 : 4423 3700 452D 
             45EE : 3700 462D 3700 
             45F4 : 4623 3700 472D 
             45FA : 3700 4723 3700 
             4600 : 412D 3700 4123 
             4606 : 3700 422D 3700    
(2)  925/    460C : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
             4612 : 3800 442D 3800 
             4618 : 4423 3800 452D 
             461E : 3800 462D 3800 
             4624 : 4623 3800 472D 
             462A : 3800 4723 3800 
             4630 : 412D 3800 4123 
             4636 : 3800 422D 3800    
(2)  926/    463C : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
             4642 : 3900 442D 3900 
             4648 : 4423 3900 452D 
             464E : 3900 462D 3900 
             4654 : 4623 3900 472D 
             465A : 3900 4723 3900 
             4660 : 412D 3900 4123 
             4666 : 3900 422D 3900    
(2)  927/    466C : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  928/    4670 : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
             4676 : 2000 442D 2000 
             467C : 4423 2000 452D 
             4682 : 2000 462D 2000 
             4688 : 4623 2000 472D 
             468E : 2000 4723 2000 
             4694 : 412D 2000 4123 
             469A : 2000 422D 2000    
(2)  929/    46A0 : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
             46A6 : 3300 3400 3500 
             46AC : 3600 3700 3800 
             46B2 : 3900             
(2)  930/    46B4 :                     
(2)  931/    46B4 : 464D 3300           str_Speci:	dc.b "FM3",0
(2)  932/    46B8 : 4441 4300           str_Sampl:	dc.b "DAC",0
(2)  933/    46BC :                     
(2)  934/    46BC :                     str_ShowVars:
(2)  935/    46BC : 80FF B86F           		dc.l pstr_mem(0,RAM_GemaSeq+1)
(2)  936/    46C0 : 2020 20             		dc.b "   "
(2)  937/    46C3 : 80FF B871           		dc.l pstr_mem(0,RAM_GemaBlk+1)
(2)  938/    46C7 : 2020 20             		dc.b "   "
(2)  939/    46CA : 80FF B86D           		dc.l pstr_mem(0,RAM_GemaIndx+1)
(2)  940/    46CE : 00                  		dc.b 0
(2)  941/    46CF :                     		align 2
(2)  942/    46D0 :                     str_ShowBeats:
(2)  943/    46D0 : 81FF B87C           		dc.l pstr_mem(1,RAM_CurrBeats)
(2)  944/    46D4 : 00                  		dc.b 0
(2)  945/    46D5 :                     		align 2
(2)  946/    46D6 :                     
(2)  947/    46D6 :                     str_Info:
(2)  948/    46D6 : 83FF D7DC           		dc.l pstr_mem(3,RAM_Framecount)
(2)  949/    46DA : 00                  		dc.b 0
(2)  950/    46DB :                     		align 2
(2)  951/    46DC :                     
(1)   15/    46DC :                     mcscrn_e:
(1)   15/    46DC :                     ; Md_Screen00_e:
(1)   15/    46DC : =$46DC               MD_SCREEN00_E label *
(1)   15/    46DC :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   16/    46DC :                     
     376/    46DC :                     
     377/    46DC :                     ; ====================================================================
     378/    46DC :                     ; ----------------------------------------------------------------
     379/    46DC :                     ; DATA BLOCK (banks)
     380/    46DC :                     ; ----------------------------------------------------------------
     381/    46DC :                     
     382/    46DC :                     		include "game/incl_data.asm"
(1)    1/    46DC :                     ; ===========================================================================
(1)    2/    46DC :                     ; ----------------------------------------------------------------
(1)    3/    46DC :                     ; 68K DATA BANKS
(1)    4/    46DC :                     ;
(1)    5/    46DC :                     ; Size limits:
(1)    6/    46DC :                     ;  $40000 for SegaCD's Word-RAM **compatible to all**
(1)    7/    46DC :                     ;  $80000 for Sega-Mapper(SSF2) bank
(1)    8/    46DC :                     ; $100000 for 32X Cartridge
(1)    9/    46DC :                     ; All 4MB for Genesis/Pico
(1)   10/    46DC :                     ;
(1)   11/    46DC :                     ; SCD/CD32:
(1)   12/    46DC :                     ; Add your BANK entries and filenames on iso_files.asm
(1)   13/    46DC :                     ;
(1)   14/    46DC :                     ; MACRO Usage:
(1)   15/    46DC :                     ;	data_dset LABEL_START
(1)   16/    46DC :                     ;	; your data
(1)   17/    46DC :                     ;	data_dend LABEL_END
(1)   18/    46DC :                     ; ----------------------------------------------------------------
(1)   19/    46DC :                     
(1)   20/    46DC :                     ; ============================================================
(1)   21/    46DC :                     ; --------------------------------------------------------
(1)   22/    46DC :                     ; MAIN bank
(1)   23/    46DC :                     ; --------------------------------------------------------
(1)   24/    46DC :                     
(1)   25/    46DC : (MACRO)              	data_dset DATA_BANK0
(1)   25/    46DC :                     ; MCD_DBANK0:
(1)   25/    46DC : =$46DC               DATA_BANK0 label *
(1)   25/    46DC : =$46DC               GLBL_MDATA_ST := *
(1)   26/    46DC :                     	; ------------------------------------------------
(1)   27/    46DC :                     		include "sound/tracks.asm"		; GEMA user sound data
(2)    1/    46DC :                     ; ===========================================================================
(2)    2/    46DC :                     ; -------------------------------------------------------------------
(2)    3/    46DC :                     ; Main sound data
(2)    4/    46DC :                     ; -------------------------------------------------------------------
(2)    5/    46DC :                     
(2)    6/    46DC :                     MainGemaSeqList:
(2)    7/    46DC : (MACRO)              	gemaTrk 0,14,gtrk_Test0
(2)    7/    46DC : 0E00 46E4                   dc.l ((0&$01)<<31)|((14&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)    8/    46E0 : (MACRO)              	gemaTrk 1,6,gtrk_Test1
(2)    8/    46E0 : 8600 48F9                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST1&$FFFFFF)
(2)    9/    46E4 :                     
(2)   10/    46E4 :                     ; ----------------------------------------------------
(2)   11/    46E4 :                     gtrk_Test0:
(2)   12/    46E4 : (MACRO)              	gemaHead .blk,.pat,.ins,4
(2)   12/    46E4 : 0004                        dc.w 4
(2)   12/    46E6 : 0000 46F2                   dc.l .BLK
(2)   12/    46EA : 0000 46FA                   dc.l .PAT
(2)   12/    46EE : 0000 48C1                   dc.l .INS
(2)   13/    46F2 :                     .blk:	binclude "sound/tracks/test_blk.bin"
(2)   14/    46FA :                     .pat:	binclude "sound/tracks/test_patt.bin"
(2)   15/    48C1 :                     .ins:
(2)   16/    48C1 : (MACRO)              	gInsPsg    0,$00,$00,$00,$00,$01,$00
(2)   16/    48C1 : 8000 0000                   dc.b $80,0,$00,$00
(2)   16/    48C5 : 0000 0100                   dc.b $00,$00,$01,$00
(2)   17/    48C9 : (MACRO)              	gInsPsgN +12,$00,$00,$00,$00,$01,$00,%011		; Tone3
(2)   17/    48C9 : 930C 0000                   dc.b $90|%011,+12,$00,$00
(2)   17/    48CD : 0000 0100                   dc.b $00,$00,$01,$00
(2)   18/    48D1 : (MACRO)              	gInsFm   -12,FmIns_Trumpet_bus,0
(2)   18/    48D1 : A0F4 005D                   dc.b $A0,-12,((FMINS_TRUMPET_BUS>>16)&$FF),((FMINS_TRUMPET_BUS>>8)&$FF)
(2)   18/    48D5 : E500 0000                   dc.b FMINS_TRUMPET_BUS&$FF,$00,$00,$00
(2)   19/    48D9 : (MACRO)              	gInsFm3    0,FmIns_Sp_OpenHat,0
(2)   19/    48D9 : B000 0060                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)   19/    48DD : 6D00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)   20/    48E1 : (MACRO)              	gInsDac    0,DacIns_TEST,0
(2)   20/    48E1 : C000 0068                   dc.b $C0|0,0,((DACINS_TEST>>16)&$FF),((DACINS_TEST>>8)&$FF)
(2)   20/    48E5 : 0000 0000                   dc.b DACINS_TEST&$FF,0,0,0
(2)   21/    48E9 : (MACRO)              	gInsPcm    0,PcmIns_TEST,0
(2)   21/    48E9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   21/    48ED : 0000 0000                   dc.b $00,$00,$00,$00
(2)   22/    48F1 : (MACRO)              	gInsPwm    0,PwmIns_TEST,%10
(2)   22/    48F1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   22/    48F5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   23/    48F9 :                     
(2)   24/    48F9 :                     ; ----------------------------------------------------
(2)   25/    48F9 :                     gtrk_Test1:
(2)   26/    48F9 : (MACRO)              	gemaHead .blk,.pat,.ins,4
(2)   26/    48F9 : 0004                        dc.w 4
(2)   26/    48FB : 0000 4907                   dc.l .BLK
(2)   26/    48FF : 0000 492C                   dc.l .PAT
(2)   26/    4903 : 0000 589D                   dc.l .INS
(2)   27/    4907 :                     .blk:	binclude "sound/tracks/sauron_blk.bin"
(2)   28/    492C :                     .pat:	binclude "sound/tracks/sauron_patt.bin"
(2)   29/    589D :                     .ins:
(2)   30/    589D : (MACRO)              	gInsPcm -12,PcmIns_sauron_01,0
(2)   30/    589D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   30/    58A1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   31/    58A5 : (MACRO)              	gInsPcm -12,PcmIns_sauron_02,0
(2)   31/    58A5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   31/    58A9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   32/    58AD : (MACRO)              	gInsPcm -12,PcmIns_sauron_03,0
(2)   32/    58AD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   32/    58B1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   33/    58B5 : (MACRO)              	gInsPcm -12,PcmIns_sauron_04,0
(2)   33/    58B5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   33/    58B9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   34/    58BD : (MACRO)              	gInsPcm -12,PcmIns_sauron_05,1
(2)   34/    58BD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   34/    58C1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   35/    58C5 : (MACRO)              	gInsPcm -12,PcmIns_sauron_06,0
(2)   35/    58C5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   35/    58C9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   36/    58CD : (MACRO)              	gInsPcm -12,PcmIns_sauron_07,0
(2)   36/    58CD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   36/    58D1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   37/    58D5 : (MACRO)              	gInsPcm -12,PcmIns_sauron_08,0
(2)   37/    58D5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   37/    58D9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   38/    58DD : (MACRO)              	gInsPcm -12,PcmIns_sauron_09,0
(2)   38/    58DD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   38/    58E1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   39/    58E5 : (MACRO)              	gInsPcm -12,PcmIns_sauron_10,0
(2)   39/    58E5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   39/    58E9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   40/    58ED : (MACRO)              	gInsPcm -12,PcmIns_sauron_11,0
(2)   40/    58ED : 0000 0000                   dc.b $00,$00,$00,$00
(2)   40/    58F1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   41/    58F5 : (MACRO)              	gInsPcm -12,PcmIns_sauron_12,0
(2)   41/    58F5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   41/    58F9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   42/    58FD : (MACRO)              	gInsNull
(2)   42/    58FD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   42/    5901 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   43/    5905 :                     
(2)   44/    5905 :                     ; ===========================================================================
(2)   45/    5905 :                     ; -------------------------------------------------------------------
(2)   46/    5905 :                     ; GEMA/Nikona FM instruments
(2)   47/    5905 :                     ; -------------------------------------------------------------------
(2)   48/    5905 :                     
(2)   49/    5905 :                     ; -----------------------------------------------------------
(2)   50/    5905 :                     ; Normal FM Instruments
(2)   51/    5905 :                     ; -----------------------------------------------------------
(2)   52/    5905 :                     
(2)   53/    5905 :                     FmIns_Bass_big_81:
(2)   54/    5905 :                     		binclude "sound/instr/fm/bin/bass_big_82.bin"
(2)   55/    5925 :                     FmIns_Bass_big_110:
(2)   56/    5925 :                     		binclude "sound/instr/fm/bin/bass_big_110.bin"
(2)   57/    5945 :                     FmIns_Bass_big_114:
(2)   58/    5945 :                     		binclude "sound/instr/fm/bin/bass_big_114.bin"
(2)   59/    5965 :                     FmIns_Bass_big_122:
(2)   60/    5965 :                     		binclude "sound/instr/fm/bin/bass_big_122.bin"
(2)   61/    5985 :                     FmIns_Bass_cave_47:
(2)   62/    5985 :                     		binclude "sound/instr/fm/bin/bass_cave_47.bin"
(2)   63/    59A5 :                     FmIns_Bass_club_108:
(2)   64/    59A5 :                     		binclude "sound/instr/fm/bin/bass_club_108.bin"
(2)   65/    59C5 :                     FmIns_Bass_foot_75:
(2)   66/    59C5 :                     		binclude "sound/instr/fm/bin/bass_foot_75.bin"
(2)   67/    59E5 :                     FmIns_Bass_gem_26:
(2)   68/    59E5 :                     		binclude "sound/instr/fm/bin/bass_gem_26.bin"
(2)   69/    5A05 :                     FmIns_Bass_groove_119:
(2)   70/    5A05 :                     		binclude "sound/instr/fm/bin/bass_groove_119.bin"
(2)   71/    5A25 :                     FmIns_Bass_heavy_107:
(2)   72/    5A25 :                     		binclude "sound/instr/fm/bin/bass_heavy_107.bin"
(2)   73/    5A45 :                     FmIns_Bass_heavy_118:
(2)   74/    5A45 :                     		binclude "sound/instr/fm/bin/bass_heavy_118.bin"
(2)   75/    5A65 :                     FmIns_Bass_loud_117:
(2)   76/    5A65 :                     		binclude "sound/instr/fm/bin/bass_loud_117.bin"
(2)   77/    5A85 :                     FmIns_bass_low_46:
(2)   78/    5A85 :                     		binclude "sound/instr/fm/bin/bass_low_46.bin"
(2)   79/    5AA5 :                     FmIns_Bass_Groove_1:
(2)   80/    5AA5 :                     		binclude "sound/instr/fm/bin/bass_groove_1.bin"
(2)   81/    5AC5 :                     FmIns_bass_low_81:
(2)   82/    5AC5 :                     		binclude "sound/instr/fm/bin/bass_low_81.bin"
(2)   83/    5AE5 :                     FmIns_bass_low_103:
(2)   84/    5AE5 :                     		binclude "sound/instr/fm/bin/bass_low_103.bin"
(2)   85/    5B05 :                     FmIns_bass_low_106:
(2)   86/    5B05 :                     		binclude "sound/instr/fm/bin/bass_low_106.bin"
(2)   87/    5B25 :                     FmIns_bass_low_126:
(2)   88/    5B25 :                     		binclude "sound/instr/fm/bin/bass_low_126.bin"
(2)   89/    5B45 :                     FmIns_bass_mid_19:
(2)   90/    5B45 :                     		binclude "sound/instr/fm/bin/bass_mid_19.bin"
(2)   91/    5B65 :                     FmIns_bass_mid_80:
(2)   92/    5B65 :                     		binclude "sound/instr/fm/bin/bass_mid_80.bin"
(2)   93/    5B85 :                     FmIns_bass_mid_111:
(2)   94/    5B85 :                     		binclude "sound/instr/fm/bin/bass_mid_111.bin"
(2)   95/    5BA5 :                     FmIns_bass_power_123:
(2)   96/    5BA5 :                     		binclude "sound/instr/fm/bin/bass_power_123.bin"
(2)   97/    5BC5 :                     FmIns_bass_silent_53:
(2)   98/    5BC5 :                     		binclude "sound/instr/fm/bin/bass_silent_53.bin"
(2)   99/    5BE5 :                     FmIns_bass_slap_10:
(2)  100/    5BE5 :                     		binclude "sound/instr/fm/bin/bass_slap_10.bin"
(2)  101/    5C05 :                     FmIns_bass_slap_105:
(2)  102/    5C05 :                     		binclude "sound/instr/fm/bin/bass_slap_105.bin"
(2)  103/    5C25 :                     FmIns_bass_synth_60:
(2)  104/    5C25 :                     		binclude "sound/instr/fm/bin/bass_synth_60.bin"
(2)  105/    5C45 :                     FmIns_bass_synth_61:
(2)  106/    5C45 :                     		binclude "sound/instr/fm/bin/bass_synth_61.bin"
(2)  107/    5C65 :                     FmIns_bass_synth_72:
(2)  108/    5C65 :                     		binclude "sound/instr/fm/bin/bass_synth_72.bin"
(2)  109/    5C85 :                     FmIns_bass_synth_73:
(2)  110/    5C85 :                     		binclude "sound/instr/fm/bin/bass_synth_73.bin"
(2)  111/    5CA5 :                     FmIns_bass_vlow_74:
(2)  112/    5CA5 :                     		binclude "sound/instr/fm/bin/bass_vlow_74.bin"
(2)  113/    5CC5 :                     FmIns_Organ_drawbar:
(2)  114/    5CC5 :                     		binclude "sound/instr/fm/bin/organ_drawbar.bin"
(2)  115/    5CE5 :                     FmIns_Flaute_1:
(2)  116/    5CE5 :                     		binclude "sound/instr/fm/bin/flaute_1.bin"
(2)  117/    5D05 :                     FmIns_Flaute_2:
(2)  118/    5D05 :                     		binclude "sound/instr/fm/bin/flaute_2.bin"
(2)  119/    5D25 :                     FmIns_Vibraphone_1:
(2)  120/    5D25 :                     		binclude "sound/instr/fm/bin/vibraphone_1.bin"
(2)  121/    5D45 :                     FmIns_Vibraphone_2:
(2)  122/    5D45 :                     		binclude "sound/instr/fm/bin/vibraphone_2.bin"
(2)  123/    5D65 :                     FmIns_Xylophone:
(2)  124/    5D65 :                     		binclude "sound/instr/fm/bin/xylophone2_43.bin"
(2)  125/    5D85 :                     FmIns_Bass_low81:
(2)  126/    5D85 :                     		binclude "sound/instr/fm/bin/bass_low_46.bin"
(2)  127/    5DA5 :                     FmIns_Trumpet_low:
(2)  128/    5DA5 :                     		binclude "sound/instr/fm/bin/trumpet_low.bin"
(2)  129/    5DC5 :                     FmIns_Trumpet_genie:
(2)  130/    5DC5 :                     		binclude "sound/instr/fm/bin/trumpet_genie.bin"
(2)  131/    5DE5 :                     FmIns_Trumpet_bus:
(2)  132/    5DE5 :                     		binclude "sound/instr/fm/bin/trumpet_bus.bin"
(2)  133/    5E05 :                     FmIns_Hats_1:
(2)  134/    5E05 :                     		binclude "sound/instr/fm/bin/hats_96.bin"
(2)  135/    5E25 :                     FmIns_Bell_mid36:
(2)  136/    5E25 :                     		binclude "sound/instr/fm/bin/bell_mid_36.bin"
(2)  137/    5E45 :                     FmIns_Drum_Kick:
(2)  138/    5E45 :                     		binclude "sound/instr/fm/bin/kick_low.bin"
(2)  139/    5E65 :                     FmIns_Tick:
(2)  140/    5E65 :                     		binclude "sound/instr/fm/bin/tick_44.bin"
(2)  141/    5E85 :                     
(2)  142/    5E85 :                     ; -----------------------------------------------------------
(2)  143/    5E85 :                     ; Special FM3 Instruments
(2)  144/    5E85 :                     ; -----------------------------------------------------------
(2)  145/    5E85 :                     
(2)  146/    5E85 :                     FmSpIns_clack_1:
(2)  147/    5E85 :                     		binclude "sound/instr/fm/bin/fm3_clack_1.bin"
(2)  148/    5EAD :                     FmSpIns_cowbell_h:
(2)  149/    5EAD :                     		binclude "sound/instr/fm/bin/fm3_cowbell_h.bin"
(2)  150/    5ED5 :                     FmSpIns_cowbell_l:
(2)  151/    5ED5 :                     		binclude "sound/instr/fm/bin/fm3_cowbell_l.bin"
(2)  152/    5EFD :                     FmSpIns_hats_hq:
(2)  153/    5EFD :                     		binclude "sound/instr/fm/bin/fm3_hats_hq.bin"
(2)  154/    5F25 :                     FmSpIns_sfx_alien:
(2)  155/    5F25 :                     		binclude "sound/instr/fm/bin/fm3_sfx_alien.bin"
(2)  156/    5F4D :                     FmSpIns_sfx_knckbuzz:
(2)  157/    5F4D :                     		binclude "sound/instr/fm/bin/fm3_sfx_knckbuzz.bin"
(2)  158/    5F75 :                     FmSpIns_sfx_knock_h:
(2)  159/    5F75 :                     		binclude "sound/instr/fm/bin/fm3_sfx_knock_h.bin"
(2)  160/    5F9D :                     FmSpIns_sfx_knock_l:
(2)  161/    5F9D :                     		binclude "sound/instr/fm/bin/fm3_sfx_knock_l.bin"
(2)  162/    5FC5 :                     FmSpIns_sfx_laser:
(2)  163/    5FC5 :                     		binclude "sound/instr/fm/bin/fm3_sfx_laser.bin"
(2)  164/    5FED :                     
(2)  165/    5FED :                     ; -----------------------------------------------------------
(2)  166/    5FED :                     ; FM sound effects
(2)  167/    5FED :                     ; -----------------------------------------------------------
(2)  168/    5FED :                     
(2)  169/    5FED :                     FmIns_sfx_punch:
(2)  170/    5FED :                     		binclude "sound/instr/fm/bin/sfx_punch.bin"
(2)  171/    600D :                     FmIns_sfx_slash:
(2)  172/    600D :                     		binclude "sound/instr/fm/bin/sfx_slash.bin"
(2)  173/    602D :                     FmIns_sfx_alien1:
(2)  174/    602D :                     		binclude "sound/instr/fm/bin/sfx_alien_83.bin"
(2)  175/    604D :                     FmIns_sfx_alien2:
(2)  176/    604D :                     		binclude "sound/instr/fm/bin/sfx_alien_84.bin"
(2)  177/    606D :                     
(2)  178/    606D :                     ; ====================================================================
(2)  179/    606D :                     
(2)  180/    606D :                     ; FM3 Special
(2)  181/    606D :                     FmIns_Sp_OpenHat:
(2)  182/    606D :                     		binclude "sound/instr/fm/gsx/fm3_openhat.gsx",$2478,$28
(2)  183/    6095 :                     FmIns_Sp_ClosedHat:
(2)  184/    6095 :                     		binclude "sound/instr/fm/gsx/fm3_closedhat.gsx",$2478,$28
(2)  185/    60BD :                     FmIns_Sp_Cowbell:
(2)  186/    60BD :                     		binclude "sound/instr/fm/gsx/fm3_cowbell.gsx",$2478,$28
(2)  187/    60E5 :                     FmIns_Drums_Kick1:
(2)  188/    60E5 :                     		binclude "sound/instr/fm/gsx/drum_kick_gem.gsx",$2478,$20
(2)  189/    6105 :                     FmIns_Piano_Aqua:
(2)  190/    6105 :                     		binclude "sound/instr/fm/gsx/piano_aqua.gsx",$2478,$20
(2)  191/    6125 :                     FmIns_HBeat_tom:
(2)  192/    6125 :                     		binclude "sound/instr/fm/gsx/nadia_tom.gsx",$2478,$20
(2)  193/    6145 :                     FmIns_Trumpet_1:
(2)  194/    6145 :                     		binclude "sound/instr/fm/gsx/trumpet_1.gsx",$2478,$20
(2)  195/    6165 :                     FmIns_Bass_duck:
(2)  196/    6165 :                     		binclude "sound/instr/fm/gsx/bass_duck.gsx",$2478,$20
(2)  197/    6185 :                     FmIns_ClosedHat:
(2)  198/    6185 :                     		binclude "sound/instr/fm/gsx/hats_closed.gsx",$2478,$20
(2)  199/    61A5 :                     FmIns_Trumpet_carnival:
(2)  200/    61A5 :                     		binclude "sound/instr/fm/gsx/OLD_trumpet_carnivl.gsx",$2478,$20
(2)  201/    61C5 :                     FmIns_Bass_club:
(2)  202/    61C5 :                     		binclude "sound/instr/fm/gsx/OLD_bass_club.gsx",$2478,$20
(2)  203/    61E5 :                     FmIns_Bass_groove_2:
(2)  204/    61E5 :                     		binclude "sound/instr/fm/gsx/bass_groove_2.gsx",$2478,$20
(2)  205/    6205 :                     FmIns_PSynth_plus:
(2)  206/    6205 :                     		binclude "sound/instr/fm/gsx/psynth_plus.gsx",$2478,$20
(2)  207/    6225 :                     FmIns_Brass_7:
(2)  208/    6225 :                     		binclude "sound/instr/fm/gsx/brass_7.gsx",$2478,$20
(2)  209/    6245 :                     
(2)  210/    6245 :                     ; ===========================================================================
(2)  211/    6245 :                     ; -------------------------------------------------------------------
(2)  212/    6245 :                     ; GEMA/Nikona DAC samples
(2)  213/    6245 :                     ;
(2)  214/    6245 :                     ; 16000hz base
(2)  215/    6245 :                     ; -------------------------------------------------------------------
(2)  216/    6245 :                     
(2)  217/    6245 :                     		align $800
(2)  218/    6800 :                     		;gSmplData Label,"file_path",loop_start
(2)  219/    6800 :                     ; -----------------------------------------------------------
(2)  220/    6800 : (MACRO)              		gSmplData DacIns_TEST,"sound/instr/smpl/test.wav",0
(2)  220/    6800 : =$6800               DACINS_TEST    label *
(2)  220/    6800 : 386F 00                     dc.b ((DACINS_TEST_e-DACINS_TEST_s)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>8)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>16)&$FF)
(2)  220/    6803 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  220/    6806 :                     DACINS_TEST_s:
(2)  220/    6806 :                             binclude "sound/instr/smpl/test.wav",$2C
(2)  220/    D73E :                     DACINS_TEST_e:
(2)  221/    D73E :                     
(1)   28/    D73E :                     		include "game/data/bank_main.asm"
(2)    1/    D73E :                     ; ===========================================================================
(2)    2/    D73E :                     ; ----------------------------------------------------------------
(2)    3/    D73E :                     ; BANK data
(2)    4/    D73E :                     ; ----------------------------------------------------------------
(2)    5/    D73E :                     
(2)    6/    D73E : (MACRO)              		binclude_dma	ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)    6/    D73E :                     
(2)    6/    D73E :                                     align 2
(2)    6/    D73E : =$D73E               ASCII_FONT        label *
(2)    6/    D73E :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)    6/    E33E :                                     align 2
(2)    6/    E33E :                     
(2)    7/    E33E : (MACRO)              		binclude_dma	ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)    7/    E33E :                     
(2)    7/    E33E :                                     align 2
(2)    7/    E33E : =$E33E               ASCII_FONT_W        label *
(2)    7/    E33E :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)    7/    FB3E :                                     align 2
(2)    7/    FB3E :                     
(2)    8/    FB3E :                     
(2)    9/    FB3E : (MACRO)              		binclude_dma	Art_FairyDodo,"game/data/md/sprites/dodo/art.bin"
(2)    9/    FB3E :                     
(2)    9/    FB3E :                                     align 2
(2)    9/    FB3E : =$FB3E               ART_FAIRYDODO        label *
(2)    9/    FB3E :                                     binclude "game/data/md/sprites/dodo/art.bin"
(2)    9/   1013E :                                     align 2
(2)    9/   1013E :                     
(2)   10/   1013E : (MACRO)              		binclude_dma	Art_FairyMimi,"game/data/md/sprites/mimi/art.bin"
(2)   10/   1013E :                     
(2)   10/   1013E :                                     align 2
(2)   10/   1013E : =$1013E              ART_FAIRYMIMI        label *
(2)   10/   1013E :                                     binclude "game/data/md/sprites/mimi/art.bin"
(2)   10/   1073E :                                     align 2
(2)   10/   1073E :                     
(2)   11/   1073E : (MACRO)              		binclude_dma	Art_FairyFifi,"game/data/md/sprites/fifi/art.bin"
(2)   11/   1073E :                     
(2)   11/   1073E :                                     align 2
(2)   11/   1073E : =$1073E              ART_FAIRYFIFI        label *
(2)   11/   1073E :                                     binclude "game/data/md/sprites/fifi/art.bin"
(2)   11/   10CBE :                                     align 2
(2)   11/   10CBE :                     
(2)   12/   10CBE :                     
(2)   13/   10CBE :                     ; ----------------------------------------------------------------
(2)   14/   10CBE :                     
(2)   15/   10CBE :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)   16/   10CDE :                     		align 2
(2)   17/   10CDE :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)   18/   10D22 :                     		align 2
(2)   19/   10D22 :                     
(2)   20/   10D22 :                     objPal_Dodo:	binclude "game/data/md/sprites/dodo/pal.bin"
(2)   21/   10D42 :                     		align 2
(2)   22/   10D42 :                     objMap_Dodo:	binclude "game/data/md/sprites/dodo/map.bin"
(2)   23/   10D66 :                     		align 2
(2)   24/   10D66 :                     objMap_Mimi:	binclude "game/data/md/sprites/mimi/map.bin"
(2)   25/   10D8A :                     		align 2
(2)   26/   10D8A :                     objMap_Fifi:	binclude "game/data/md/sprites/fifi/map.bin"
(2)   27/   10DC6 :                     		align 2
(2)   28/   10DC6 :                     
(1)   29/   10DC6 :                     	; ------------------------------------------------
(1)   30/   10DC6 : (MACRO)              	data_dend DATA_BANK0_e
(1)   30/   10DC6 : =$C6EA               GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   30/   10DC6 :                     
(1)   30/   10DC6 :                     
(1)   31/   10DC6 :                     
     383/   10DC6 :                     
     384/   10DC6 :                     ; ====================================================================
     385/   10DC6 :                     ; ----------------------------------------------------------------
     386/   10DC6 :                     ; Cartridge-ONLY Section, direct label access
     387/   10DC6 :                     ;
     388/   10DC6 :                     ; Genesis, 32X Cartridge and Pico ONLY.
     389/   10DC6 :                     ; ----------------------------------------------------------------
     390/   10DC6 :                     
     392/   10DC6 :                     
     393/   10DC6 :                     ; --------------------------------------------------------
     394/   10DC6 :                     ; ROM only DMA graphics data
     395/   10DC6 :                     ; --------------------------------------------------------
     396/   10DC6 :                     
     397/   10DC6 :                     		include "game/data/ROM_dma_vdp.asm"
(1)    1/   10DC6 :                     ; ===========================================================================
(1)    2/   10DC6 :                     ; ----------------------------------------------------------------
(1)    3/   10DC6 :                     ; DMA Genesis graphics for Cartridge ONLY
(1)    4/   10DC6 :                     ; ----------------------------------------------------------------
(1)    5/   10DC6 :                     		align 2
(1)    6/   10DC6 :                     ; --------------------------------------------------------
(1)    7/   10DC6 :                     
     398/   10DC6 :                     
     399/   10DC6 :                     ; --------------------------------------------------------
     400/   10DC6 :                     ; ROM-only 32X data
     401/   10DC6 :                     ;
     402/   10DC6 :                     ; In the case of RV bit (during DMA):
     403/   10DC6 :                     ; Only the PWM samples are protected, everything else
     404/   10DC6 :                     ; will be trashed.
     405/   10DC6 :                     ; --------------------------------------------------------
     406/   10DC6 :                     
     407/ 2010DC6 :                     		phase CS1+*
     408/ 2010DC6 :                     ; ------------------------------------------------
     409/ 2010DC6 :                     		align 4
     410/ 2010DC8 :                     		include "game/data/mars/objects/list_ROM.asm"	; 3D objects
(1)    1/ 2010DC8 :                     ; ===========================================================================
(1)    2/ 2010DC8 :                     ; ----------------------------------------------------------------
(1)    3/ 2010DC8 :                     ; Special include for the 3D models, ROM-ONLY VERSION
(1)    4/ 2010DC8 :                     ;
(1)    5/ 2010DC8 :                     ; THIS CAN'T BE USED ON SCD/CD32X
(1)    6/ 2010DC8 :                     ; ----------------------------------------------------------------
(1)    7/ 2010DC8 :                     
(1)    8/ 2010DC8 :                     ; 		include "game/data/mars/objects/test/head.asm"
(1)    9/ 2010DC8 :                     ; 		include "game/data/mars/objects/test_2/head.asm"
(1)   10/ 2010DC8 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(1)   11/ 2010DC8 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(1)   12/ 2010DC8 :                     
     411/ 2010DC8 :                     		include "sound/ROM_smpl_pwm.asm"		; PWM samples
(1)    1/ 2010DC8 :                     ; ===========================================================================
(1)    2/ 2010DC8 :                     ; -------------------------------------------------------------------
(1)    3/ 2010DC8 :                     ; GEMA/Nikona PWM instruments on Cartridge ONLY
(1)    4/ 2010DC8 :                     ;
(1)    5/ 2010DC8 :                     ; - Samples located here CANNOT be used on CD32X
(1)    6/ 2010DC8 :                     ; - If the Genesis does DMA that requires the RV bit this
(1)    7/ 2010DC8 :                     ;   section will get protected ASAP before the DMA starts
(1)    8/ 2010DC8 :                     ;
(1)    9/ 2010DC8 :                     ; MACRO:
(1)   10/ 2010DC8 :                     ; gSmplData Label,"file_path",loop_start
(1)   11/ 2010DC8 :                     ; Set loop_start to 0 if not using it.
(1)   12/ 2010DC8 :                     ;
(1)   13/ 2010DC8 :                     ; BASE C-5 samplerate is 16000hz
(1)   14/ 2010DC8 :                     ; -------------------------------------------------------------------
(1)   15/ 2010DC8 :                     
(1)   16/ 2010DC8 :                     	align 4
(1)   17/ 2010DC8 :                     	;gSmplData Label,"file_path",loop_start
(1)   18/ 2010DC8 :                     ; -----------------------------------------------------------
(1)   19/ 2010DC8 :                     
     412/ 2010DC8 :                     ; ------------------------------------------------
     413/   10DC8 :                     		dephase
     414/   10DC8 :                     
     415/   10DC8 :                     ; ----------------------------------------------------------------
     416/   10DC8 :                     
     418/   10DC8 :                     
     419/   10DC8 :                     ; ====================================================================
     420/   10DC8 :                     ; ------------------------------------------------
     421/   10DC8 :                     ; End
     422/   10DC8 :                     ; ------------------------------------------------
     423/   10DC8 :                     
     424/   10DC8 :                     ROM_END:
     425/   10DC8 : 00                  		dc.b 0
     426/   10DC9 :                     		align $8000
     427/   18000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 10/11/2024 07:15:31 PM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARP :                           2C - |  ART_FAIRYDODO :               FB3E C |
 ART_FAIRYFIFI :              1073E C |  ART_FAIRYMIMI :              1013E C |
 ASCII_FONT :                  D73E C |  ASCII_FONT_W :                E33E C |
 ATK :                            8 - | *ATTRH :                        800 - |
*ATTRPRIO :                    8000 - | *ATTRV :                       1000 - |
*BANKSET :                        4 - | *BIGENDIAN :                      0 - |
*BITATTRH :                       3 - | *BITATTRPRIO :                    7 - |
*BITATTRV :                       4 - | *BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYPEN :                      7 - |
*BITJOYRED :                      4 - | *BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CHIP_ENV :                    1046 C |
 CHIP_ENV.ATKEND :             10C9 C | *CHIP_ENV.ATKZERO :            10CC C |
 CHIP_ENV.CHK2 :               10D2 C |  CHIP_ENV.CHK4 :               1107 C |
 CHIP_ENV.CKOF :               106A C |  CHIP_ENV.CKON :               107D C |
*CHIP_ENV.DECTMR :             10D6 C |  CHIP_ENV.DKADD :              10F0 C |
 CHIP_ENV.DKSAV :              10F8 C |  CHIP_ENV.DKYEND :             10FD C |
 CHIP_ENV.DO_NFREQ :           115C C |  CHIP_ENV.ENVPROC :            109B C |
 CHIP_ENV.KILLENV :            111D C | *CHIP_ENV.NBLOCK :             109B C |
 CHIP_ENV.NORMAL :             1157 C |  CHIP_ENV.NOUPD :              119D C |
 CHIP_ENV.NSKIP :              1092 C |  CHIP_ENV.SILNC_3 :            1153 C |
 CHIP_ENV.VEDLP :              1125 C |  CHIP_ENV.VLMUCH :             1189 C |
 CHIP_ENV.VLOOP :              1052 C |  CHIP_ENV.VONLY :              117F C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - | *COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - | *COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - | *COMM2 :                         22 - |
*COMM3 :                         23 - | *COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - | *COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                     3F C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFD8F8 - |
*CONTROLLER_2 :    FFFFFFFFFFFFD908 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CURRTICKBITS :                1CFB C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
 DACINS_TEST :                 6800 C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     11D8 C |
 DAC_ON :                      11C3 C |  DAC_PLAY :                    11ED C |
 DAC_REFILL :                  1221 C |  DAC_REFILL.DACFILL_END :      12E0 C |
 DAC_REFILL.DACFILL_LOOP :     1299 C |  DAC_REFILL.DACFILL_RET :      12E3 C |
 DAC_REFILL.DAC_OVER :         126F C |  DATA_BANK0 :                  46DC C |
*DATE :                "10/11/2024" - |  DDACCNTR :                    1F66 C |
 DDACFIFOMID :                 1F62 C |  DDACPNTR :                    1F63 C |
*DEF_HSIZE_128 :                100 - | *DEF_HSIZE_32 :                  40 - |
 DEF_HSIZE_64 :                  80 - | *DEF_MAXSTAMPCOUT :              60 - |
 DEF_PRINTPAL :                6000 - |  DEF_PRINTVRAM :                5A0 - |
 DEF_PRINTVRAMW :               4E0 - | *DEF_SAVEINFO :                1C2C C |
 DEF_VRAM_BG :                 E000 - |  DEF_VRAM_FG :                 C000 - |
 DEF_VRAM_HSCRL :              FC00 - |  DEF_VRAM_SPR :                F800 - |
 DEF_VRAM_WD :                 D000 - | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      64 C |
 DRV_LOOP.CMND_0 :               FA C |  DRV_LOOP.CMND_1 :               FD C |
 DRV_LOOP.CMND_2 :              116 C |  DRV_LOOP.CMND_3 :              150 C |
 DRV_LOOP.CMND_5 :              18E C |  DRV_LOOP.CMND_6 :              1C7 C |
 DRV_LOOP.CMND_7 :              200 C |  DRV_LOOP.CMND_RDSLOT :         21E C |
 DRV_LOOP.DEL_ALL :             187 C |  DRV_LOOP.GETCBYTEL :            CD C |
 DRV_LOOP.GRAB_ARG :             CB C |  DRV_LOOP.LIST :                 EA C |
 DRV_LOOP.NEITHER :              A4 C |  DRV_LOOP.NEXT_CMD :             A8 C |
 DRV_LOOP.NOBEATS :              8B C |  DRV_LOOP.NOTICKS :              7E C |
 DRV_LOOP.NOT_PAL :             213 C |  DRV_LOOP.SRCH_DEL :            16E C |
 DRV_LOOP.SRCH_FVOL :           1AC C |  DRV_LOOP.SRCH_MODE :           136 C |
 DRV_LOOP.SRCH_SLOT :           230 C |  DRV_LOOP.SRCH_VOL :            1E5 C |
 DRV_LOOP.WRTTO_DEL :           17B C |  DRV_LOOP.WRTTO_FVOL :          1B9 C |
 DRV_LOOP.WRTTO_SLOT :          145 C |  DRV_LOOP.WRTTO_VOL :           1F2 C |
 DTBL_MULTI :                   815 C |  DTBL_SINGL :                   82B C |
*DTBL_SINGL.CHNL_ULNK :         EE5 C |  DTBL_SINGL.CHNL_ULNKCUT :      EE5 C |
 DTBL_SINGL.CHNL_ULNKOFF :      EE5 C |  DTBL_SINGL.COMN_PANLIST :      CB2 C |
 DTBL_SINGL.DAC_CUT :           B93 C |  DTBL_SINGL.DAC_OFF :           B99 C |
 DTBL_SINGL.DAC_PROC :          B9F C |  DTBL_SINGL.D_DOWN :            C36 C |
 DTBL_SINGL.D_DOWNHF :          C31 C |  DTBL_SINGL.D_UP :              C28 C |
*DTBL_SINGL.D_UPHF :            C25 C |  DTBL_SINGL.EFFC :              BEF C |
 DTBL_SINGL.EFFC_D :            C0A C |  DTBL_SINGL.EFFC_E :            C43 C |
 DTBL_SINGL.EFFC_F :            C52 C |  DTBL_SINGL.EFFC_X :            C63 C |
 DTBL_SINGL.FM_CINDX :          B63 C |  DTBL_SINGL.FM_CUT :            A78 C |
 DTBL_SINGL.FM_HASVOL :         EA2 C |  DTBL_SINGL.FM_KEYOFF :         A92 C |
 DTBL_SINGL.FM_OFF :            A72 C |  DTBL_SINGL.FM_SETFREQ :        A0E C |
 DTBL_SINGL.FM_SETRLIST :       DAB C |  DTBL_SINGL.FM_TLOFF :          A9A C |
 DTBL_SINGL.FND_OCT :           ED4 C |  DTBL_SINGL.FNOT_PAL :          999 C |
 DTBL_SINGL.GET_FMCACH :        B6B C |  DTBL_SINGL.GET_OCT :           ECA C |
 DTBL_SINGL.INST :              CE3 C |  DTBL_SINGL.INS_DAC :           DBF C |
 DTBL_SINGL.INS_FM :            D44 C |  DTBL_SINGL.INS_PCM :           E13 C |
 DTBL_SINGL.INS_PSG :           D0E C |  DTBL_SINGL.INS_PSGN :          D08 C |
 DTBL_SINGL.INS_PWM :           E50 C | *DTBL_SINGL.INVL_INS :          D07 C |
 DTBL_SINGL.KEEP_TLMX :         B58 C |  DTBL_SINGL.KYCUT_PSG :         93A C |
*DTBL_SINGL.KYCUT_PSGN :        937 C |  DTBL_SINGL.KYOFF_PSG :         92E C |
*DTBL_SINGL.KYOFF_PSGN :        92B C |  DTBL_SINGL.KYPSGN_HATOFF :     943 C |
 DTBL_SINGL.LINKED :            892 C |  DTBL_SINGL.MKFM_FREQ :         9D8 C |
 DTBL_SINGL.MKFM_PROC :         9D2 C |  DTBL_SINGL.MKFM_SET :          AB1 C |
 DTBL_SINGL.MK_DAC :            B7B C |  DTBL_SINGL.MK_FM :             99A C |
 DTBL_SINGL.MK_FM_SP :          A25 C |  DTBL_SINGL.MK_LIST :           8E0 C |
 DTBL_SINGL.MK_PCM :            BCF C |  DTBL_SINGL.MK_PSG :            8EE C |
 DTBL_SINGL.MK_PWM :            BD0 C |  DTBL_SINGL.NEW_ROMDAT :        D8A C |
*DTBL_SINGL.NOFM_NOTE :         A0D C |  DTBL_SINGL.NOTE :              E98 C |
 DTBL_SINGL.NOT_DAC :           9BA C |  DTBL_SINGL.NOT_DSPC :          9CF C |
 DTBL_SINGL.NOT_NS :            926 C |  DTBL_SINGL.NOT_PAL :           9F5 C |
 DTBL_SINGL.NO_LFO :            B46 C |  DTBL_SINGL.NO_REQ :            965 C |
 DTBL_SINGL.N_FM :              EC0 C | *DTBL_SINGL.N_INDX :            EB5 C |
*DTBL_SINGL.N_STFREQ :          EB6 C |  DTBL_SINGL.PAN_MCD :           C8F C |
 DTBL_SINGL.PCM_PANLIST :       CBA C |  DTBL_SINGL.PSGC_KEYON :        951 C |
 DTBL_SINGL.PSGC_PROC :         94A C |  DTBL_SINGL.PSG_GETFREQ :       986 C |
 DTBL_SINGL.PSG_KEYON :         96B C |  DTBL_SINGL.RCYL_COM :          888 C |
*DTBL_SINGL.READFREQ_PCM :      BD1 C | *DTBL_SINGL.READFREQ_PWM :      BD6 C |
 DTBL_SINGL.RESET_EFFC :        8D3 C |  DTBL_SINGL.RES_PAN :           C85 C |
 DTBL_SINGL.SAME_PATCH :        DBA C |  DTBL_SINGL.SETEFU_D :          C2A C |
 DTBL_SINGL.SETEF_D :           C3A C |  DTBL_SINGL.SETEF_MCD :         C3F C |
 DTBL_SINGL.SET_WAVFREQ :       BD9 C |  DTBL_SINGL.SILN_DAC :          88C C |
 DTBL_SINGL.SILN_FM :           88F C |  DTBL_SINGL.SILN_PCM :          86E C |
 DTBL_SINGL.SILN_PSG :          868 C |  DTBL_SINGL.SILN_PSG_N :        864 C |
 DTBL_SINGL.SILN_PWM :          87F C |  DTBL_SINGL.THIS_REGS :         A6A C |
 DTBL_SINGL.TL_DOWN :           AA6 C |  DTBL_SINGL.VMUCH :             980 C |
 DTBL_SINGL.VOLU :              CDA C |  DTBL_SINGL.WRITE_TL :          B51 C |
 DTBL_SINGL.WRT_EF :            C5D C |  DTBL_SINGL.WR_SPC :            A4D C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EFFV :                          34 - |
 EMU :                            0 - |  EXTINT_DEFAULT :              1962 C |
*EXT_3 :                          C - | *EXT_4 :                          E - |
 FALSE :                          0 - | *FEN :                            2 - |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
*FM :                            80 - |  FMCACH_1 :                    153F C |
 FMCACH_2 :                    1567 C |  FMCACH_3 :                    158F C |
 FMCACH_4 :                    15B7 C |  FMCACH_5 :                    15DF C |
 FMCACH_6 :                    1607 C |  FMCACH_LIST :                 1780 C |
 FMFREQ_LIST :                 12F1 C | *FMINS_BASS_BIG_110 :          5925 C |
*FMINS_BASS_BIG_114 :          5945 C | *FMINS_BASS_BIG_122 :          5965 C |
*FMINS_BASS_BIG_81 :           5905 C | *FMINS_BASS_CAVE_47 :          5985 C |
*FMINS_BASS_CLUB :             61C5 C | *FMINS_BASS_CLUB_108 :         59A5 C |
*FMINS_BASS_DUCK :             6165 C | *FMINS_BASS_FOOT_75 :          59C5 C |
*FMINS_BASS_GEM_26 :           59E5 C | *FMINS_BASS_GROOVE_1 :         5AA5 C |
*FMINS_BASS_GROOVE_119 :       5A05 C | *FMINS_BASS_GROOVE_2 :         61E5 C |
*FMINS_BASS_HEAVY_107 :        5A25 C | *FMINS_BASS_HEAVY_118 :        5A45 C |
*FMINS_BASS_LOUD_117 :         5A65 C | *FMINS_BASS_LOW81 :            5D85 C |
*FMINS_BASS_LOW_103 :          5AE5 C | *FMINS_BASS_LOW_106 :          5B05 C |
*FMINS_BASS_LOW_126 :          5B25 C | *FMINS_BASS_LOW_46 :           5A85 C |
*FMINS_BASS_LOW_81 :           5AC5 C | *FMINS_BASS_MID_111 :          5B85 C |
*FMINS_BASS_MID_19 :           5B45 C | *FMINS_BASS_MID_80 :           5B65 C |
*FMINS_BASS_POWER_123 :        5BA5 C | *FMINS_BASS_SILENT_53 :        5BC5 C |
*FMINS_BASS_SLAP_10 :          5BE5 C | *FMINS_BASS_SLAP_105 :         5C05 C |
*FMINS_BASS_SYNTH_60 :         5C25 C | *FMINS_BASS_SYNTH_61 :         5C45 C |
*FMINS_BASS_SYNTH_72 :         5C65 C | *FMINS_BASS_SYNTH_73 :         5C85 C |
*FMINS_BASS_VLOW_74 :          5CA5 C | *FMINS_BELL_MID36 :            5E25 C |
*FMINS_BRASS_7 :               6225 C | *FMINS_CLOSEDHAT :             6185 C |
*FMINS_DRUMS_KICK1 :           60E5 C | *FMINS_DRUM_KICK :             5E45 C |
*FMINS_FLAUTE_1 :              5CE5 C | *FMINS_FLAUTE_2 :              5D05 C |
*FMINS_HATS_1 :                5E05 C | *FMINS_HBEAT_TOM :             6125 C |
*FMINS_ORGAN_DRAWBAR :         5CC5 C | *FMINS_PIANO_AQUA :            6105 C |
*FMINS_PSYNTH_PLUS :           6205 C | *FMINS_SFX_ALIEN1 :            602D C |
*FMINS_SFX_ALIEN2 :            604D C | *FMINS_SFX_PUNCH :             5FED C |
*FMINS_SFX_SLASH :             600D C | *FMINS_SP_CLOSEDHAT :          6095 C |
*FMINS_SP_COWBELL :            60BD C |  FMINS_SP_OPENHAT :            606D C |
*FMINS_TICK :                  5E65 C | *FMINS_TRUMPET_1 :             6145 C |
 FMINS_TRUMPET_BUS :           5DE5 C | *FMINS_TRUMPET_CARNIVAL :      61A5 C |
*FMINS_TRUMPET_GENIE :         5DC5 C | *FMINS_TRUMPET_LOW :           5DA5 C |
*FMINS_VIBRAPHONE_1 :          5D25 C | *FMINS_VIBRAPHONE_2 :          5D45 C |
*FMINS_XYLOPHONE :             5D65 C |  FMLIST_RSAVE :                162F C |
 FMSPECIAL :                   1CF7 C | *FMSPINS_CLACK_1 :             5E85 C |
*FMSPINS_COWBELL_H :           5EAD C | *FMSPINS_COWBELL_L :           5ED5 C |
*FMSPINS_HATS_HQ :             5EFD C | *FMSPINS_SFX_ALIEN :           5F25 C |
*FMSPINS_SFX_KNCKBUZZ :        5F4D C | *FMSPINS_SFX_KNOCK_H :         5F75 C |
*FMSPINS_SFX_KNOCK_L :         5F9D C | *FMSPINS_SFX_LASER :           5FC5 C |
 FM_AUTOREG :                  11A9 C |  FM_SEND_1 :                   11AD C |
 FM_SEND_2 :                   11B8 C | *FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :                 410 C |  GEMADMARESUME :                42E C |
*GEMAFADESEQ :                  4E4 C |  GEMAINIT :                     29E C |
 GEMAINIT.CLEANUP :             2CA C |  GEMAINIT.COPY :                2DA C |
 GEMAINIT.NOT_PAL :             300 C |  GEMAINIT.WAIT :                2B2 C |
 GEMAMSTRLISTPOS :               1C C |  GEMAPLAYSEQ :                  46C C |
*GEMAPLAYSEQAUTO :              48A C |  GEMARESET :                    314 C |
 GEMASETBEATS :                 51C C |  GEMASETMASTERLIST :            45A C |
*GEMASETSEQVOL :                500 C |  GEMASTOPALL :                  4C8 C |
 GEMASTOPSEQ :                  4AC C | *GEMATEST :                     44C C |
 GEMAUPDATE :                   324 C |  GEMAUPDATE.COPY_BYTES :        362 C |
 GEMAUPDATE.NO_SIZE :           370 C |  GEMAUPDATE.NO_TASK :           376 C |
 GEMA_INIT :                    EF6 C |  GEMA_INIT.END_SETUP :          F37 C |
 GEMA_INIT.SETUP_LIST :         F0C C |  GEMA_INIT.ST_COPY :            F2B C |
 GEMA_LASTBANK :               12E7 C |  GEMA_LASTBANK.WRITE :         12EC C |
 GET_TICK :                     F68 C |  GET_TICK.CTNOTICK :            F85 C |
 GLBL_LASTORG :    FFFFFFFFFFFFB800 - |  GLBL_LASTPC :                 3E64 - |
*GLBL_MDATA_RP :               C6EA - |  GLBL_MDATA_ST :               46DC - |
 GTRK_TEST0 :                  46E4 C |  GTRK_TEST0.BLK :              46F2 C |
 GTRK_TEST0.INS :              48C1 C |  GTRK_TEST0.PAT :              46FA C |
 GTRK_TEST1 :                  48F9 C |  GTRK_TEST1.BLK :              4907 C |
 GTRK_TEST1.INS :              589D C |  GTRK_TEST1.PAT :              492C C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - |  HEADEROUT :                   1F69 C |
 HEADEROUT_E :                 1F77 C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :                1960 C |
*HIRQ_ON :                        4 - |  HTAG_CDSAVE :        "NIKONACD___" - |
*HTAG_CDVER :                   102 - |  HTAG_DATEINFO : "(C)???? 2024.???" - |
*HTAG_DISCID :        "NIKONACD   " - | *HTAG_DISCID_M :      "NIKONACD32X" - |
*HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "GEMA Sound Driver SUPER32X                      " - |
*HTAG_NDM_MARSCD :       "GEMA Sound Driver CD32X                         " - |
*HTAG_NDM_MCD :          "GEMA Sound Driver MCD                           " - |
 HTAG_NDM_MD :           "GEMA Sound Driver MD                            " - |
*HTAG_NDM_PICO :         "GEMA Sound Driver PICO                          " - |
*HTAG_NOV_MARS :         "GEMA Sound Driver 32X                           " - |
*HTAG_NOV_MARSCD :       "GEMA Sound Driver CD32X                         " - |
*HTAG_NOV_MCD :          "GEMA Sound Driver SCD                           " - |
 HTAG_NOV_MD :           "GEMA Sound Driver GENESIS                       " - |
*HTAG_NOV_PICO :         "GEMA Sound Driver PICO                          " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
*HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
*HTAG_SYS_MCD :  "SEGA GENESIS    " - |  HTAG_SYS_MD :   "SEGA GENESIS    " - |
*HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1F7F C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
 JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
 JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
 JOYUP :                          1 - |  JOYX :                         400 - |
 JOYY :                         200 - |  JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - | *MACEXP :                         7 - |
 MAINGEMASEQLIST :             46DC C | *MAP_SISI :                   10CDE C |
 MARS :                           0 - |  MARSBLOCK :                     37 C |
 MARSCD :                         0 - |  MARSUPD :                     1786 C |
*MARS_RAMCODE :                3E64 C | *MARS_RAMCODE_E :              3E64 C |
 MAX_BUFFNTRY :                   8 - |  MAX_GLOBALS :                  800 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDMAPSPR :                  18 - |
 MAX_MDOBJ :                     28 - |  MAX_PALFDREQ :                   8 - |
 MAX_RCACH :                     20 - |  MAX_SCRNBUFF :                1000 - |
 MAX_SLOTS :                      3 - | *MAX_SNDPICK :                    7 - |
*MAX_STACKSIZE :                200 - |  MAX_SYSCODE :                 2C00 - |
 MAX_TBLSIZE :                   12 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8400 - |  MAX_ZCMND :                     20 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1787 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DCOMM_M :                   10 - |
*MCD_DCOMM_S :                   20 - | *MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MEMORY :                     3 - |
*MDSTMP_BUFFINCR :               1A - | *MDSTMP_CELLSTORAGE :            12 - |
*MDSTMP_CURROUTFLIP :             E - | *MDSTMP_DOTINCR :                16 - |
*MDSTMP_FDROP :                  10 - | *MDSTMP_FLAGS :                   0 - |
*MDSTMP_LEN :                    1E - | *MDSTMP_STMPOUTB :                C - |
*MDSTMP_VRAMINCR :                A - | *MDSTMP_VRAMLEN :                 8 - |
*MDSTMP_VRAMMAIN :                2 - | *MDSTMP_VRAMSEC :                 4 - |
*MDSTMP_VRAMSIZE :                6 - |  MD_BANK_SRAM :              A130F1 - |
 MD_ENTRY :                     202 C |  MD_ENTRY.LOOP_RAM :            236 C |
 MD_ENTRY.OLD_MD :              21C C |  MD_ENTRY.PALCLEAR :            260 C |
 MD_ENTRY.WAIT :                27E C |  MD_ENTRY.WAIT_DMA :            242 C |
 MD_ERRADDR :                   200 C |  MD_ERRBUS :                    200 C |
 MD_ERRCHK :                    200 C |  MD_ERRILL :                    200 C |
 MD_ERROREX :                   200 C |  MD_ERRORTRAP :                 200 C |
 MD_ERRPRIVL :                  200 C |  MD_ERRTRAPV :                  200 C |
 MD_ERRZDIV :                   200 C |  MD_LINE1010 :                  200 C |
 MD_LINE1111 :                  200 C |  MD_READMODES :                1EB0 C |
 MD_READMODES.PICK_MODE :      1ECC C |  MD_SCREEN00 :                 3E64 C |
*MD_SCREEN00_E :               46DC C | *MD_SYSCODE_E :                1EDC C |
 MD_TRACE :                     200 C |  MODE :                          18 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 - |
 MOUSE_Y :                        A - |  MVOL :                          30 - |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             178E C |
*NIKONA_BUFFLIST_E :           17A6 C |  OBJECT_ANIMATE :              1D26 C |
 OBJECT_ANIMATE.EXIT_ANIM :    1DB4 C |  OBJECT_ANIMATE.GOTOFRAME :    1DA6 C |
 OBJECT_ANIMATE.KEEPSPD :      1D6C C |  OBJECT_ANIMATE.LASTFRAME :    1DB0 C |
 OBJECT_ANIMATE.NOANIM :       1D98 C |  OBJECT_ANIMATE.RETURN :       1D96 C |
 OBJECT_ANIMATE.SAMETHING :    1D44 C |  OBJECT_INIT :                 1C42 C |
 OBJECT_INIT.CLR :             1C4A C |  OBJECT_MAKE :                 1C84 C |
 OBJECT_MAKE.SEARCH :          1C92 C | *OBJECT_MDMARS_GETSPRINFO :    1EAE C |
 OBJECT_RESETANIM :            1CEE C | *OBJECT_RESETVARS :            1CD4 C |
 OBJECT_RESETVARS.CLR_RAM :    1CE2 C |  OBJECT_RUN :                  1C52 C |
 OBJECT_RUN.NEXT_ONE :         1C5A C |  OBJECT_RUN.NO_CODE :          1C66 C |
*OBJECT_SET :                  1C70 C | *OBJECT_SPEED :                1CF6 C |
*OBJECT_TOUCH :                1DBA C |  OBJECT_TOUCH.CHECK_THIS :     1DF0 C |
 OBJECT_TOUCH.EXIT_THIS :      1DEA C |  OBJECT_TOUCH.NEXT :           1DD2 C |
 OBJECT_TOUCH.NOT_YTOP :       1EAC C |  OBJECT_TOUCH.SET_OK :         1EAA C |
 OBJECT_TOUCH.SKIP :           1DE0 C |  OBJMAP_DODO :                10D42 C |
 OBJMAP_FIFI :                10D8A C |  OBJMAP_MIMI :                10D66 C |
 OBJPAL_DODO :                10D22 C |  OBJSET_ERROR :                1CA6 C |
 OBJSET_GO :                   1CB0 C |  OBJSET_GO.CLR :               1CC4 C |
 OBJSET_GO.EXIT_THIS :         1CCA C |  OBJSET_GO.FROM_DEL :          1CBE C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
*OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ON_HOLD :                        2 - |
 ON_PRESS :                       4 - |  ON_RELEASE :                     6 - |
*PACKING :                        0 - | *PADDING :                        0 - |
 PAD_ID :                         0 - |  PAD_VER :                        1 - |
 PALFD_DELAY :                    1 - |  PALFD_INCR :                     3 - |
 PALFD_LEN :                      8 - |  PALFD_NUM :                      6 - |
 PALFD_REQ :                      0 - |  PALFD_START :                    2 - |
*PALFD_TARGET :                   4 - |  PALFD_TIMER :                    5 - |
 PALMODE :                       3E C | *PAL_SISI :                   10CBE C |
 PCMCOM :                      148B C | *PEN :                           20 - |
 PICO :                           0 - | *PROC_CHIPS :                   632 C |
 PSGCOM :                      1503 C |  PSGFREQ_LIST :                1309 C |
 PSGHATMODE :                  1CF6 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PWMCOM :                      14CB C |
*PWMCTL :                        31 - | *PWMINTCLR :                     1C - |
*PWMIRQ_ON :                      1 - |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFE98C C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFD7DC C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFE986 C |  RAM_HORSCROLL :   FFFFFFFFFFFFCC40 C |
 RAM_INDXPALFADE : FFFFFFFFFFFFD7E0 C |  RAM_INPUTDATA :   FFFFFFFFFFFFD8F8 C |
*RAM_MCDEXIT :     FFFFFFFFFFFFE998 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFD7F8 C |  RAM_MDVIDCLR_E :  FFFFFFFFFFFFD658 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFC800 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJECTS :     FFFFFFFFFFFFD938 C |  RAM_PALETTE :     FFFFFFFFFFFFD550 C |
 RAM_PALETTEFADE : FFFFFFFFFFFFD5D0 C |  RAM_PALFADELIST : FFFFFFFFFFFFC800 C |
 RAM_SAVEDATA :    FFFFFFFFFFFFD7F8 C |  RAM_SAVEENABLE :  FFFFFFFFFFFFE992 C |
*RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFD7FC C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFD7F8 C |  RAM_SCREENMODE :  FFFFFFFFFFFFE994 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFE996 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SOUNDBUFF :           FFFFFF00 - |
 RAM_SPRITES :     FFFFFFFFFFFFD050 C |  RAM_SPRLINKNUM :  FFFFFFFFFFFFD7E2 C |
 RAM_SPRMAPLIST :  FFFFFFFFFFFFC840 C |  RAM_SPROFFSETX :  FFFFFFFFFFFFD654 C |
 RAM_SPROFFSETY :  FFFFFFFFFFFFD656 C |  RAM_SPRPZLIST :   FFFFFFFFFFFFC9C0 C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDOM :   FFFFFFFFFFFFE97C C |
*RAM_SYSRANDVAL :  FFFFFFFFFFFFE978 C | *RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
*RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFE980 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFD650 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFD65C C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFD652 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFD7EE C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFD7F0 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFD7F2 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFD7F4 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFD7F6 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFD7E6 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFD7E4 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFD7EC C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFD7EA C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFD7E8 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFD000 C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
*RCHWIDTH :                      36 - |  READROM :                      F89 C |
 READROM.DOUBLE :               FAC C |  READROM.FROM_RAM :             FD0 C |
 READROM.TRANSFER :             FF0 C |  READROM.WAIT :                 FE7 C |
 READROM.X68KLAST :            1029 C |  READROM.X68KLOOP :            1015 C |
 READROM.X68KLPWT :            1037 C |  READROM.X68KNOCARRY :          FCA C |
*RELAXED :                        0 - | *RES :                            2 - |
 ROM_END :                    10DC8 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1F79 C |  SBEATACC :                    1CFC C |
 SBEATPTCK :                   1CFE C |  SET_CHIPS :                    616 C |
*SET_DEBUGMODE :                  0 - | *SET_DEFAUTODMA :               480 - |
 SET_INITMODE :                   0 - |  SET_NULLVRAM :                 7FE - |
 SET_RAMLIMIT :              FFFC00 - |  SET_SNDVIEWY :                  16 - |
 SET_SRAMSIZE :                 100 - | *SET_WRAMSIZE :               3C000 - |
*SHIFT :                          2 - |  SIZEOF_INPUT :                  10 - |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFE99A C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFE99A C |  SIZEOF_MDVID :    FFFFFFFFFFFFD7F8 C |
*SIZEOF_SAVEINFO : FFFFFFFFFFFFD800 C |  SLV :                           10 - |
 SNDLOCKZ80 :                   378 C |  SNDLOCKZ80.WAIT :              380 C |
 SNDREQ_ENTER :                 396 C |  SNDREQ_ENTER.WAIT :            3BC C |
 SNDREQ_EXIT :                  3CC C | *SNDREQ_SADDR :                 3FA C |
 SNDREQ_SBYTE :                 402 C |  SNDREQ_SCMD :                  3E8 C |
 SNDREQ_SLONG :                 3F6 C |  SNDREQ_SWORD :                 3FE C |
 SNDUNLOCKZ80 :                 38C C |  SOUND_INIT :                  16C4 C |
 SOUND_UPDATE :                16C0 C |  STANDBY :                        3 - |
 SYSBCD_SPOUT :                1B66 C | *SYSMARS_FRAMEBUFFER :       840000 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_OVERWRITE :         860000 - |
 SYSMARS_REG :               A15100 - | *SYSMARS_SVDP :              A15180 - |
 SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :            1C22 C |  SYSRND_MKVALUE :              197E C |
 SYSRND_MKVALUE.HAS_SEED :     1990 C | *SYSTEM_BCD_ADDB :             1B3E C |
 SYSTEM_BCD_ADDL :             1B4C C | *SYSTEM_BCD_ADDW :             1B46 C |
*SYSTEM_BCD_SUBB :             1B16 C |  SYSTEM_BCD_SUBL :             1B24 C |
*SYSTEM_BCD_SUBW :             1B1E C |  SYSTEM_DEFAULT :              193E C |
 SYSTEM_DEFAULT.CLR_LOOP :     194C C | *SYSTEM_DICEROLL :             19C8 C |
*SYSTEM_DICEROLL_SEED :        19A8 C |  SYSTEM_DMAENTER_RAM :         16B8 C |
 SYSTEM_DMAENTER_ROM :         167E C |  SYSTEM_DMAEXIT_RAM :          16BC C |
 SYSTEM_DMAEXIT_ROM :          1682 C |  SYSTEM_INIT :                 15D6 C |
 SYSTEM_INIT.CLRINPUT :        1638 C |  SYSTEM_INIT.WAIT :            15E2 C |
 SYSTEM_INPUT :                16C8 C |  SYSTEM_INPUT.EXIT :           16F4 C |
 SYSTEM_INPUT.ID_03 :          174A C |  SYSTEM_INPUT.ID_0D :          17F4 C |
 SYSTEM_INPUT.INVALID :        17EE C |  SYSTEM_INPUT.LIST :           172A C |
 SYSTEM_INPUT.OLDPAD :         187A C |  SYSTEM_INPUT.PICK_ID :        16FA C |
 SYSTEM_INPUT.READ :           1710 C |  SYSTEM_INPUT.STEP_1 :         171C C |
 SYSTEM_INPUT.STEP_2 :         1728 C |  SYSTEM_INPUT.THIS_ONE :       16DC C |
 SYSTEM_INPUT.X_NEG :          17BC C |  SYSTEM_INPUT.Y_NEG :          17E8 C |
*SYSTEM_MDMARS_SENDDATA :      1C3C C | *SYSTEM_MDMCD_CDDAFADE :       1C2A C |
*SYSTEM_MDMCD_CDDAPLAY :       1C10 C | *SYSTEM_MDMCD_CDDAPLAYL :      1C1A C |
*SYSTEM_MDMCD_CDDASTOP :       1C28 C | *SYSTEM_MDMCD_CHECKHOME :      1BDE C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                                    1C04 C |
*SYSTEM_MDMCD_CHECKWRAM :      1BB8 C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                                       1BC8 C |
*SYSTEM_MDMCD_EXITSHELL :      1C0E C |  SYSTEM_MDMCD_GIVEWRAM :       1BCE C |
*SYSTEM_MDMCD_INTERRUPT :      1B98 C | *SYSTEM_MDMCD_RDFILE_RAM :     1BDA C |
*SYSTEM_MDMCD_RDFILE_WRAM :    1BDC C | *SYSTEM_MDMCD_SUBENTER :       1BA8 C |
*SYSTEM_MDMCD_SUBTASK :        1BAA C | *SYSTEM_MDMCD_SUBWAIT :        1BA6 C |
 SYSTEM_MDMCD_WAITWRAM :       1BAC C |  SYSTEM_RANDOM :               196E C |
 SYSTEM_RANDOM_SEED :          1964 C |  SYSTEM_RENDER :               1644 C |
 SYSTEM_RENDER.FORGOT_DISP :   1668 C | *SYSTEM_RENDER.FROM_LATE :     1662 C |
 SYSTEM_RENDER.WAIT_EARLY :    1652 C |  SYSTEM_RENDER.WAIT_VBLANK :   166A C |
 SYSTEM_SETDATABANK :          1C40 C |  SYSTEM_SETINTJUMPS :          1B7E C |
 SYSTEM_SETINTJUMPS.NO_EXINT : 1B96 C |  SYSTEM_SETINTJUMPS.NO_HINT :  1B8E C |
 SYSTEM_SETINTJUMPS.NO_VINT :  1B86 C |  SYSTEM_SINEWAVE :             19EC C |
 SYSTEM_SINEWAVE_COS :         19E2 C | *SYSTEM_SRAMINIT :             1880 C |
*SYSTEM_SRAMINIT.ALREADY_SET : 18BC C |  SYSTEM_SRAMINIT.CANT_USE :    18BA C |
 SYSTEM_SRAMINIT.CLR_SRAM :    18A6 C |  SYSTEM_SRAMLOAD :             18FC C |
 SYSTEM_SRAMLOAD.CANT_USE_C :  193C C | *SYSTEM_SRAMLOAD.DONT_RESET :  192E C |
 SYSTEM_SRAMLOAD.LOAD :        1922 C |  SYSTEM_SRAMSAVE :             18BE C |
 SYSTEM_SRAMSAVE.CANT_USE_C :  18FA C |  SYSTEM_SRAMSAVE.SAVE :        18E0 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
 SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :              1684 C |
 SYS_MARSSLVCMD.WAIT_EXIT :    16AA C |  SYS_SINEWAVE :                19F0 C |
 SYS_SINEWAVE.LOC_7EFA :       19FE C |  SYS_SINEWAVE.LOC_7F0C :       1A10 C |
 SYS_SINEWAVE.SINE_DATA :      1A16 C | *SYS_SRAM :                  200000 - |
 SYS_TMSS :                  A14000 - |  TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 65D C |  TBLBUFF_READ.DONT_RES :        722 C |
 TBLBUFF_READ.DO_CHIP :         6BD C |  TBLBUFF_READ.GRAB_LINK :       706 C |
 TBLBUFF_READ.HAS_INDX :        699 C |  TBLBUFF_READ.INVLDL :          74A C |
 TBLBUFF_READ.L_HIPRIO :        7D6 C |  TBLBUFF_READ.NEW_CHIP :        787 C |
 TBLBUFF_READ.NEW_LINK :        7D3 C |  TBLBUFF_READ.NEW_LINK_O :      7CB C |
 TBLBUFF_READ.NEW_LINK_Z :      7C7 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7C0 C |
 TBLBUFF_READ.NEXT_INDX :       68C C |  TBLBUFF_READ.NEXT_PRIO :       7A9 C |
 TBLBUFF_READ.NO_INDX :         6B5 C |  TBLBUFF_READ.PASS_2 :          7A8 C |
 TBLBUFF_READ.PICK_TBL :        7F9 C |  TBLBUFF_READ.REFILL :          783 C |
 TBLBUFF_READ.REROLL :          760 C |  TBLBUFF_READ.RNOT_PSG :        785 C |
 TBLBUFF_READ.SAME_LINK :       725 C |  TBLBUFF_READ.SET_ASFULL :      7F6 C |
 TBLBUFF_READ.SINGL_FREE :      7E4 C |  TBLBUFF_READ.SINGL_LINK :      752 C |
 TBLBUFF_READ.SRCH_FREE :       798 C |  TBLBUFF_READ.SRCH_LINK :       731 C |
 TBLBUFF_READ.SRCH_LLOOP :      73B C |  TBLBUFF_READ.TRACK_CONT :      675 C |
 TBLBUFF_READ.VALID :           68A C |  TBLFM :                       1BA0 C |
 TBLFM3 :                      1BE8 C |  TBLFM6 :                      1BFA C |
 TBLLIST :                     1B00 C |  TBLPCM :                      1B0E C |
 TBLPSG :                      1C0E C |  TBLPSGN :                     1C46 C |
 TBLPWM :                      1C58 C |  TBLZ_CLEAR :                   EEC C |
 TH :                      20000000 - |  TICKCNT :                     1CFA C |
 TICKFLAG :                    1CF9 C |  TICKSPSET :                   1CF8 C |
*TIME :               "07:15:31 PM" - | *TIMERCTL :                      30 - |
 TRACK_OUT :                    5D1 C |  TRACK_OUT.INDX_DEL :           5DF C |
 TRACK_OUT.NOTHIN :             60D C |  TRKBLKS_0 :                   16AB C |
 TRKBLKS_1 :                   16B3 C |  TRKBLKS_2 :                   16BB C |
 TRKBUFF_0 :                   16C3 C |  TRKBUFF_1 :                   1702 C |
 TRKBUFF_2 :                   1741 C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   164B C |
 TRKHDRS_1 :                   166B C |  TRKHDRS_2 :                   168B C |
 TRKINFOCACH :                 163B C |  TRK_BANKBLK :                   16 - |
 TRK_BANKHEADS :                 15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   25 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   17 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   22 - |  TRK_ROMINST :                   1F - |
 TRK_ROMPATT :                   1C - |  TRK_ROMPATTREAD :               19 - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               18 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    243 C |
 UPD_TRACK.CHNL_FREE :          34E C |  UPD_TRACK.CONT_CHNL :          359 C |
 UPD_TRACK.DECROW :             2FD C |  UPD_TRACK.DECROW_E :           300 C |
 UPD_TRACK.EFFECT_FILL :        525 C |  UPD_TRACK.EFF_A :              3D3 C |
 UPD_TRACK.EFF_B :              3E4 C |  UPD_TRACK.EFF_C :              402 C |
 UPD_TRACK.EXIT :               2F1 C |  UPD_TRACK.FADE_OUT :           27E C |
 UPD_TRACK.FIRST_BLK :          459 C |  UPD_TRACK.FIRST_FILL :         52C C |
 UPD_TRACK.FIRST_HEAD :         4A1 C |  UPD_TRACK.GRAB_RHEAD :         5BE C |
 UPD_TRACK.HAS_NOTE :           308 C |  UPD_TRACK.INC_CPATT :          405 C |
 UPD_TRACK.KEEP_BLK :           477 C |  UPD_TRACK.KEEP_IT :            4C7 C |
 UPD_TRACK.KEEP_VOL :           294 C |  UPD_TRACK.NEXT_CHNL :          333 C |
 UPD_TRACK.NEXT_NOTE :          2E1 C |  UPD_TRACK.NO_EFF :             39F C |
 UPD_TRACK.NO_GLBL :            56C C |  UPD_TRACK.NO_INS :             381 C |
 UPD_TRACK.NO_NOTE :            376 C |  UPD_TRACK.NO_VOL :             38C C |
 UPD_TRACK.OLD_TYPE :           36A C |  UPD_TRACK.RAN_OUT :            413 C |
 UPD_TRACK.READ_TRACK :         25A C |  UPD_TRACK.ROW_ACTIVE :         2DA C |
 UPD_TRACK.SET_TRACK :          43D C |  UPD_TRACK.SFXMD :              29E C |
 UPD_TRACK.SRCH_NEW :           32E C |  UPD_TRACK.TOO_MUCH :           28A C |
 UPD_TRACK.TRACK_END :          516 C | *VBLK :                          80 - |
*VDPATTR_HI :                  8000 - | *VDPATTR_PL1 :                 2000 - |
*VDPATTR_PL2 :                 4000 - | *VDPATTR_PL3 :                 6000 - |
*VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
 VIDEO_BUILDSPRITES :           6FC C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                                        8BC C |
 VIDEO_BUILDSPRITES.CHK_SPR_R : 89A C |  VIDEO_BUILDSPRITES.DONT_ADD :  86E C |
 VIDEO_BUILDSPRITES.EX_VRAM :   7B2 C |  VIDEO_BUILDSPRITES.EX_VRAMS :  7D6 C |
 VIDEO_BUILDSPRITES.EX_YEXT :   842 C |  VIDEO_BUILDSPRITES.FIRST_SPR : 71C C |
*VIDEO_BUILDSPRITES.FREEZE :    892 C |  VIDEO_BUILDSPRITES.MK_PZ :     788 C |
 VIDEO_BUILDSPRITES.NEXT :      764 C |  VIDEO_BUILDSPRITES.NEXT_PZ :   724 C |
 VIDEO_BUILDSPRITES.NO_MAP :    882 C |  VIDEO_BUILDSPRITES.NO_PZ :     87E C |
*VIDEO_BUILDSPRITES.NO_SLOT :   888 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                                        8D0 C |
 VIDEO_BUILDSPRITES.NO_SLOT_R : 8AE C |  VIDEO_BUILDSPRITES.NO_SLOT_S : 754 C |
 VIDEO_BUILDSPRITES.STOP_ALL :  88C C |  VIDEO_BUILDSPRITES.VRAM_H :    806 C |
 VIDEO_BUILDSPRITES.VRAM_V :    7EE C |  VIDEO_CLEAR :                  90A C |
 VIDEO_CLEAR.CLR_ME :           914 C | *VIDEO_CLEARSCREEN :            92A C |
 VIDEO_CLEARSCREEN.NOT_SMALL :  950 C | *VIDEO_COPY :                   C76 C |
 VIDEO_COPY.DMAW :              C80 C |  VIDEO_COPY.DMA_W :             CDC C |
 VIDEO_DEFAULT :                5BE C |  VIDEO_DISPLAYOFF :             964 C |
 VIDEO_DISPLAYON :              958 C |  VIDEO_DMAOFF :                 97C C |
 VIDEO_DMAON :                  970 C |  VIDEO_FADEIN_FULL :           10AC C |
 VIDEO_FADEOUT_FULL :          10BE C |  VIDEO_FADEPAL :               1110 C |
*VIDEO_FADEPAL_LIST :          1166 C |  VIDEO_FADEPAL_LIST.INVALID :  1180 C |
 VIDEO_FADEPAL_LIST.NEXT_ONE : 1174 C |  VIDEO_FILL :                   BFE C |
 VIDEO_INIT :                   532 C |  VIDEO_INIT.CLR_D :             568 C |
 VIDEO_INIT.CLR_PREQ :          580 C |  VIDEO_INIT.CLR_RAM :           53C C |
 VIDEO_INIT.COPY_DMA :          54E C |  VIDEO_INIT.DEF_REGSET :        5B6 C |
 VIDEO_INIT.DMA_ENTRY :         5A6 C | *VIDEO_INTENABLE :              994 C |
 VIDEO_LOADART :                AEC C |  VIDEO_LOADART.BAD_SIZE :       B86 C |
 VIDEO_LOADART.LAST_SET :       B3C C |  VIDEO_LOADART.MK_SET :         B44 C |
 VIDEO_LOADART.NORMAL :         B36 C |  VIDEO_LOADART.RAM_WRITE :      B88 C |
 VIDEO_LOADART.SHARED_SETUP :   B9C C |  VIDEO_LOADART_LIST :           BDE C |
 VIDEO_LOADART_LIST.INVALID :   BF8 C |  VIDEO_LOADART_LIST.NEXT_ONE :  BEA C |
*VIDEO_LOADMAP :                DB8 C |  VIDEO_LOADMAP.BAD_SIZE :       E28 C |
 VIDEO_LOADMAP.MK_CELL :        E18 C |  VIDEO_LOADMAP.NON_BLANK :      E16 C |
 VIDEO_LOADMAP.X_LOOP :         E06 C |  VIDEO_LOADMAP.Y_LOOP :         DF2 C |
*VIDEO_LOADMAPV :               E2E C |  VIDEO_LOADMAPV.BAD_SIZE :      EB0 C |
 VIDEO_LOADMAPV.BAD_SIZE_D :    F18 C |  VIDEO_LOADMAPV.DBLE_MODE :     EB6 C |
 VIDEO_LOADMAPV.MK_CELL :       E9A C |  VIDEO_LOADMAPV.MK_CELL_D :     F02 C |
 VIDEO_LOADMAPV.NON_BLANK :     E98 C |  VIDEO_LOADMAPV.NON_BLANK_D :   EFA C |
 VIDEO_LOADMAPV.X_LOOP :        E72 C |  VIDEO_LOADMAPV.X_LOOP_D :      ED0 C |
 VIDEO_LOADMAPV.Y_LOOP :        E78 C |  VIDEO_LOADMAPV.Y_LOOP_D :      ED6 C |
 VIDEO_LOADPAL :               111A C | *VIDEO_LOADPAL_LIST :          1146 C |
 VIDEO_LOADPAL_LIST.INVALID :  1160 C |  VIDEO_LOADPAL_LIST.NEXT_ONE : 1154 C |
 VIDEO_MAKEDMAENTRY :           CF2 C |  VIDEO_MAKEDMAENTRY.LAST_SET :  D42 C |
 VIDEO_MAKEDMAENTRY.MK_SET :    D4A C |  VIDEO_MAKEDMAENTRY.NORMAL :    D3C C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :   DB6 C |  VIDEO_MAKEFADE :              10D2 C |
*VIDEO_MAKESPR :               147C C |  VIDEO_MAKESPR.CHK_FREE :      1488 C |
 VIDEO_MAKESPR.MK_SPR :        149A C |  VIDEO_MAKESPRMAP :            152C C |
 VIDEO_MAKESPRMAP.CHK_FREE :   1538 C |  VIDEO_MAKESPRMAP.MK_SPR :     1548 C |
*VIDEO_MAKESPRMAP_DMA :        1514 C | *VIDEO_MDMARS_MAKEFADE :       10D0 C |
 VIDEO_PRINT :                 11B4 C |  VIDEO_PRINT.EXIT :            1220 C |
 VIDEO_PRINT.HEX_INCR :        1294 C |  VIDEO_PRINT.LOOP :            11E8 C |
 VIDEO_PRINT.MK_VALUE :        1270 C |  VIDEO_PRINT.NEXT :            121A C |
 VIDEO_PRINT.Q_LOOP :          11FE C |  VIDEO_PRINT.SHOW_24 :         1264 C |
*VIDEO_PRINT.SHOW_BYTE :       1254 C |  VIDEO_PRINT.SHOW_LONG :       126C C |
 VIDEO_PRINT.SHOW_NIBBL :      1284 C |  VIDEO_PRINT.SHOW_WORD :       125C C |
 VIDEO_PRINT.SPECIAL :         1226 C | *VIDEO_PRINTDEFPAL :           119E C |
*VIDEO_PRINTDEFPAL_FADE :      1196 C |  VIDEO_PRINTINIT :             118C C |
 VIDEO_PRINTINITW :            1186 C |  VIDEO_PRINTW :                12A6 C |
 VIDEO_PRINTW.EXIT :           137A C |  VIDEO_PRINTW.GET_PREVAL :     145E C |
 VIDEO_PRINTW.HEX_INCR :       146C C |  VIDEO_PRINTW.LOOP :           12FA C |
 VIDEO_PRINTW.MK_VALUE :       13CE C |  VIDEO_PRINTW.MK_VALUE_IN :    13CA C |
 VIDEO_PRINTW.NEXT :           1372 C |  VIDEO_PRINTW.NIBBL_CONT :     1456 C |
 VIDEO_PRINTW.NIBBL_NORM :     1420 C |  VIDEO_PRINTW.NO_DBLE_Y :      12CE C |
 VIDEO_PRINTW.SHOW_24 :        13BE C | *VIDEO_PRINTW.SHOW_BYTE :      13AE C |
 VIDEO_PRINTW.SHOW_LONG :      13C6 C |  VIDEO_PRINTW.SHOW_NIBBL :     13E2 C |
 VIDEO_PRINTW.SHOW_WORD :      13B6 C |  VIDEO_PRINTW.SPECIAL :        1380 C |
 VIDEO_PRINTW.VER_CONT :       136C C |  VIDEO_PRINTW.VER_NORMAL :     133A C |
 VIDEO_RENDER :                 60C C |  VIDEO_RENDER.END :             6F0 C |
 VIDEO_RENDER.EXIT :            6FA C |  VIDEO_RENDER.NEXT :            6D6 C |
 VIDEO_RESOLUTION :             9E6 C |  VIDEO_RESOLUTION.DOUBLE :      A28 C |
 VIDEO_RESOLUTION.EX_BIT :      A1A C |  VIDEO_RUNFADE :                F1C C |
 VIDEO_RUNFADE.ALL_BLACK :      FE8 C |  VIDEO_RUNFADE.BUSY_TIMER :     F62 C |
 VIDEO_RUNFADE.FADE_IN :        FF6 C |  VIDEO_RUNFADE.FADE_LIST :      F6E C |
 VIDEO_RUNFADE.FADE_OUT :       F86 C | *VIDEO_RUNFADE.FDIN_NEND :     108C C |
*VIDEO_RUNFADE.FDOUT_NEND :     FF4 C |  VIDEO_RUNFADE.NEXT_COLOR :     F94 C |
 VIDEO_RUNFADE.NEXT_IN :       1002 C |  VIDEO_RUNFADE.NEXT_REQ :       F20 C |
 VIDEO_RUNFADE.NOTHING :        F7E C |  VIDEO_RUNFADE.NO_REQ :         F68 C |
 VIDEO_RUNFADE.PFADE_DEL :      F7E C |  VIDEO_RUNFADE.SAME_IN :       1076 C |
 VIDEO_SETMAPSIZE :             AC6 C | *VIDEO_SETSPR :                1472 C |
 VIDEO_SETSPRMAP :             150A C | *VIDEO_SETSPRMAP_DMA :         1500 C |
 VIDEO_UPDMAPVRAM :             A3A C |  VIDEO_UPDSPRHVRAM :            A8C C |
 VIDEO_WAITFADE :              108E C |  VIDEO_WAITFADE.LOOP :         108E C |
 VIDEO_WAITFADE.NEXT_ONE :     109C C |  VIDMDSPR_MKSPR :              149C C |
 VIDMDSPR_MKSPR.DONT_ADD :     14C6 C |  VIDMDSPR_MKSPRMAP :           154A C |
 VIDMD_CERROR :                14F6 C | *VIDMD_CFREEZE :               14FE C |
 VIDMD_PAL :                   1122 C |  VIDMD_PAL.BAD :               1140 C |
 VIDMD_PAL.LOOP :              113A C |  VIDMKFADE_GO :                10EA C |
 VIDPRINT_INIT :               1190 C |  VID_CHECKLASTSPR :             8D8 C |
 VID_CHECKLASTSPR.BLNK_FIRST :  8F2 C |  VID_CHECKLASTSPR.LAST_ONE :    8F8 C |
 VID_CHECKLASTSPR.SPR_EXIT :    908 C | *VID_FILLGO :                   C06 C |
 VID_FILLGO.DMAW :              C0C C |  VID_FILLGO.DMA_W :             C60 C |
 VID_FONTDEFPAL :              11A4 C |  VID_MKDMACARRY :              1526 C |
 VID_MKDMANEXT :               151C C |  VID_MKMAPDMA :                1586 C |
 VID_MKMAPDMA.NEXT_PZ :        15A6 C |  VID_MKMAPDMA.NO_DMA :         15D0 C |
 VID_WRTREG01 :                 986 C | *VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :                195E C |
*VIRQ_ON :                        8 - | *VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1CF5 C |  WAVE_LEN :                    1CED C |
 WAVE_LOOP :                   1CF0 C |  WAVE_PITCH :                  1CF3 C |
 WAVE_START :                  1CEA C |  WAVFREQ_CDPCM :               1413 C |
 WAVFREQ_LIST :                13B1 C |  X68KSRCLSB :                  1F60 C |
 X68KSRCMID :                  1F61 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                    1EDC C |
 Z80_CODE_END :                3E64 C | *Z80_CODE_FILE_E :             3E64 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      60 C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
 ZDRVRAMLEN :                    30 - |  ZDRVRAMSRC :                    35 - |
 ZDRVROMBLK :                    2F - | *ZMARS_SEND :                   EF5 C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZTBL_CHIP :                      3 - |  ZTBL_FREQINDX :                  5 - |
 ZTBL_INSTCACH :                  A - |  ZTBL_LINK :                      0 - |
 ZTBL_MASTERVOL :                 4 - |  ZTBL_PITCHBEND :                 6 - |
*ZTBL_PRIORITY :                  2 - |  ZTBL_VOLSLIDE :                  8 - |
 ZTBL_VOLUME :                    7 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1279 symbols
    407 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 10/11/2024 07:15:31 PM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
DATA_DEND                             | DATA_DSET                            
ENDMEMORY                             | ERREPORT                             
FILLSECTORS                           | FS_END                               
FS_FILE                               | FS_MKLIST                            
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | MARS_VRAMEND                         
MARS_VRAMSTART                        | MEMORY                               
REPORT                                | ROMPAD                               
SCREEN_CODE                           | VDP_SHOWME                           

     28 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 10/11/2024 07:15:31 PM


  Defined Structures/Unions:
  --------------------------

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM
3 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 10/11/2024 07:15:31 PM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 10/11/2024 07:15:31 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.15 seconds assembly time

  14159 lines source file
  14604 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
